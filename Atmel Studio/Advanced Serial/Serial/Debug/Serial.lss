
Serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000378  0000040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000378  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800118  00800118  00000424  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000454  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bd5  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000824  00000000  00000000  000010d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000469  00000000  00000000  000018fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001d68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046d  00000000  00000000  00001e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003ac  00000000  00000000  000022e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002695  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__ctors_end>
   4:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
   8:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
   c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  10:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  14:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  18:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  1c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  20:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  24:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  28:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  2c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  30:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  34:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  38:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  3c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  40:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  44:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  48:	0c 94 c0 00 	jmp	0x180	; 0x180 <__vector_18>
  4c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__vector_19>
  50:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  54:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  58:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  5c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  60:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  64:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	42 75       	andi	r20, 0x52	; 82
  6a:	66 66       	ori	r22, 0x66	; 102
  6c:	65 72       	andi	r22, 0x25	; 37
  6e:	20 6f       	ori	r18, 0xF0	; 240
  70:	76 65       	ori	r23, 0x56	; 86
  72:	72 66       	ori	r23, 0x62	; 98
  74:	6c 6f       	ori	r22, 0xFC	; 252
  76:	77 20       	and	r7, r7
  78:	65 72       	andi	r22, 0x25	; 37
  7a:	72 6f       	ori	r23, 0xF2	; 242
  7c:	72 3a       	cpi	r23, 0xA2	; 162
  7e:	20 00       	.word	0x0020	; ????

00000080 <__c.1948>:
  80:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
  90:	6f 72 3a 20 00                                      or: .

00000095 <__c.1946>:
  95:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
  a5:	3a 20 00                                            : .

000000a8 <__c.1944>:
  a8:	53 74 72 69 6e 67 20 73 74 6f 72 65 64 20 69 6e     String stored in
  b8:	20 46 4c 41 53 48 0a 00                              FLASH..

000000c0 <__ctors_end>:
  c0:	11 24       	eor	r1, r1
  c2:	1f be       	out	0x3f, r1	; 63
  c4:	cf ef       	ldi	r28, 0xFF	; 255
  c6:	d8 e0       	ldi	r29, 0x08	; 8
  c8:	de bf       	out	0x3e, r29	; 62
  ca:	cd bf       	out	0x3d, r28	; 61

000000cc <__do_copy_data>:
  cc:	11 e0       	ldi	r17, 0x01	; 1
  ce:	a0 e0       	ldi	r26, 0x00	; 0
  d0:	b1 e0       	ldi	r27, 0x01	; 1
  d2:	e8 e7       	ldi	r30, 0x78	; 120
  d4:	f3 e0       	ldi	r31, 0x03	; 3
  d6:	02 c0       	rjmp	.+4      	; 0xdc <__do_copy_data+0x10>
  d8:	05 90       	lpm	r0, Z+
  da:	0d 92       	st	X+, r0
  dc:	a8 31       	cpi	r26, 0x18	; 24
  de:	b1 07       	cpc	r27, r17
  e0:	d9 f7       	brne	.-10     	; 0xd8 <__do_copy_data+0xc>

000000e2 <__do_clear_bss>:
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	a8 e1       	ldi	r26, 0x18	; 24
  e6:	b1 e0       	ldi	r27, 0x01	; 1
  e8:	01 c0       	rjmp	.+2      	; 0xec <.do_clear_bss_start>

000000ea <.do_clear_bss_loop>:
  ea:	1d 92       	st	X+, r1

000000ec <.do_clear_bss_start>:
  ec:	ad 35       	cpi	r26, 0x5D	; 93
  ee:	b2 07       	cpc	r27, r18
  f0:	e1 f7       	brne	.-8      	; 0xea <.do_clear_bss_loop>
  f2:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  f6:	0c 94 ba 01 	jmp	0x374	; 0x374 <_exit>

000000fa <__bad_interrupt>:
  fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fe <main>:
/* Define UART buad rate here */
#define UART_BAUD_RATE      9600      


int main(void)
{
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
 106:	27 97       	sbiw	r28, 0x07	; 7
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	f8 94       	cli
 10c:	de bf       	out	0x3e, r29	; 62
 10e:	0f be       	out	0x3f, r0	; 63
 110:	cd bf       	out	0x3d, r28	; 61
     *  with the macro 
     *  UART_BAUD_SELECT() (normal speed mode )
     *  or 
     *  UART_BAUD_SELECT_DOUBLE_SPEED() ( double speed mode)
     */
    uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 
 112:	87 e6       	ldi	r24, 0x67	; 103
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 18 01 	call	0x230	; 0x230 <uart_init>
    
    /*
     * now enable interrupt, since UART library is interrupt controlled
     */
    sei();
 11a:	78 94       	sei
     *  The string is buffered by the uart library in a circular buffer
     *  and one character at a time is transmitted to the UART using interrupts.
     *  uart_puts() blocks if it can not write the whole string to the circular 
     *  buffer
     */
    uart_puts("String stored in SRAM\n");
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 64 01 	call	0x2c8	; 0x2c8 <uart_puts>
    
    /*
     * Transmit string from program memory to UART
     */
    uart_puts_P("String stored in FLASH\n");
 124:	88 ea       	ldi	r24, 0xA8	; 168
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 73 01 	call	0x2e6	; 0x2e6 <uart_puts_p>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 12c:	4a e0       	ldi	r20, 0x0A	; 10
 12e:	be 01       	movw	r22, r28
 130:	6f 5f       	subi	r22, 0xFF	; 255
 132:	7f 4f       	sbci	r23, 0xFF	; 255
 134:	86 e8       	ldi	r24, 0x86	; 134
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 85 01 	call	0x30a	; 0x30a <__itoa_ncheck>
    /* 
     * Use standard avr-libc functions to convert numbers into string
     * before transmitting via UART
     */     
    itoa( num, buffer, 10);   // convert interger into string (decimal format)         
    uart_puts(buffer);        // and transmit string to UART
 13c:	ce 01       	movw	r24, r28
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	0e 94 64 01 	call	0x2c8	; 0x2c8 <uart_puts>

    
    /*
     * Transmit single character to UART
     */
    uart_putc('\r');
 144:	8d e0       	ldi	r24, 0x0D	; 13
 146:	0e 94 4f 01 	call	0x29e	; 0x29e <uart_putc>
         * in the higher byte (bitmask) the last receive error
         * UART_NO_DATA is returned when no data is available.
         *
         */
		
        c = uart_getc();
 14a:	0e 94 31 01 	call	0x262	; 0x262 <uart_getc>
 14e:	8c 01       	movw	r16, r24
        if ( c & UART_NO_DATA )
 150:	90 fd       	sbrc	r25, 0
 152:	fb cf       	rjmp	.-10     	; 0x14a <main+0x4c>
        {
            /*
             * new data available from UART
             * check for Frame or Overrun error
             */
            if ( c & UART_FRAME_ERROR )
 154:	94 ff       	sbrs	r25, 4
 156:	04 c0       	rjmp	.+8      	; 0x160 <main+0x62>
            {
                /* Framing Error detected, i.e no stop bit detected */
                uart_puts_P("UART Frame Error: ");
 158:	85 e9       	ldi	r24, 0x95	; 149
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <uart_puts_p>
            }
            if ( c & UART_OVERRUN_ERROR )
 160:	13 ff       	sbrs	r17, 3
 162:	04 c0       	rjmp	.+8      	; 0x16c <main+0x6e>
                /* 
                 * Overrun, a character already present in the UART UDR register was 
                 * not read by the interrupt handler before the next character arrived,
                 * one or more received characters have been dropped
                 */
                uart_puts_P("UART Overrun Error: ");
 164:	80 e8       	ldi	r24, 0x80	; 128
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 73 01 	call	0x2e6	; 0x2e6 <uart_puts_p>
            }
            if ( c & UART_BUFFER_OVERFLOW )
 16c:	11 ff       	sbrs	r17, 1
 16e:	04 c0       	rjmp	.+8      	; 0x178 <main+0x7a>
            {
                /* 
                 * We are not reading the receive buffer fast enough,
                 * one or more received character have been dropped 
                 */
                uart_puts_P("Buffer overflow error: ");
 170:	88 e6       	ldi	r24, 0x68	; 104
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 73 01 	call	0x2e6	; 0x2e6 <uart_puts_p>
            }
            /* 
             * send received character back
             */
            uart_putc( (unsigned char)c );
 178:	80 2f       	mov	r24, r16
 17a:	0e 94 4f 01 	call	0x29e	; 0x29e <uart_putc>
 17e:	e5 cf       	rjmp	.-54     	; 0x14a <main+0x4c>

00000180 <__vector_18>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 180:	1f 92       	push	r1
 182:	0f 92       	push	r0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	0f 92       	push	r0
 188:	11 24       	eor	r1, r1
 18a:	2f 93       	push	r18
 18c:	8f 93       	push	r24
 18e:	9f 93       	push	r25
 190:	ef 93       	push	r30
 192:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 194:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    data = UART0_DATA;
 198:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
#if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE)|_BV(DOR)|_BV(UPE) );
#elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0)|_BV(DOR0)|_BV(UPE0) );
 19c:	8c 71       	andi	r24, 0x1C	; 28
#elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE)|_BV(DOR) );
#endif

    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 19e:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <UART_RxHead>
 1a2:	ef 5f       	subi	r30, 0xFF	; 255
 1a4:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 1a6:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <UART_RxTail>
 1aa:	e9 17       	cp	r30, r25
 1ac:	39 f0       	breq	.+14     	; 0x1bc <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 1ae:	e0 93 1a 01 	sts	0x011A, r30	; 0x80011a <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	e3 5e       	subi	r30, 0xE3	; 227
 1b6:	fe 4f       	sbci	r31, 0xFE	; 254
 1b8:	20 83       	st	Z, r18
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 1bc:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
 1be:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <__data_end>
 1c2:	89 2b       	or	r24, r25
 1c4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
}
 1c8:	ff 91       	pop	r31
 1ca:	ef 91       	pop	r30
 1cc:	9f 91       	pop	r25
 1ce:	8f 91       	pop	r24
 1d0:	2f 91       	pop	r18
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <__vector_19>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 1dc:	1f 92       	push	r1
 1de:	0f 92       	push	r0
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	0f 92       	push	r0
 1e4:	11 24       	eor	r1, r1
 1e6:	8f 93       	push	r24
 1e8:	9f 93       	push	r25
 1ea:	ef 93       	push	r30
 1ec:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 1ee:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <UART_TxHead>
 1f2:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <UART_TxTail>
 1f6:	98 17       	cp	r25, r24
 1f8:	69 f0       	breq	.+26     	; 0x214 <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 1fa:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <UART_TxTail>
 1fe:	ef 5f       	subi	r30, 0xFF	; 255
 200:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 202:	e0 93 1b 01 	sts	0x011B, r30	; 0x80011b <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	e3 5c       	subi	r30, 0xC3	; 195
 20a:	fe 4f       	sbci	r31, 0xFE	; 254
 20c:	80 81       	ld	r24, Z
 20e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 212:	05 c0       	rjmp	.+10     	; 0x21e <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 214:	e1 ec       	ldi	r30, 0xC1	; 193
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	8f 7d       	andi	r24, 0xDF	; 223
 21c:	80 83       	st	Z, r24
    }
}
 21e:	ff 91       	pop	r31
 220:	ef 91       	pop	r30
 222:	9f 91       	pop	r25
 224:	8f 91       	pop	r24
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti

00000230 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 230:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <UART_TxHead>
    UART_TxTail = 0;
 234:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <UART_TxTail>
    UART_RxHead = 0;
 238:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <UART_RxHead>
    UART_RxTail = 0;
 23c:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <UART_RxTail>
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 )
 240:	99 23       	and	r25, r25
 242:	1c f4       	brge	.+6      	; 0x24a <uart_init+0x1a>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1<<UART0_BIT_U2X);  //Enable 2x speed 
 244:	22 e0       	ldi	r18, 0x02	; 2
 246:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
        #endif
    } 
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
 24a:	90 78       	andi	r25, 0x80	; 128
 24c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    #endif    
    UART0_UBRRL = (unsigned char) (baudrate&0x00FF);
 250:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
      
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE)|(1<<UART0_BIT_RXEN)|(1<<UART0_BIT_TXEN);
 254:	88 e9       	ldi	r24, 0x98	; 152
 256:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    #ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1<<UART0_BIT_URSEL)|(1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    #else
    UART0_CONTROLC = (1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
 25a:	86 e0       	ldi	r24, 0x06	; 6
 25c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 260:	08 95       	ret

00000262 <uart_getc>:
    unsigned char tmptail;
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
 262:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <UART_RxHead>
 266:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <UART_RxTail>
 26a:	98 17       	cp	r25, r24
 26c:	a9 f0       	breq	.+42     	; 0x298 <uart_getc+0x36>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 26e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <UART_RxTail>
 272:	9f 5f       	subi	r25, 0xFF	; 255
 274:	9f 71       	andi	r25, 0x1F	; 31
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 276:	e9 2f       	mov	r30, r25
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	e3 5e       	subi	r30, 0xE3	; 227
 27c:	fe 4f       	sbci	r31, 0xFE	; 254
 27e:	20 81       	ld	r18, Z
    lastRxError = UART_LastRxError;
 280:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
    
    /* store buffer index */
    UART_RxTail = tmptail; 
 284:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <UART_RxTail>
    
    UART_LastRxError = 0;
 288:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
    return (lastRxError << 8) + data;
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	98 2f       	mov	r25, r24
 290:	88 27       	eor	r24, r24
 292:	82 0f       	add	r24, r18
 294:	91 1d       	adc	r25, r1
 296:	08 95       	ret
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	91 e0       	ldi	r25, 0x01	; 1
    UART_RxTail = tmptail; 
    
    UART_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart_getc */
 29c:	08 95       	ret

0000029e <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 29e:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <UART_TxHead>
 2a2:	2f 5f       	subi	r18, 0xFF	; 255
 2a4:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 2a6:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <UART_TxTail>
 2aa:	29 17       	cp	r18, r25
 2ac:	e1 f3       	breq	.-8      	; 0x2a6 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 2ae:	e2 2f       	mov	r30, r18
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	e3 5c       	subi	r30, 0xC3	; 195
 2b4:	fe 4f       	sbci	r31, 0xFE	; 254
 2b6:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 2b8:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 2bc:	e1 ec       	ldi	r30, 0xC1	; 193
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	80 62       	ori	r24, 0x20	; 32
 2c4:	80 83       	st	Z, r24
 2c6:	08 95       	ret

000002c8 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	ec 01       	movw	r28, r24
    while (*s) 
 2ce:	88 81       	ld	r24, Y
 2d0:	88 23       	and	r24, r24
 2d2:	31 f0       	breq	.+12     	; 0x2e0 <uart_puts+0x18>
 2d4:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
 2d6:	0e 94 4f 01 	call	0x29e	; 0x29e <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 2da:	89 91       	ld	r24, Y+
 2dc:	81 11       	cpse	r24, r1
 2de:	fb cf       	rjmp	.-10     	; 0x2d6 <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	08 95       	ret

000002e6 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 2ea:	ec 01       	movw	r28, r24
 2ec:	21 96       	adiw	r28, 0x01	; 1
 2ee:	fc 01       	movw	r30, r24
 2f0:	84 91       	lpm	r24, Z
 2f2:	88 23       	and	r24, r24
 2f4:	39 f0       	breq	.+14     	; 0x304 <uart_puts_p+0x1e>
      uart_putc(c);
 2f6:	0e 94 4f 01 	call	0x29e	; 0x29e <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 2fa:	fe 01       	movw	r30, r28
 2fc:	84 91       	lpm	r24, Z
 2fe:	21 96       	adiw	r28, 0x01	; 1
 300:	81 11       	cpse	r24, r1
 302:	f9 cf       	rjmp	.-14     	; 0x2f6 <uart_puts_p+0x10>
      uart_putc(c);

}/* uart_puts_p */
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	08 95       	ret

0000030a <__itoa_ncheck>:
 30a:	bb 27       	eor	r27, r27
 30c:	4a 30       	cpi	r20, 0x0A	; 10
 30e:	31 f4       	brne	.+12     	; 0x31c <__itoa_ncheck+0x12>
 310:	99 23       	and	r25, r25
 312:	22 f4       	brpl	.+8      	; 0x31c <__itoa_ncheck+0x12>
 314:	bd e2       	ldi	r27, 0x2D	; 45
 316:	90 95       	com	r25
 318:	81 95       	neg	r24
 31a:	9f 4f       	sbci	r25, 0xFF	; 255
 31c:	0c 94 91 01 	jmp	0x322	; 0x322 <__utoa_common>

00000320 <__utoa_ncheck>:
 320:	bb 27       	eor	r27, r27

00000322 <__utoa_common>:
 322:	fb 01       	movw	r30, r22
 324:	55 27       	eor	r21, r21
 326:	aa 27       	eor	r26, r26
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	aa 1f       	adc	r26, r26
 32e:	a4 17       	cp	r26, r20
 330:	10 f0       	brcs	.+4      	; 0x336 <__utoa_common+0x14>
 332:	a4 1b       	sub	r26, r20
 334:	83 95       	inc	r24
 336:	50 51       	subi	r21, 0x10	; 16
 338:	b9 f7       	brne	.-18     	; 0x328 <__utoa_common+0x6>
 33a:	a0 5d       	subi	r26, 0xD0	; 208
 33c:	aa 33       	cpi	r26, 0x3A	; 58
 33e:	08 f0       	brcs	.+2      	; 0x342 <__utoa_common+0x20>
 340:	a9 5d       	subi	r26, 0xD9	; 217
 342:	a1 93       	st	Z+, r26
 344:	00 97       	sbiw	r24, 0x00	; 0
 346:	79 f7       	brne	.-34     	; 0x326 <__utoa_common+0x4>
 348:	b1 11       	cpse	r27, r1
 34a:	b1 93       	st	Z+, r27
 34c:	11 92       	st	Z+, r1
 34e:	cb 01       	movw	r24, r22
 350:	0c 94 aa 01 	jmp	0x354	; 0x354 <strrev>

00000354 <strrev>:
 354:	dc 01       	movw	r26, r24
 356:	fc 01       	movw	r30, r24
 358:	67 2f       	mov	r22, r23
 35a:	71 91       	ld	r23, Z+
 35c:	77 23       	and	r23, r23
 35e:	e1 f7       	brne	.-8      	; 0x358 <strrev+0x4>
 360:	32 97       	sbiw	r30, 0x02	; 2
 362:	04 c0       	rjmp	.+8      	; 0x36c <strrev+0x18>
 364:	7c 91       	ld	r23, X
 366:	6d 93       	st	X+, r22
 368:	70 83       	st	Z, r23
 36a:	62 91       	ld	r22, -Z
 36c:	ae 17       	cp	r26, r30
 36e:	bf 07       	cpc	r27, r31
 370:	c8 f3       	brcs	.-14     	; 0x364 <strrev+0x10>
 372:	08 95       	ret

00000374 <_exit>:
 374:	f8 94       	cli

00000376 <__stop_program>:
 376:	ff cf       	rjmp	.-2      	; 0x376 <__stop_program>
