
AtoD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000586  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800100  00800100  000005fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000062c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001231  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000abd  00000000  00000000  00001985  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000096a  00000000  00000000  00002442  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00002dac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050a  00000000  00000000  00002fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b32  00000000  00000000  000034de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ad 30       	cpi	r26, 0x0D	; 13
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 9a 02 	call	0x534	; 0x534 <main>
  88:	0c 94 c1 02 	jmp	0x582	; 0x582 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <adc_pin_config>:
	}
	
	adc_val[channel] = val/i;
	
	return adc_val[channel];
}
  90:	17 b8       	out	0x07, r1	; 7
  92:	18 b8       	out	0x08, r1	; 8
  94:	08 95       	ret

00000096 <adc_config>:
  96:	8f e8       	ldi	r24, 0x8F	; 143
  98:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  9c:	83 b7       	in	r24, 0x33	; 51
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	83 bf       	out	0x33, r24	; 51
  a2:	08 95       	ret

000000a4 <read_adc>:
  a4:	83 b7       	in	r24, 0x33	; 51
  a6:	81 7f       	andi	r24, 0xF1	; 241
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	83 bf       	out	0x33, r24	; 51
  ac:	83 b7       	in	r24, 0x33	; 51
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	83 bf       	out	0x33, r24	; 51
  b2:	88 95       	sleep
  b4:	83 b7       	in	r24, 0x33	; 51
  b6:	8e 7f       	andi	r24, 0xFE	; 254
  b8:	83 bf       	out	0x33, r24	; 51
  ba:	08 95       	ret

000000bc <update_adc_channel>:
  bc:	cf 93       	push	r28
  be:	c8 2f       	mov	r28, r24
  c0:	88 30       	cpi	r24, 0x08	; 8
  c2:	58 f4       	brcc	.+22     	; 0xda <update_adc_channel+0x1e>
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  ca:	8f e9       	ldi	r24, 0x9F	; 159
  cc:	9f e0       	ldi	r25, 0x0F	; 15
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <update_adc_channel+0x12>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <update_adc_channel+0x18>
  d4:	00 00       	nop
  d6:	0e 94 52 00 	call	0xa4	; 0xa4 <read_adc>
  da:	ec 2f       	mov	r30, r28
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	ee 0f       	add	r30, r30
  e0:	ff 1f       	adc	r31, r31
  e2:	ef 5f       	subi	r30, 0xFF	; 255
  e4:	fe 4f       	sbci	r31, 0xFE	; 254
  e6:	80 81       	ld	r24, Z
  e8:	91 81       	ldd	r25, Z+1	; 0x01
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <__vector_21>:

//Conversion complete 
ISR(ADC_vect)
{
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	2f 93       	push	r18
  fa:	3f 93       	push	r19
  fc:	4f 93       	push	r20
  fe:	8f 93       	push	r24
 100:	9f 93       	push	r25
 102:	ef 93       	push	r30
 104:	ff 93       	push	r31
	unsigned char channel = ADMUX & 0x0F;	//Read channel number by masking upper nibble
 106:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	//ADIF is automatically cleared by writing a logical one to the flag.
	//Read ADC value
	unsigned char low = ADCL;
 10a:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	unsigned char high = ADCH;
 10e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	
	adc_val[channel] = 0x03 && high;
 112:	ef 70       	andi	r30, 0x0F	; 15
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	21 e0       	ldi	r18, 0x01	; 1
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	81 11       	cpse	r24, r1
 11c:	02 c0       	rjmp	.+4      	; 0x122 <__vector_21+0x34>
 11e:	20 e0       	ldi	r18, 0x00	; 0
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	ee 0f       	add	r30, r30
 124:	ff 1f       	adc	r31, r31
 126:	ef 5f       	subi	r30, 0xFF	; 255
 128:	fe 4f       	sbci	r31, 0xFE	; 254
 12a:	31 83       	std	Z+1, r19	; 0x01
 12c:	20 83       	st	Z, r18
	adc_val[channel] = adc_val[channel]<<8;
 12e:	20 81       	ld	r18, Z
 130:	31 81       	ldd	r19, Z+1	; 0x01
 132:	32 2f       	mov	r19, r18
 134:	22 27       	eor	r18, r18
 136:	31 83       	std	Z+1, r19	; 0x01
 138:	20 83       	st	Z, r18
	adc_val[channel] = 256*high + low;
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	98 2f       	mov	r25, r24
 13e:	88 27       	eor	r24, r24
 140:	84 0f       	add	r24, r20
 142:	91 1d       	adc	r25, r1
 144:	91 83       	std	Z+1, r25	; 0x01
 146:	80 83       	st	Z, r24
 148:	ff 91       	pop	r31
 14a:	ef 91       	pop	r30
 14c:	9f 91       	pop	r25
 14e:	8f 91       	pop	r24
 150:	4f 91       	pop	r20
 152:	3f 91       	pop	r19
 154:	2f 91       	pop	r18
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <Bit_Reverse>:
	while(*str != '\0')
	{
		lcd_wr_char(*str);
		str++;
	}
}
 160:	98 2f       	mov	r25, r24
 162:	99 1f       	adc	r25, r25
 164:	99 27       	eor	r25, r25
 166:	99 1f       	adc	r25, r25
 168:	86 fd       	sbrc	r24, 6
 16a:	02 c0       	rjmp	.+4      	; 0x170 <Bit_Reverse+0x10>
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	01 c0       	rjmp	.+2      	; 0x172 <Bit_Reverse+0x12>
 170:	22 e0       	ldi	r18, 0x02	; 2
 172:	92 2b       	or	r25, r18
 174:	85 fd       	sbrc	r24, 5
 176:	02 c0       	rjmp	.+4      	; 0x17c <Bit_Reverse+0x1c>
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	01 c0       	rjmp	.+2      	; 0x17e <Bit_Reverse+0x1e>
 17c:	24 e0       	ldi	r18, 0x04	; 4
 17e:	92 2b       	or	r25, r18
 180:	84 fd       	sbrc	r24, 4
 182:	02 c0       	rjmp	.+4      	; 0x188 <Bit_Reverse+0x28>
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	01 c0       	rjmp	.+2      	; 0x18a <Bit_Reverse+0x2a>
 188:	28 e0       	ldi	r18, 0x08	; 8
 18a:	92 2b       	or	r25, r18
 18c:	83 fd       	sbrc	r24, 3
 18e:	02 c0       	rjmp	.+4      	; 0x194 <Bit_Reverse+0x34>
 190:	20 e0       	ldi	r18, 0x00	; 0
 192:	01 c0       	rjmp	.+2      	; 0x196 <Bit_Reverse+0x36>
 194:	20 e1       	ldi	r18, 0x10	; 16
 196:	92 2b       	or	r25, r18
 198:	82 fd       	sbrc	r24, 2
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <Bit_Reverse+0x40>
 19c:	20 e0       	ldi	r18, 0x00	; 0
 19e:	01 c0       	rjmp	.+2      	; 0x1a2 <Bit_Reverse+0x42>
 1a0:	20 e2       	ldi	r18, 0x20	; 32
 1a2:	92 2b       	or	r25, r18
 1a4:	81 fd       	sbrc	r24, 1
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <Bit_Reverse+0x4c>
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	01 c0       	rjmp	.+2      	; 0x1ae <Bit_Reverse+0x4e>
 1ac:	20 e4       	ldi	r18, 0x40	; 64
 1ae:	92 2b       	or	r25, r18
 1b0:	80 fd       	sbrc	r24, 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <Bit_Reverse+0x58>
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <Bit_Reverse+0x5a>
 1b8:	80 e8       	ldi	r24, 0x80	; 128
 1ba:	89 2b       	or	r24, r25
 1bc:	08 95       	ret

000001be <lcd_wr_command>:
 1be:	cf 93       	push	r28
 1c0:	c8 2f       	mov	r28, r24
 1c2:	80 7f       	andi	r24, 0xF0	; 240
 1c4:	0e 94 b0 00 	call	0x160	; 0x160 <Bit_Reverse>
 1c8:	88 0f       	add	r24, r24
 1ca:	88 0f       	add	r24, r24
 1cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1d0:	8b b1       	in	r24, 0x0b	; 11
 1d2:	83 7c       	andi	r24, 0xC3	; 195
 1d4:	8b b9       	out	0x0b, r24	; 11
 1d6:	9b b1       	in	r25, 0x0b	; 11
 1d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1dc:	89 2b       	or	r24, r25
 1de:	8b b9       	out	0x0b, r24	; 11
 1e0:	5f 98       	cbi	0x0b, 7	; 11
 1e2:	5e 9a       	sbi	0x0b, 6	; 11
 1e4:	8f e1       	ldi	r24, 0x1F	; 31
 1e6:	9e e4       	ldi	r25, 0x4E	; 78
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <lcd_wr_command+0x2a>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <lcd_wr_command+0x30>
 1ee:	00 00       	nop
 1f0:	5e 98       	cbi	0x0b, 6	; 11
 1f2:	8c 2f       	mov	r24, r28
 1f4:	82 95       	swap	r24
 1f6:	80 7f       	andi	r24, 0xF0	; 240
 1f8:	0e 94 b0 00 	call	0x160	; 0x160 <Bit_Reverse>
 1fc:	9b b1       	in	r25, 0x0b	; 11
 1fe:	93 7c       	andi	r25, 0xC3	; 195
 200:	9b b9       	out	0x0b, r25	; 11
 202:	9b b1       	in	r25, 0x0b	; 11
 204:	88 0f       	add	r24, r24
 206:	88 0f       	add	r24, r24
 208:	98 2b       	or	r25, r24
 20a:	9b b9       	out	0x0b, r25	; 11
 20c:	5f 98       	cbi	0x0b, 7	; 11
 20e:	5e 9a       	sbi	0x0b, 6	; 11
 210:	8f e1       	ldi	r24, 0x1F	; 31
 212:	9e e4       	ldi	r25, 0x4E	; 78
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <lcd_wr_command+0x56>
 218:	00 c0       	rjmp	.+0      	; 0x21a <lcd_wr_command+0x5c>
 21a:	00 00       	nop
 21c:	5e 98       	cbi	0x0b, 6	; 11
 21e:	cf 91       	pop	r28
 220:	08 95       	ret

00000222 <lcd_port_config>:
 222:	8a b1       	in	r24, 0x0a	; 10
 224:	8c 6f       	ori	r24, 0xFC	; 252
 226:	8a b9       	out	0x0a, r24	; 10
 228:	8b b1       	in	r24, 0x0b	; 11
 22a:	84 70       	andi	r24, 0x04	; 4
 22c:	8b b9       	out	0x0b, r24	; 11
 22e:	08 95       	ret

00000230 <lcd_wr_char>:
 230:	cf 93       	push	r28
 232:	c8 2f       	mov	r28, r24
 234:	80 7f       	andi	r24, 0xF0	; 240
 236:	0e 94 b0 00 	call	0x160	; 0x160 <Bit_Reverse>
 23a:	9b b1       	in	r25, 0x0b	; 11
 23c:	93 7c       	andi	r25, 0xC3	; 195
 23e:	9b b9       	out	0x0b, r25	; 11
 240:	9b b1       	in	r25, 0x0b	; 11
 242:	88 0f       	add	r24, r24
 244:	88 0f       	add	r24, r24
 246:	98 2b       	or	r25, r24
 248:	9b b9       	out	0x0b, r25	; 11
 24a:	5f 9a       	sbi	0x0b, 7	; 11
 24c:	5e 9a       	sbi	0x0b, 6	; 11
 24e:	8f e1       	ldi	r24, 0x1F	; 31
 250:	9e e4       	ldi	r25, 0x4E	; 78
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <lcd_wr_char+0x22>
 256:	00 c0       	rjmp	.+0      	; 0x258 <lcd_wr_char+0x28>
 258:	00 00       	nop
 25a:	5e 98       	cbi	0x0b, 6	; 11
 25c:	8c 2f       	mov	r24, r28
 25e:	82 95       	swap	r24
 260:	80 7f       	andi	r24, 0xF0	; 240
 262:	0e 94 b0 00 	call	0x160	; 0x160 <Bit_Reverse>
 266:	9b b1       	in	r25, 0x0b	; 11
 268:	93 7c       	andi	r25, 0xC3	; 195
 26a:	9b b9       	out	0x0b, r25	; 11
 26c:	9b b1       	in	r25, 0x0b	; 11
 26e:	88 0f       	add	r24, r24
 270:	88 0f       	add	r24, r24
 272:	98 2b       	or	r25, r24
 274:	9b b9       	out	0x0b, r25	; 11
 276:	5f 9a       	sbi	0x0b, 7	; 11
 278:	5e 9a       	sbi	0x0b, 6	; 11
 27a:	8f e1       	ldi	r24, 0x1F	; 31
 27c:	9e e4       	ldi	r25, 0x4E	; 78
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <lcd_wr_char+0x4e>
 282:	00 c0       	rjmp	.+0      	; 0x284 <lcd_wr_char+0x54>
 284:	00 00       	nop
 286:	5e 98       	cbi	0x0b, 6	; 11
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <lcd_home>:
 28c:	80 e8       	ldi	r24, 0x80	; 128
 28e:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_wr_command>
 292:	08 95       	ret

00000294 <lcd_cursor>:
 294:	81 30       	cpi	r24, 0x01	; 1
 296:	19 f0       	breq	.+6      	; 0x29e <lcd_cursor+0xa>
 298:	82 30       	cpi	r24, 0x02	; 2
 29a:	31 f0       	breq	.+12     	; 0x2a8 <lcd_cursor+0x14>
 29c:	08 95       	ret
 29e:	8f e7       	ldi	r24, 0x7F	; 127
 2a0:	86 0f       	add	r24, r22
 2a2:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_wr_command>
 2a6:	08 95       	ret
 2a8:	8f eb       	ldi	r24, 0xBF	; 191
 2aa:	86 0f       	add	r24, r22
 2ac:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_wr_command>
 2b0:	08 95       	ret

000002b2 <lcd_print>:
* Logic: 
* Example Call: lcd_print(1,1,val,3)
*/
//0020
void lcd_print(char row, char coloumn, unsigned int value, int digits)
{
 2b2:	0f 93       	push	r16
 2b4:	1f 93       	push	r17
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	8a 01       	movw	r16, r20
 2bc:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 2be:	88 23       	and	r24, r24
 2c0:	11 f0       	breq	.+4      	; 0x2c6 <lcd_print+0x14>
 2c2:	61 11       	cpse	r22, r1
 2c4:	03 c0       	rjmp	.+6      	; 0x2cc <lcd_print+0x1a>
	{
		lcd_home();
 2c6:	0e 94 46 01 	call	0x28c	; 0x28c <lcd_home>
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 2cc:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_cursor>
	}
	
	if(digits==5 || flag==1)
 2d0:	c5 30       	cpi	r28, 0x05	; 5
 2d2:	d1 05       	cpc	r29, r1
 2d4:	09 f0       	breq	.+2      	; 0x2d8 <lcd_print+0x26>
 2d6:	bf c0       	rjmp	.+382    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
	{
		million=value/10000+48;
		lcd_wr_char(million);
 2d8:	98 01       	movw	r18, r16
 2da:	32 95       	swap	r19
 2dc:	22 95       	swap	r18
 2de:	2f 70       	andi	r18, 0x0F	; 15
 2e0:	23 27       	eor	r18, r19
 2e2:	3f 70       	andi	r19, 0x0F	; 15
 2e4:	23 27       	eor	r18, r19
 2e6:	a7 e4       	ldi	r26, 0x47	; 71
 2e8:	b3 e0       	ldi	r27, 0x03	; 3
 2ea:	0e 94 b2 02 	call	0x564	; 0x564 <__umulhisi3>
 2ee:	96 95       	lsr	r25
 2f0:	87 95       	ror	r24
 2f2:	96 95       	lsr	r25
 2f4:	87 95       	ror	r24
 2f6:	96 95       	lsr	r25
 2f8:	87 95       	ror	r24
 2fa:	80 5d       	subi	r24, 0xD0	; 208
 2fc:	0e 94 18 01 	call	0x230	; 0x230 <lcd_wr_char>
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
 300:	98 01       	movw	r18, r16
 302:	36 95       	lsr	r19
 304:	27 95       	ror	r18
 306:	36 95       	lsr	r19
 308:	27 95       	ror	r18
 30a:	36 95       	lsr	r19
 30c:	27 95       	ror	r18
 30e:	a5 ec       	ldi	r26, 0xC5	; 197
 310:	b0 e2       	ldi	r27, 0x20	; 32
 312:	0e 94 b2 02 	call	0x564	; 0x564 <__umulhisi3>
 316:	ac 01       	movw	r20, r24
 318:	52 95       	swap	r21
 31a:	42 95       	swap	r20
 31c:	4f 70       	andi	r20, 0x0F	; 15
 31e:	45 27       	eor	r20, r21
 320:	5f 70       	andi	r21, 0x0F	; 15
 322:	45 27       	eor	r20, r21
 324:	9a 01       	movw	r18, r20
 326:	ad ec       	ldi	r26, 0xCD	; 205
 328:	bc ec       	ldi	r27, 0xCC	; 204
 32a:	0e 94 b2 02 	call	0x564	; 0x564 <__umulhisi3>
 32e:	96 95       	lsr	r25
 330:	87 95       	ror	r24
 332:	96 95       	lsr	r25
 334:	87 95       	ror	r24
 336:	96 95       	lsr	r25
 338:	87 95       	ror	r24
 33a:	9c 01       	movw	r18, r24
 33c:	22 0f       	add	r18, r18
 33e:	33 1f       	adc	r19, r19
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	82 0f       	add	r24, r18
 34e:	93 1f       	adc	r25, r19
 350:	9a 01       	movw	r18, r20
 352:	28 1b       	sub	r18, r24
 354:	39 0b       	sbc	r19, r25
 356:	c9 01       	movw	r24, r18
 358:	80 5d       	subi	r24, 0xD0	; 208
 35a:	0e 94 18 01 	call	0x230	; 0x230 <lcd_wr_char>
 35e:	03 c0       	rjmp	.+6      	; 0x366 <lcd_print+0xb4>
		flag=1;
	}
	if(digits==3 || flag==1)
 360:	c3 30       	cpi	r28, 0x03	; 3
 362:	d1 05       	cpc	r29, r1
 364:	51 f5       	brne	.+84     	; 0x3ba <lcd_print+0x108>
	{
		temp = value/100;
		hundred = temp%10 + 48;
		lcd_wr_char(hundred);
 366:	98 01       	movw	r18, r16
 368:	36 95       	lsr	r19
 36a:	27 95       	ror	r18
 36c:	36 95       	lsr	r19
 36e:	27 95       	ror	r18
 370:	ab e7       	ldi	r26, 0x7B	; 123
 372:	b4 e1       	ldi	r27, 0x14	; 20
 374:	0e 94 b2 02 	call	0x564	; 0x564 <__umulhisi3>
 378:	ac 01       	movw	r20, r24
 37a:	56 95       	lsr	r21
 37c:	47 95       	ror	r20
 37e:	9a 01       	movw	r18, r20
 380:	ad ec       	ldi	r26, 0xCD	; 205
 382:	bc ec       	ldi	r27, 0xCC	; 204
 384:	0e 94 b2 02 	call	0x564	; 0x564 <__umulhisi3>
 388:	96 95       	lsr	r25
 38a:	87 95       	ror	r24
 38c:	96 95       	lsr	r25
 38e:	87 95       	ror	r24
 390:	96 95       	lsr	r25
 392:	87 95       	ror	r24
 394:	9c 01       	movw	r18, r24
 396:	22 0f       	add	r18, r18
 398:	33 1f       	adc	r19, r19
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	82 0f       	add	r24, r18
 3a8:	93 1f       	adc	r25, r19
 3aa:	9a 01       	movw	r18, r20
 3ac:	28 1b       	sub	r18, r24
 3ae:	39 0b       	sbc	r19, r25
 3b0:	c9 01       	movw	r24, r18
 3b2:	80 5d       	subi	r24, 0xD0	; 208
 3b4:	0e 94 18 01 	call	0x230	; 0x230 <lcd_wr_char>
 3b8:	04 c0       	rjmp	.+8      	; 0x3c2 <lcd_print+0x110>
		flag=1;
	}
	if(digits==2 || flag==1)
 3ba:	c2 30       	cpi	r28, 0x02	; 2
 3bc:	d1 05       	cpc	r29, r1
 3be:	09 f0       	breq	.+2      	; 0x3c2 <lcd_print+0x110>
 3c0:	4f c0       	rjmp	.+158    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
	{
		temp = value/10;
		tens = temp%10 + 48;
		lcd_wr_char(tens);
 3c2:	98 01       	movw	r18, r16
 3c4:	ad ec       	ldi	r26, 0xCD	; 205
 3c6:	bc ec       	ldi	r27, 0xCC	; 204
 3c8:	0e 94 b2 02 	call	0x564	; 0x564 <__umulhisi3>
 3cc:	ac 01       	movw	r20, r24
 3ce:	56 95       	lsr	r21
 3d0:	47 95       	ror	r20
 3d2:	56 95       	lsr	r21
 3d4:	47 95       	ror	r20
 3d6:	56 95       	lsr	r21
 3d8:	47 95       	ror	r20
 3da:	9a 01       	movw	r18, r20
 3dc:	0e 94 b2 02 	call	0x564	; 0x564 <__umulhisi3>
 3e0:	96 95       	lsr	r25
 3e2:	87 95       	ror	r24
 3e4:	96 95       	lsr	r25
 3e6:	87 95       	ror	r24
 3e8:	96 95       	lsr	r25
 3ea:	87 95       	ror	r24
 3ec:	9c 01       	movw	r18, r24
 3ee:	22 0f       	add	r18, r18
 3f0:	33 1f       	adc	r19, r19
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	82 0f       	add	r24, r18
 400:	93 1f       	adc	r25, r19
 402:	9a 01       	movw	r18, r20
 404:	28 1b       	sub	r18, r24
 406:	39 0b       	sbc	r19, r25
 408:	c9 01       	movw	r24, r18
 40a:	80 5d       	subi	r24, 0xD0	; 208
 40c:	0e 94 18 01 	call	0x230	; 0x230 <lcd_wr_char>
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
		lcd_wr_char(unit);
 410:	98 01       	movw	r18, r16
 412:	ad ec       	ldi	r26, 0xCD	; 205
 414:	bc ec       	ldi	r27, 0xCC	; 204
 416:	0e 94 b2 02 	call	0x564	; 0x564 <__umulhisi3>
 41a:	96 95       	lsr	r25
 41c:	87 95       	ror	r24
 41e:	96 95       	lsr	r25
 420:	87 95       	ror	r24
 422:	96 95       	lsr	r25
 424:	87 95       	ror	r24
 426:	9c 01       	movw	r18, r24
 428:	22 0f       	add	r18, r18
 42a:	33 1f       	adc	r19, r19
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	82 0f       	add	r24, r18
 43a:	93 1f       	adc	r25, r19
 43c:	98 01       	movw	r18, r16
 43e:	28 1b       	sub	r18, r24
 440:	39 0b       	sbc	r19, r25
 442:	c9 01       	movw	r24, r18
 444:	80 5d       	subi	r24, 0xD0	; 208
 446:	0e 94 18 01 	call	0x230	; 0x230 <lcd_wr_char>
	}
	if(digits>5)
 44a:	26 97       	sbiw	r28, 0x06	; 6
 44c:	6c f0       	brlt	.+26     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
	{
		lcd_wr_char('E');
 44e:	85 e4       	ldi	r24, 0x45	; 69
 450:	0e 94 18 01 	call	0x230	; 0x230 <lcd_wr_char>
	}
}
 454:	09 c0       	rjmp	.+18     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
	{
		million=value/10000+48;
		lcd_wr_char(million);
		flag=1;
	}
	if(digits==4 || flag==1)
 456:	c4 30       	cpi	r28, 0x04	; 4
 458:	d1 05       	cpc	r29, r1
 45a:	09 f0       	breq	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 45c:	81 cf       	rjmp	.-254    	; 0x360 <lcd_print+0xae>
 45e:	50 cf       	rjmp	.-352    	; 0x300 <lcd_print+0x4e>
		temp = value/10;
		tens = temp%10 + 48;
		lcd_wr_char(tens);
		flag=1;
	}
	if(digits==1 || flag==1)
 460:	c1 30       	cpi	r28, 0x01	; 1
 462:	d1 05       	cpc	r29, r1
 464:	91 f7       	brne	.-28     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 466:	d4 cf       	rjmp	.-88     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
	}
	if(digits>5)
	{
		lcd_wr_char('E');
	}
}
 468:	df 91       	pop	r29
 46a:	cf 91       	pop	r28
 46c:	1f 91       	pop	r17
 46e:	0f 91       	pop	r16
 470:	08 95       	ret

00000472 <lcd_start>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 472:	8f e9       	ldi	r24, 0x9F	; 159
 474:	9f e0       	ldi	r25, 0x0F	; 15
 476:	01 97       	sbiw	r24, 0x01	; 1
 478:	f1 f7       	brne	.-4      	; 0x476 <lcd_start+0x4>
 47a:	00 c0       	rjmp	.+0      	; 0x47c <lcd_start+0xa>
 47c:	00 00       	nop
*/
static void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 47e:	5f 98       	cbi	0x0b, 7	; 11
	//lcd_port = 0x30;				//Sending 3 (0011 0000)
	lcd_port = 0x30;				//Sending 3 (0011 0000)
 480:	80 e3       	ldi	r24, 0x30	; 48
 482:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 484:	5e 9a       	sbi	0x0b, 6	; 11
 486:	ef e1       	ldi	r30, 0x1F	; 31
 488:	fe e4       	ldi	r31, 0x4E	; 78
 48a:	31 97       	sbiw	r30, 0x01	; 1
 48c:	f1 f7       	brne	.-4      	; 0x48a <lcd_start+0x18>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <lcd_start+0x1e>
 490:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 492:	5e 98       	cbi	0x0b, 6	; 11
 494:	ef e9       	ldi	r30, 0x9F	; 159
 496:	ff e0       	ldi	r31, 0x0F	; 15
 498:	31 97       	sbiw	r30, 0x01	; 1
 49a:	f1 f7       	brne	.-4      	; 0x498 <lcd_start+0x26>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <lcd_start+0x2c>
 49e:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 4a0:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
 4a2:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 4a4:	5e 9a       	sbi	0x0b, 6	; 11
 4a6:	ef e1       	ldi	r30, 0x1F	; 31
 4a8:	fe e4       	ldi	r31, 0x4E	; 78
 4aa:	31 97       	sbiw	r30, 0x01	; 1
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <lcd_start+0x38>
 4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <lcd_start+0x3e>
 4b0:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 4b2:	5e 98       	cbi	0x0b, 6	; 11
 4b4:	ef e9       	ldi	r30, 0x9F	; 159
 4b6:	ff e0       	ldi	r31, 0x0F	; 15
 4b8:	31 97       	sbiw	r30, 0x01	; 1
 4ba:	f1 f7       	brne	.-4      	; 0x4b8 <lcd_start+0x46>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <lcd_start+0x4c>
 4be:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 4c0:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
 4c2:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 4c4:	5e 9a       	sbi	0x0b, 6	; 11
 4c6:	8f e1       	ldi	r24, 0x1F	; 31
 4c8:	9e e4       	ldi	r25, 0x4E	; 78
 4ca:	01 97       	sbiw	r24, 0x01	; 1
 4cc:	f1 f7       	brne	.-4      	; 0x4ca <lcd_start+0x58>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <lcd_start+0x5e>
 4d0:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 4d2:	5e 98       	cbi	0x0b, 6	; 11
 4d4:	ef e9       	ldi	r30, 0x9F	; 159
 4d6:	ff e0       	ldi	r31, 0x0F	; 15
 4d8:	31 97       	sbiw	r30, 0x01	; 1
 4da:	f1 f7       	brne	.-4      	; 0x4d8 <lcd_start+0x66>
 4dc:	00 c0       	rjmp	.+0      	; 0x4de <lcd_start+0x6c>
 4de:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 4e0:	5f 98       	cbi	0x0b, 7	; 11
	//lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
	lcd_port = 0x10;				
 4e2:	80 e1       	ldi	r24, 0x10	; 16
 4e4:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 4e6:	5e 9a       	sbi	0x0b, 6	; 11
 4e8:	8f e9       	ldi	r24, 0x9F	; 159
 4ea:	9f e0       	ldi	r25, 0x0F	; 15
 4ec:	01 97       	sbiw	r24, 0x01	; 1
 4ee:	f1 f7       	brne	.-4      	; 0x4ec <lcd_start+0x7a>
 4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <lcd_start+0x80>
 4f2:	00 00       	nop
	_delay_ms(1);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 4f4:	5e 98       	cbi	0x0b, 6	; 11
 4f6:	ef e9       	ldi	r30, 0x9F	; 159
 4f8:	ff e0       	ldi	r31, 0x0F	; 15
 4fa:	31 97       	sbiw	r30, 0x01	; 1
 4fc:	f1 f7       	brne	.-4      	; 0x4fa <lcd_start+0x88>
 4fe:	00 c0       	rjmp	.+0      	; 0x500 <lcd_start+0x8e>
 500:	00 00       	nop
*/
static void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
 502:	88 e2       	ldi	r24, 0x28	; 40
 504:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_wr_command>
	lcd_wr_command(0x01);			//Clear Display
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_wr_command>
	//lcd_wr_command(0x06);			//Increment cursor (Shift to right)
	lcd_wr_command(0x0C);			//Display on, cursor off
 50e:	8c e0       	ldi	r24, 0x0C	; 12
 510:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_wr_command>
	lcd_wr_command(0x80);			//Force cursor to begigning of first line
 514:	80 e8       	ldi	r24, 0x80	; 128
 516:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_wr_command>
 51a:	08 95       	ret

0000051c <port_config>:
#include "lcd.h"
#include "ADC.h"

void port_config (void)
{
	lcd_port_config();
 51c:	0e 94 11 01 	call	0x222	; 0x222 <lcd_port_config>
	adc_pin_config();
 520:	0e 94 48 00 	call	0x90	; 0x90 <adc_pin_config>
 524:	08 95       	ret

00000526 <init_devices>:
}

void init_devices (void)
{
	cli(); //Clears the global interrupts
 526:	f8 94       	cli
	lcd_start();
 528:	0e 94 39 02 	call	0x472	; 0x472 <lcd_start>
	adc_config();
 52c:	0e 94 4b 00 	call	0x96	; 0x96 <adc_config>
	sei();   //Enables the global interrupts
 530:	78 94       	sei
 532:	08 95       	ret

00000534 <main>:
}

int main(void)
{
	port_config();
 534:	0e 94 8e 02 	call	0x51c	; 0x51c <port_config>
	init_devices();
 538:	0e 94 93 02 	call	0x526	; 0x526 <init_devices>
    int val;
	char channel0 = 0;
	
    while (1) 
    {
		val = update_adc_channel(channel0);
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	0e 94 5e 00 	call	0xbc	; 0xbc <update_adc_channel>
		lcd_print(1, 1 , val, 4);
 542:	24 e0       	ldi	r18, 0x04	; 4
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	ac 01       	movw	r20, r24
 548:	61 e0       	ldi	r22, 0x01	; 1
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <lcd_print>
 550:	2f ef       	ldi	r18, 0xFF	; 255
 552:	89 e6       	ldi	r24, 0x69	; 105
 554:	98 e1       	ldi	r25, 0x18	; 24
 556:	21 50       	subi	r18, 0x01	; 1
 558:	80 40       	sbci	r24, 0x00	; 0
 55a:	90 40       	sbci	r25, 0x00	; 0
 55c:	e1 f7       	brne	.-8      	; 0x556 <main+0x22>
 55e:	00 c0       	rjmp	.+0      	; 0x560 <main+0x2c>
 560:	00 00       	nop
 562:	ec cf       	rjmp	.-40     	; 0x53c <main+0x8>

00000564 <__umulhisi3>:
 564:	a2 9f       	mul	r26, r18
 566:	b0 01       	movw	r22, r0
 568:	b3 9f       	mul	r27, r19
 56a:	c0 01       	movw	r24, r0
 56c:	a3 9f       	mul	r26, r19
 56e:	70 0d       	add	r23, r0
 570:	81 1d       	adc	r24, r1
 572:	11 24       	eor	r1, r1
 574:	91 1d       	adc	r25, r1
 576:	b2 9f       	mul	r27, r18
 578:	70 0d       	add	r23, r0
 57a:	81 1d       	adc	r24, r1
 57c:	11 24       	eor	r1, r1
 57e:	91 1d       	adc	r25, r1
 580:	08 95       	ret

00000582 <_exit>:
 582:	f8 94       	cli

00000584 <__stop_program>:
 584:	ff cf       	rjmp	.-2      	; 0x584 <__stop_program>
