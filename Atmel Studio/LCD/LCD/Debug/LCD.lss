
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000002e0  00000374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010c  0080010c  00000380  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eff  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089f  00000000  00000000  0000138f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000065b  00000000  00000000  00001c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  0000228c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049f  00000000  00000000  000023d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000083a  00000000  00000000  0000286f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000030a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ee       	ldi	r30, 0xE0	; 224
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 63 01 	call	0x2c6	; 0x2c6 <main>
  9e:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Bit_Reverse>:
	}
	if(digits>5)
	{
		lcd_wr_char('E');
	}
}
  a6:	98 2f       	mov	r25, r24
  a8:	99 1f       	adc	r25, r25
  aa:	99 27       	eor	r25, r25
  ac:	99 1f       	adc	r25, r25
  ae:	86 fd       	sbrc	r24, 6
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <Bit_Reverse+0x10>
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <Bit_Reverse+0x12>
  b6:	22 e0       	ldi	r18, 0x02	; 2
  b8:	92 2b       	or	r25, r18
  ba:	85 fd       	sbrc	r24, 5
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <Bit_Reverse+0x1c>
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <Bit_Reverse+0x1e>
  c2:	24 e0       	ldi	r18, 0x04	; 4
  c4:	92 2b       	or	r25, r18
  c6:	84 fd       	sbrc	r24, 4
  c8:	02 c0       	rjmp	.+4      	; 0xce <Bit_Reverse+0x28>
  ca:	20 e0       	ldi	r18, 0x00	; 0
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <Bit_Reverse+0x2a>
  ce:	28 e0       	ldi	r18, 0x08	; 8
  d0:	92 2b       	or	r25, r18
  d2:	83 fd       	sbrc	r24, 3
  d4:	02 c0       	rjmp	.+4      	; 0xda <Bit_Reverse+0x34>
  d6:	20 e0       	ldi	r18, 0x00	; 0
  d8:	01 c0       	rjmp	.+2      	; 0xdc <Bit_Reverse+0x36>
  da:	20 e1       	ldi	r18, 0x10	; 16
  dc:	92 2b       	or	r25, r18
  de:	82 fd       	sbrc	r24, 2
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <Bit_Reverse+0x40>
  e2:	20 e0       	ldi	r18, 0x00	; 0
  e4:	01 c0       	rjmp	.+2      	; 0xe8 <Bit_Reverse+0x42>
  e6:	20 e2       	ldi	r18, 0x20	; 32
  e8:	92 2b       	or	r25, r18
  ea:	81 fd       	sbrc	r24, 1
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <Bit_Reverse+0x4c>
  ee:	20 e0       	ldi	r18, 0x00	; 0
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <Bit_Reverse+0x4e>
  f2:	20 e4       	ldi	r18, 0x40	; 64
  f4:	92 2b       	or	r25, r18
  f6:	80 fd       	sbrc	r24, 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <Bit_Reverse+0x58>
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	01 c0       	rjmp	.+2      	; 0x100 <Bit_Reverse+0x5a>
  fe:	80 e8       	ldi	r24, 0x80	; 128
 100:	89 2b       	or	r24, r25
 102:	08 95       	ret

00000104 <lcd_wr_command>:
 104:	cf 93       	push	r28
 106:	c8 2f       	mov	r28, r24
 108:	80 7f       	andi	r24, 0xF0	; 240
 10a:	0e 94 53 00 	call	0xa6	; 0xa6 <Bit_Reverse>
 10e:	88 0f       	add	r24, r24
 110:	88 0f       	add	r24, r24
 112:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 116:	8b b1       	in	r24, 0x0b	; 11
 118:	83 7c       	andi	r24, 0xC3	; 195
 11a:	8b b9       	out	0x0b, r24	; 11
 11c:	9b b1       	in	r25, 0x0b	; 11
 11e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 122:	89 2b       	or	r24, r25
 124:	8b b9       	out	0x0b, r24	; 11
 126:	5f 98       	cbi	0x0b, 7	; 11
 128:	5e 9a       	sbi	0x0b, 6	; 11
 12a:	8f e1       	ldi	r24, 0x1F	; 31
 12c:	9e e4       	ldi	r25, 0x4E	; 78
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <lcd_wr_command+0x2a>
 132:	00 c0       	rjmp	.+0      	; 0x134 <lcd_wr_command+0x30>
 134:	00 00       	nop
 136:	5e 98       	cbi	0x0b, 6	; 11
 138:	8c 2f       	mov	r24, r28
 13a:	82 95       	swap	r24
 13c:	80 7f       	andi	r24, 0xF0	; 240
 13e:	0e 94 53 00 	call	0xa6	; 0xa6 <Bit_Reverse>
 142:	9b b1       	in	r25, 0x0b	; 11
 144:	93 7c       	andi	r25, 0xC3	; 195
 146:	9b b9       	out	0x0b, r25	; 11
 148:	9b b1       	in	r25, 0x0b	; 11
 14a:	88 0f       	add	r24, r24
 14c:	88 0f       	add	r24, r24
 14e:	98 2b       	or	r25, r24
 150:	9b b9       	out	0x0b, r25	; 11
 152:	5f 98       	cbi	0x0b, 7	; 11
 154:	5e 9a       	sbi	0x0b, 6	; 11
 156:	8f e1       	ldi	r24, 0x1F	; 31
 158:	9e e4       	ldi	r25, 0x4E	; 78
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <lcd_wr_command+0x56>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <lcd_wr_command+0x5c>
 160:	00 00       	nop
 162:	5e 98       	cbi	0x0b, 6	; 11
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <lcd_port_config>:
 168:	8a b1       	in	r24, 0x0a	; 10
 16a:	8c 6f       	ori	r24, 0xFC	; 252
 16c:	8a b9       	out	0x0a, r24	; 10
 16e:	8b b1       	in	r24, 0x0b	; 11
 170:	84 70       	andi	r24, 0x04	; 4
 172:	8b b9       	out	0x0b, r24	; 11
 174:	08 95       	ret

00000176 <lcd_wr_char>:
 176:	cf 93       	push	r28
 178:	c8 2f       	mov	r28, r24
 17a:	80 7f       	andi	r24, 0xF0	; 240
 17c:	0e 94 53 00 	call	0xa6	; 0xa6 <Bit_Reverse>
 180:	9b b1       	in	r25, 0x0b	; 11
 182:	93 7c       	andi	r25, 0xC3	; 195
 184:	9b b9       	out	0x0b, r25	; 11
 186:	9b b1       	in	r25, 0x0b	; 11
 188:	88 0f       	add	r24, r24
 18a:	88 0f       	add	r24, r24
 18c:	98 2b       	or	r25, r24
 18e:	9b b9       	out	0x0b, r25	; 11
 190:	5f 9a       	sbi	0x0b, 7	; 11
 192:	5e 9a       	sbi	0x0b, 6	; 11
 194:	8f e1       	ldi	r24, 0x1F	; 31
 196:	9e e4       	ldi	r25, 0x4E	; 78
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <lcd_wr_char+0x22>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <lcd_wr_char+0x28>
 19e:	00 00       	nop
 1a0:	5e 98       	cbi	0x0b, 6	; 11
 1a2:	8c 2f       	mov	r24, r28
 1a4:	82 95       	swap	r24
 1a6:	80 7f       	andi	r24, 0xF0	; 240
 1a8:	0e 94 53 00 	call	0xa6	; 0xa6 <Bit_Reverse>
 1ac:	9b b1       	in	r25, 0x0b	; 11
 1ae:	93 7c       	andi	r25, 0xC3	; 195
 1b0:	9b b9       	out	0x0b, r25	; 11
 1b2:	9b b1       	in	r25, 0x0b	; 11
 1b4:	88 0f       	add	r24, r24
 1b6:	88 0f       	add	r24, r24
 1b8:	98 2b       	or	r25, r24
 1ba:	9b b9       	out	0x0b, r25	; 11
 1bc:	5f 9a       	sbi	0x0b, 7	; 11
 1be:	5e 9a       	sbi	0x0b, 6	; 11
 1c0:	8f e1       	ldi	r24, 0x1F	; 31
 1c2:	9e e4       	ldi	r25, 0x4E	; 78
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_wr_char+0x4e>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_wr_char+0x54>
 1ca:	00 00       	nop
 1cc:	5e 98       	cbi	0x0b, 6	; 11
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <lcd_cursor>:
 1d2:	81 30       	cpi	r24, 0x01	; 1
 1d4:	19 f0       	breq	.+6      	; 0x1dc <lcd_cursor+0xa>
 1d6:	82 30       	cpi	r24, 0x02	; 2
 1d8:	31 f0       	breq	.+12     	; 0x1e6 <lcd_cursor+0x14>
 1da:	08 95       	ret
 1dc:	8f e7       	ldi	r24, 0x7F	; 127
 1de:	86 0f       	add	r24, r22
 1e0:	0e 94 82 00 	call	0x104	; 0x104 <lcd_wr_command>
 1e4:	08 95       	ret
 1e6:	8f eb       	ldi	r24, 0xBF	; 191
 1e8:	86 0f       	add	r24, r22
 1ea:	0e 94 82 00 	call	0x104	; 0x104 <lcd_wr_command>
 1ee:	08 95       	ret

000001f0 <lcd_string2>:
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	ea 01       	movw	r28, r20
 1f6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_cursor>
 1fa:	88 81       	ld	r24, Y
 1fc:	88 23       	and	r24, r24
 1fe:	31 f0       	breq	.+12     	; 0x20c <lcd_string2+0x1c>
 200:	21 96       	adiw	r28, 0x01	; 1
 202:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_wr_char>
 206:	89 91       	ld	r24, Y+
 208:	81 11       	cpse	r24, r1
 20a:	fb cf       	rjmp	.-10     	; 0x202 <lcd_string2+0x12>
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <lcd_start>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 212:	8f e9       	ldi	r24, 0x9F	; 159
 214:	9f e0       	ldi	r25, 0x0F	; 15
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <lcd_start+0x4>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <lcd_start+0xa>
 21c:	00 00       	nop
*/
static void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 21e:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3 (0011 0000)
 220:	80 e3       	ldi	r24, 0x30	; 48
 222:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 224:	5e 9a       	sbi	0x0b, 6	; 11
 226:	ef e1       	ldi	r30, 0x1F	; 31
 228:	fe e4       	ldi	r31, 0x4E	; 78
 22a:	31 97       	sbiw	r30, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <lcd_start+0x18>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <lcd_start+0x1e>
 230:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 232:	5e 98       	cbi	0x0b, 6	; 11
 234:	ef e9       	ldi	r30, 0x9F	; 159
 236:	ff e0       	ldi	r31, 0x0F	; 15
 238:	31 97       	sbiw	r30, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <lcd_start+0x26>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <lcd_start+0x2c>
 23e:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 240:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
 242:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 244:	5e 9a       	sbi	0x0b, 6	; 11
 246:	ef e1       	ldi	r30, 0x1F	; 31
 248:	fe e4       	ldi	r31, 0x4E	; 78
 24a:	31 97       	sbiw	r30, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <lcd_start+0x38>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <lcd_start+0x3e>
 250:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 252:	5e 98       	cbi	0x0b, 6	; 11
 254:	ef e9       	ldi	r30, 0x9F	; 159
 256:	ff e0       	ldi	r31, 0x0F	; 15
 258:	31 97       	sbiw	r30, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <lcd_start+0x46>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <lcd_start+0x4c>
 25e:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 260:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
 262:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 264:	5e 9a       	sbi	0x0b, 6	; 11
 266:	8f e1       	ldi	r24, 0x1F	; 31
 268:	9e e4       	ldi	r25, 0x4E	; 78
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <lcd_start+0x58>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <lcd_start+0x5e>
 270:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 272:	5e 98       	cbi	0x0b, 6	; 11
 274:	ef e9       	ldi	r30, 0x9F	; 159
 276:	ff e0       	ldi	r31, 0x0F	; 15
 278:	31 97       	sbiw	r30, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <lcd_start+0x66>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <lcd_start+0x6c>
 27e:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 280:	5f 98       	cbi	0x0b, 7	; 11
	//lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
	lcd_port = 0x10;				
 282:	80 e1       	ldi	r24, 0x10	; 16
 284:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 286:	5e 9a       	sbi	0x0b, 6	; 11
 288:	8f e9       	ldi	r24, 0x9F	; 159
 28a:	9f e0       	ldi	r25, 0x0F	; 15
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <lcd_start+0x7a>
 290:	00 c0       	rjmp	.+0      	; 0x292 <lcd_start+0x80>
 292:	00 00       	nop
	_delay_ms(1);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 294:	5e 98       	cbi	0x0b, 6	; 11
 296:	ef e9       	ldi	r30, 0x9F	; 159
 298:	ff e0       	ldi	r31, 0x0F	; 15
 29a:	31 97       	sbiw	r30, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <lcd_start+0x88>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <lcd_start+0x8e>
 2a0:	00 00       	nop
*/
static void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
 2a2:	88 e2       	ldi	r24, 0x28	; 40
 2a4:	0e 94 82 00 	call	0x104	; 0x104 <lcd_wr_command>
	lcd_wr_command(0x01);			//Clear Display
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	0e 94 82 00 	call	0x104	; 0x104 <lcd_wr_command>
	//lcd_wr_command(0x06);			//Increment cursor (Shift to right)
	lcd_wr_command(0x0C);			//Display on, cursor off
 2ae:	8c e0       	ldi	r24, 0x0C	; 12
 2b0:	0e 94 82 00 	call	0x104	; 0x104 <lcd_wr_command>
	lcd_wr_command(0x80);			//Force cursor to begigning of first line
 2b4:	80 e8       	ldi	r24, 0x80	; 128
 2b6:	0e 94 82 00 	call	0x104	; 0x104 <lcd_wr_command>
 2ba:	08 95       	ret

000002bc <init_devices>:
	lcd_port_config();
}

void init_devices (void)
{
	cli(); //Clears the global interrupts
 2bc:	f8 94       	cli
	lcd_start();	
 2be:	0e 94 09 01 	call	0x212	; 0x212 <lcd_start>
	sei();   //Enables the global interrupts
 2c2:	78 94       	sei
 2c4:	08 95       	ret

000002c6 <main>:
#include <avr/interrupt.h>
#include "lcd.h"

void port_config (void)
{
	lcd_port_config();
 2c6:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_port_config>
}

int main(void)
{
	port_config();
	init_devices();
 2ca:	0e 94 5e 01 	call	0x2bc	; 0x2bc <init_devices>
	
	lcd_string2(1, 1, "Hello World");
 2ce:	40 e0       	ldi	r20, 0x00	; 0
 2d0:	51 e0       	ldi	r21, 0x01	; 1
 2d2:	61 e0       	ldi	r22, 0x01	; 1
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_string2>
 2da:	ff cf       	rjmp	.-2      	; 0x2da <main+0x14>

000002dc <_exit>:
 2dc:	f8 94       	cli

000002de <__stop_program>:
 2de:	ff cf       	rjmp	.-2      	; 0x2de <__stop_program>
