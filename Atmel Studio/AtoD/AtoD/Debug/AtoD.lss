
AtoD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000588  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000514  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000588  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011ed  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a8a  00000000  00000000  000018c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000929  00000000  00000000  0000234f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d8  00000000  00000000  00002c78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004da  00000000  00000000  00002e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a7c  00000000  00000000  0000332a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003da6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 61 02 	call	0x4c2	; 0x4c2 <main>
  88:	0c 94 88 02 	jmp	0x510	; 0x510 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <adc_pin_config>:
#include <util/delay.h>

//ADC pin configuration
void adc_pin_config (void)
{
	DDRC = 0x00; //set PORTF direction as input
  90:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x00; //set PORTF pins floating
  92:	18 b8       	out	0x08, r1	; 8
  94:	08 95       	ret

00000096 <adc_config>:
}

void adc_config(void)
{
	//ADCSRA=0x85; //1 --- 0 101 ADC Enable, ADC Interrupt disable, ADC Prescaler=32
	ADCSRA=0x87; //1 --- 0 111 ADC Enable, ADC Interrupt disable, ADC Prescaler=128
  96:	87 e8       	ldi	r24, 0x87	; 135
  98:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  9c:	08 95       	ret

0000009e <read_adc>:
}

unsigned int read_adc()
{
	ADCSRA|=0x40; //ADSC: ADC Start Conversion: In Single Conversion mode, write this bit to one to start each conversion.
  9e:	ea e7       	ldi	r30, 0x7A	; 122
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 64       	ori	r24, 0x40	; 64
  a6:	80 83       	st	Z, r24
	while((ADCSRA & 0x10)==0); //ADIF: ADC Interrupt Flag: This bit is set when an ADC conversion completes and the Data Registers are updated.
  a8:	80 81       	ld	r24, Z
  aa:	84 ff       	sbrs	r24, 4
  ac:	fd cf       	rjmp	.-6      	; 0xa8 <read_adc+0xa>
	ADCSRA|=0x10;	//ADIF is cleared by writing a logical one to the flag.
  ae:	ea e7       	ldi	r30, 0x7A	; 122
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	80 61       	ori	r24, 0x10	; 16
  b6:	80 83       	st	Z, r24
	
	unsigned char low = ADCL;
  b8:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	unsigned char high = ADCH;
  bc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	
	unsigned int val = 0x03 && high;
	val = val<<8;
	val = 256*high + low;
	
	return val;
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	98 2f       	mov	r25, r24
  c4:	88 27       	eor	r24, r24
}
  c6:	82 0f       	add	r24, r18
  c8:	91 1d       	adc	r25, r1
  ca:	08 95       	ret

000000cc <read_adc_channel>:

unsigned int read_adc_channel(char channel)
{
	if (channel>=0 && channel<=7)
  cc:	88 30       	cpi	r24, 0x08	; 8
  ce:	60 f4       	brcc	.+24     	; 0xe8 <read_adc_channel+0x1c>
	{
		ADMUX = 0x40 | channel;	//01 - - AVCC with external capacitor at AREF pin :--: 0000  ADC 0 (Channel)
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	8f e1       	ldi	r24, 0x1F	; 31
  d8:	9e e4       	ldi	r25, 0x4E	; 78
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <read_adc_channel+0xe>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <read_adc_channel+0x14>
  e0:	00 00       	nop
		//ADMUX = 0x00 | channel;	//00 - - AREF, Internal Vref turned off :--: 0000  ADC 0 (Channel)
		_delay_ms(5);
		return read_adc();
  e2:	0e 94 4f 00 	call	0x9e	; 0x9e <read_adc>
  e6:	08 95       	ret
	}
	else
	return 22;				//error
  e8:	86 e1       	ldi	r24, 0x16	; 22
  ea:	90 e0       	ldi	r25, 0x00	; 0
}
  ec:	08 95       	ret

000000ee <Bit_Reverse>:
	while(*str != '\0')
	{
		lcd_wr_char(*str);
		str++;
	}
}
  ee:	98 2f       	mov	r25, r24
  f0:	99 1f       	adc	r25, r25
  f2:	99 27       	eor	r25, r25
  f4:	99 1f       	adc	r25, r25
  f6:	86 fd       	sbrc	r24, 6
  f8:	02 c0       	rjmp	.+4      	; 0xfe <Bit_Reverse+0x10>
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	01 c0       	rjmp	.+2      	; 0x100 <Bit_Reverse+0x12>
  fe:	22 e0       	ldi	r18, 0x02	; 2
 100:	92 2b       	or	r25, r18
 102:	85 fd       	sbrc	r24, 5
 104:	02 c0       	rjmp	.+4      	; 0x10a <Bit_Reverse+0x1c>
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	01 c0       	rjmp	.+2      	; 0x10c <Bit_Reverse+0x1e>
 10a:	24 e0       	ldi	r18, 0x04	; 4
 10c:	92 2b       	or	r25, r18
 10e:	84 fd       	sbrc	r24, 4
 110:	02 c0       	rjmp	.+4      	; 0x116 <Bit_Reverse+0x28>
 112:	20 e0       	ldi	r18, 0x00	; 0
 114:	01 c0       	rjmp	.+2      	; 0x118 <Bit_Reverse+0x2a>
 116:	28 e0       	ldi	r18, 0x08	; 8
 118:	92 2b       	or	r25, r18
 11a:	83 fd       	sbrc	r24, 3
 11c:	02 c0       	rjmp	.+4      	; 0x122 <Bit_Reverse+0x34>
 11e:	20 e0       	ldi	r18, 0x00	; 0
 120:	01 c0       	rjmp	.+2      	; 0x124 <Bit_Reverse+0x36>
 122:	20 e1       	ldi	r18, 0x10	; 16
 124:	92 2b       	or	r25, r18
 126:	82 fd       	sbrc	r24, 2
 128:	02 c0       	rjmp	.+4      	; 0x12e <Bit_Reverse+0x40>
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	01 c0       	rjmp	.+2      	; 0x130 <Bit_Reverse+0x42>
 12e:	20 e2       	ldi	r18, 0x20	; 32
 130:	92 2b       	or	r25, r18
 132:	81 fd       	sbrc	r24, 1
 134:	02 c0       	rjmp	.+4      	; 0x13a <Bit_Reverse+0x4c>
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	01 c0       	rjmp	.+2      	; 0x13c <Bit_Reverse+0x4e>
 13a:	20 e4       	ldi	r18, 0x40	; 64
 13c:	92 2b       	or	r25, r18
 13e:	80 fd       	sbrc	r24, 0
 140:	02 c0       	rjmp	.+4      	; 0x146 <Bit_Reverse+0x58>
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	01 c0       	rjmp	.+2      	; 0x148 <Bit_Reverse+0x5a>
 146:	80 e8       	ldi	r24, 0x80	; 128
 148:	89 2b       	or	r24, r25
 14a:	08 95       	ret

0000014c <lcd_wr_command>:
 14c:	cf 93       	push	r28
 14e:	c8 2f       	mov	r28, r24
 150:	80 7f       	andi	r24, 0xF0	; 240
 152:	0e 94 77 00 	call	0xee	; 0xee <Bit_Reverse>
 156:	88 0f       	add	r24, r24
 158:	88 0f       	add	r24, r24
 15a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	83 7c       	andi	r24, 0xC3	; 195
 162:	8b b9       	out	0x0b, r24	; 11
 164:	9b b1       	in	r25, 0x0b	; 11
 166:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 16a:	89 2b       	or	r24, r25
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	5f 98       	cbi	0x0b, 7	; 11
 170:	5e 9a       	sbi	0x0b, 6	; 11
 172:	8f e1       	ldi	r24, 0x1F	; 31
 174:	9e e4       	ldi	r25, 0x4E	; 78
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <lcd_wr_command+0x2a>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <lcd_wr_command+0x30>
 17c:	00 00       	nop
 17e:	5e 98       	cbi	0x0b, 6	; 11
 180:	8c 2f       	mov	r24, r28
 182:	82 95       	swap	r24
 184:	80 7f       	andi	r24, 0xF0	; 240
 186:	0e 94 77 00 	call	0xee	; 0xee <Bit_Reverse>
 18a:	9b b1       	in	r25, 0x0b	; 11
 18c:	93 7c       	andi	r25, 0xC3	; 195
 18e:	9b b9       	out	0x0b, r25	; 11
 190:	9b b1       	in	r25, 0x0b	; 11
 192:	88 0f       	add	r24, r24
 194:	88 0f       	add	r24, r24
 196:	98 2b       	or	r25, r24
 198:	9b b9       	out	0x0b, r25	; 11
 19a:	5f 98       	cbi	0x0b, 7	; 11
 19c:	5e 9a       	sbi	0x0b, 6	; 11
 19e:	8f e1       	ldi	r24, 0x1F	; 31
 1a0:	9e e4       	ldi	r25, 0x4E	; 78
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_wr_command+0x56>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_wr_command+0x5c>
 1a8:	00 00       	nop
 1aa:	5e 98       	cbi	0x0b, 6	; 11
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <lcd_port_config>:
 1b0:	8a b1       	in	r24, 0x0a	; 10
 1b2:	8c 6f       	ori	r24, 0xFC	; 252
 1b4:	8a b9       	out	0x0a, r24	; 10
 1b6:	8b b1       	in	r24, 0x0b	; 11
 1b8:	84 70       	andi	r24, 0x04	; 4
 1ba:	8b b9       	out	0x0b, r24	; 11
 1bc:	08 95       	ret

000001be <lcd_wr_char>:
 1be:	cf 93       	push	r28
 1c0:	c8 2f       	mov	r28, r24
 1c2:	80 7f       	andi	r24, 0xF0	; 240
 1c4:	0e 94 77 00 	call	0xee	; 0xee <Bit_Reverse>
 1c8:	9b b1       	in	r25, 0x0b	; 11
 1ca:	93 7c       	andi	r25, 0xC3	; 195
 1cc:	9b b9       	out	0x0b, r25	; 11
 1ce:	9b b1       	in	r25, 0x0b	; 11
 1d0:	88 0f       	add	r24, r24
 1d2:	88 0f       	add	r24, r24
 1d4:	98 2b       	or	r25, r24
 1d6:	9b b9       	out	0x0b, r25	; 11
 1d8:	5f 9a       	sbi	0x0b, 7	; 11
 1da:	5e 9a       	sbi	0x0b, 6	; 11
 1dc:	8f e1       	ldi	r24, 0x1F	; 31
 1de:	9e e4       	ldi	r25, 0x4E	; 78
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd_wr_char+0x22>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <lcd_wr_char+0x28>
 1e6:	00 00       	nop
 1e8:	5e 98       	cbi	0x0b, 6	; 11
 1ea:	8c 2f       	mov	r24, r28
 1ec:	82 95       	swap	r24
 1ee:	80 7f       	andi	r24, 0xF0	; 240
 1f0:	0e 94 77 00 	call	0xee	; 0xee <Bit_Reverse>
 1f4:	9b b1       	in	r25, 0x0b	; 11
 1f6:	93 7c       	andi	r25, 0xC3	; 195
 1f8:	9b b9       	out	0x0b, r25	; 11
 1fa:	9b b1       	in	r25, 0x0b	; 11
 1fc:	88 0f       	add	r24, r24
 1fe:	88 0f       	add	r24, r24
 200:	98 2b       	or	r25, r24
 202:	9b b9       	out	0x0b, r25	; 11
 204:	5f 9a       	sbi	0x0b, 7	; 11
 206:	5e 9a       	sbi	0x0b, 6	; 11
 208:	8f e1       	ldi	r24, 0x1F	; 31
 20a:	9e e4       	ldi	r25, 0x4E	; 78
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <lcd_wr_char+0x4e>
 210:	00 c0       	rjmp	.+0      	; 0x212 <lcd_wr_char+0x54>
 212:	00 00       	nop
 214:	5e 98       	cbi	0x0b, 6	; 11
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <lcd_home>:
 21a:	80 e8       	ldi	r24, 0x80	; 128
 21c:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_wr_command>
 220:	08 95       	ret

00000222 <lcd_cursor>:
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	19 f0       	breq	.+6      	; 0x22c <lcd_cursor+0xa>
 226:	82 30       	cpi	r24, 0x02	; 2
 228:	31 f0       	breq	.+12     	; 0x236 <lcd_cursor+0x14>
 22a:	08 95       	ret
 22c:	8f e7       	ldi	r24, 0x7F	; 127
 22e:	86 0f       	add	r24, r22
 230:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_wr_command>
 234:	08 95       	ret
 236:	8f eb       	ldi	r24, 0xBF	; 191
 238:	86 0f       	add	r24, r22
 23a:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_wr_command>
 23e:	08 95       	ret

00000240 <lcd_print>:
* Logic: 
* Example Call: lcd_print(1,1,val,3)
*/
//0020
void lcd_print(char row, char coloumn, unsigned int value, int digits)
{
 240:	0f 93       	push	r16
 242:	1f 93       	push	r17
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	8a 01       	movw	r16, r20
 24a:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 24c:	88 23       	and	r24, r24
 24e:	11 f0       	breq	.+4      	; 0x254 <lcd_print+0x14>
 250:	61 11       	cpse	r22, r1
 252:	03 c0       	rjmp	.+6      	; 0x25a <lcd_print+0x1a>
	{
		lcd_home();
 254:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_home>
 258:	02 c0       	rjmp	.+4      	; 0x25e <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 25a:	0e 94 11 01 	call	0x222	; 0x222 <lcd_cursor>
	}
	
	if(digits==5 || flag==1)
 25e:	c5 30       	cpi	r28, 0x05	; 5
 260:	d1 05       	cpc	r29, r1
 262:	09 f0       	breq	.+2      	; 0x266 <lcd_print+0x26>
 264:	bf c0       	rjmp	.+382    	; 0x3e4 <lcd_print+0x1a4>
	{
		million=value/10000+48;
		lcd_wr_char(million);
 266:	98 01       	movw	r18, r16
 268:	32 95       	swap	r19
 26a:	22 95       	swap	r18
 26c:	2f 70       	andi	r18, 0x0F	; 15
 26e:	23 27       	eor	r18, r19
 270:	3f 70       	andi	r19, 0x0F	; 15
 272:	23 27       	eor	r18, r19
 274:	a7 e4       	ldi	r26, 0x47	; 71
 276:	b3 e0       	ldi	r27, 0x03	; 3
 278:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__umulhisi3>
 27c:	96 95       	lsr	r25
 27e:	87 95       	ror	r24
 280:	96 95       	lsr	r25
 282:	87 95       	ror	r24
 284:	96 95       	lsr	r25
 286:	87 95       	ror	r24
 288:	80 5d       	subi	r24, 0xD0	; 208
 28a:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_wr_char>
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
 28e:	98 01       	movw	r18, r16
 290:	36 95       	lsr	r19
 292:	27 95       	ror	r18
 294:	36 95       	lsr	r19
 296:	27 95       	ror	r18
 298:	36 95       	lsr	r19
 29a:	27 95       	ror	r18
 29c:	a5 ec       	ldi	r26, 0xC5	; 197
 29e:	b0 e2       	ldi	r27, 0x20	; 32
 2a0:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__umulhisi3>
 2a4:	ac 01       	movw	r20, r24
 2a6:	52 95       	swap	r21
 2a8:	42 95       	swap	r20
 2aa:	4f 70       	andi	r20, 0x0F	; 15
 2ac:	45 27       	eor	r20, r21
 2ae:	5f 70       	andi	r21, 0x0F	; 15
 2b0:	45 27       	eor	r20, r21
 2b2:	9a 01       	movw	r18, r20
 2b4:	ad ec       	ldi	r26, 0xCD	; 205
 2b6:	bc ec       	ldi	r27, 0xCC	; 204
 2b8:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__umulhisi3>
 2bc:	96 95       	lsr	r25
 2be:	87 95       	ror	r24
 2c0:	96 95       	lsr	r25
 2c2:	87 95       	ror	r24
 2c4:	96 95       	lsr	r25
 2c6:	87 95       	ror	r24
 2c8:	9c 01       	movw	r18, r24
 2ca:	22 0f       	add	r18, r18
 2cc:	33 1f       	adc	r19, r19
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	82 0f       	add	r24, r18
 2dc:	93 1f       	adc	r25, r19
 2de:	9a 01       	movw	r18, r20
 2e0:	28 1b       	sub	r18, r24
 2e2:	39 0b       	sbc	r19, r25
 2e4:	c9 01       	movw	r24, r18
 2e6:	80 5d       	subi	r24, 0xD0	; 208
 2e8:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_wr_char>
 2ec:	03 c0       	rjmp	.+6      	; 0x2f4 <lcd_print+0xb4>
		flag=1;
	}
	if(digits==3 || flag==1)
 2ee:	c3 30       	cpi	r28, 0x03	; 3
 2f0:	d1 05       	cpc	r29, r1
 2f2:	51 f5       	brne	.+84     	; 0x348 <lcd_print+0x108>
	{
		temp = value/100;
		hundred = temp%10 + 48;
		lcd_wr_char(hundred);
 2f4:	98 01       	movw	r18, r16
 2f6:	36 95       	lsr	r19
 2f8:	27 95       	ror	r18
 2fa:	36 95       	lsr	r19
 2fc:	27 95       	ror	r18
 2fe:	ab e7       	ldi	r26, 0x7B	; 123
 300:	b4 e1       	ldi	r27, 0x14	; 20
 302:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__umulhisi3>
 306:	ac 01       	movw	r20, r24
 308:	56 95       	lsr	r21
 30a:	47 95       	ror	r20
 30c:	9a 01       	movw	r18, r20
 30e:	ad ec       	ldi	r26, 0xCD	; 205
 310:	bc ec       	ldi	r27, 0xCC	; 204
 312:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__umulhisi3>
 316:	96 95       	lsr	r25
 318:	87 95       	ror	r24
 31a:	96 95       	lsr	r25
 31c:	87 95       	ror	r24
 31e:	96 95       	lsr	r25
 320:	87 95       	ror	r24
 322:	9c 01       	movw	r18, r24
 324:	22 0f       	add	r18, r18
 326:	33 1f       	adc	r19, r19
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	82 0f       	add	r24, r18
 336:	93 1f       	adc	r25, r19
 338:	9a 01       	movw	r18, r20
 33a:	28 1b       	sub	r18, r24
 33c:	39 0b       	sbc	r19, r25
 33e:	c9 01       	movw	r24, r18
 340:	80 5d       	subi	r24, 0xD0	; 208
 342:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_wr_char>
 346:	04 c0       	rjmp	.+8      	; 0x350 <lcd_print+0x110>
		flag=1;
	}
	if(digits==2 || flag==1)
 348:	c2 30       	cpi	r28, 0x02	; 2
 34a:	d1 05       	cpc	r29, r1
 34c:	09 f0       	breq	.+2      	; 0x350 <lcd_print+0x110>
 34e:	4f c0       	rjmp	.+158    	; 0x3ee <lcd_print+0x1ae>
	{
		temp = value/10;
		tens = temp%10 + 48;
		lcd_wr_char(tens);
 350:	98 01       	movw	r18, r16
 352:	ad ec       	ldi	r26, 0xCD	; 205
 354:	bc ec       	ldi	r27, 0xCC	; 204
 356:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__umulhisi3>
 35a:	ac 01       	movw	r20, r24
 35c:	56 95       	lsr	r21
 35e:	47 95       	ror	r20
 360:	56 95       	lsr	r21
 362:	47 95       	ror	r20
 364:	56 95       	lsr	r21
 366:	47 95       	ror	r20
 368:	9a 01       	movw	r18, r20
 36a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__umulhisi3>
 36e:	96 95       	lsr	r25
 370:	87 95       	ror	r24
 372:	96 95       	lsr	r25
 374:	87 95       	ror	r24
 376:	96 95       	lsr	r25
 378:	87 95       	ror	r24
 37a:	9c 01       	movw	r18, r24
 37c:	22 0f       	add	r18, r18
 37e:	33 1f       	adc	r19, r19
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	82 0f       	add	r24, r18
 38e:	93 1f       	adc	r25, r19
 390:	9a 01       	movw	r18, r20
 392:	28 1b       	sub	r18, r24
 394:	39 0b       	sbc	r19, r25
 396:	c9 01       	movw	r24, r18
 398:	80 5d       	subi	r24, 0xD0	; 208
 39a:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_wr_char>
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
		lcd_wr_char(unit);
 39e:	98 01       	movw	r18, r16
 3a0:	ad ec       	ldi	r26, 0xCD	; 205
 3a2:	bc ec       	ldi	r27, 0xCC	; 204
 3a4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__umulhisi3>
 3a8:	96 95       	lsr	r25
 3aa:	87 95       	ror	r24
 3ac:	96 95       	lsr	r25
 3ae:	87 95       	ror	r24
 3b0:	96 95       	lsr	r25
 3b2:	87 95       	ror	r24
 3b4:	9c 01       	movw	r18, r24
 3b6:	22 0f       	add	r18, r18
 3b8:	33 1f       	adc	r19, r19
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	82 0f       	add	r24, r18
 3c8:	93 1f       	adc	r25, r19
 3ca:	98 01       	movw	r18, r16
 3cc:	28 1b       	sub	r18, r24
 3ce:	39 0b       	sbc	r19, r25
 3d0:	c9 01       	movw	r24, r18
 3d2:	80 5d       	subi	r24, 0xD0	; 208
 3d4:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_wr_char>
	}
	if(digits>5)
 3d8:	26 97       	sbiw	r28, 0x06	; 6
 3da:	6c f0       	brlt	.+26     	; 0x3f6 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
 3dc:	85 e4       	ldi	r24, 0x45	; 69
 3de:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_wr_char>
	}
}
 3e2:	09 c0       	rjmp	.+18     	; 0x3f6 <lcd_print+0x1b6>
	{
		million=value/10000+48;
		lcd_wr_char(million);
		flag=1;
	}
	if(digits==4 || flag==1)
 3e4:	c4 30       	cpi	r28, 0x04	; 4
 3e6:	d1 05       	cpc	r29, r1
 3e8:	09 f0       	breq	.+2      	; 0x3ec <lcd_print+0x1ac>
 3ea:	81 cf       	rjmp	.-254    	; 0x2ee <lcd_print+0xae>
 3ec:	50 cf       	rjmp	.-352    	; 0x28e <lcd_print+0x4e>
		temp = value/10;
		tens = temp%10 + 48;
		lcd_wr_char(tens);
		flag=1;
	}
	if(digits==1 || flag==1)
 3ee:	c1 30       	cpi	r28, 0x01	; 1
 3f0:	d1 05       	cpc	r29, r1
 3f2:	91 f7       	brne	.-28     	; 0x3d8 <lcd_print+0x198>
 3f4:	d4 cf       	rjmp	.-88     	; 0x39e <lcd_print+0x15e>
	}
	if(digits>5)
	{
		lcd_wr_char('E');
	}
}
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	1f 91       	pop	r17
 3fc:	0f 91       	pop	r16
 3fe:	08 95       	ret

00000400 <lcd_start>:
 400:	8f e9       	ldi	r24, 0x9F	; 159
 402:	9f e0       	ldi	r25, 0x0F	; 15
 404:	01 97       	sbiw	r24, 0x01	; 1
 406:	f1 f7       	brne	.-4      	; 0x404 <lcd_start+0x4>
 408:	00 c0       	rjmp	.+0      	; 0x40a <lcd_start+0xa>
 40a:	00 00       	nop
*/
static void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 40c:	5f 98       	cbi	0x0b, 7	; 11
	//lcd_port = 0x30;				//Sending 3 (0011 0000)
	lcd_port = 0x30;				//Sending 3 (0011 0000)
 40e:	80 e3       	ldi	r24, 0x30	; 48
 410:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 412:	5e 9a       	sbi	0x0b, 6	; 11
 414:	ef e1       	ldi	r30, 0x1F	; 31
 416:	fe e4       	ldi	r31, 0x4E	; 78
 418:	31 97       	sbiw	r30, 0x01	; 1
 41a:	f1 f7       	brne	.-4      	; 0x418 <lcd_start+0x18>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <lcd_start+0x1e>
 41e:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 420:	5e 98       	cbi	0x0b, 6	; 11
 422:	ef e9       	ldi	r30, 0x9F	; 159
 424:	ff e0       	ldi	r31, 0x0F	; 15
 426:	31 97       	sbiw	r30, 0x01	; 1
 428:	f1 f7       	brne	.-4      	; 0x426 <lcd_start+0x26>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <lcd_start+0x2c>
 42c:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 42e:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
 430:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 432:	5e 9a       	sbi	0x0b, 6	; 11
 434:	ef e1       	ldi	r30, 0x1F	; 31
 436:	fe e4       	ldi	r31, 0x4E	; 78
 438:	31 97       	sbiw	r30, 0x01	; 1
 43a:	f1 f7       	brne	.-4      	; 0x438 <lcd_start+0x38>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <lcd_start+0x3e>
 43e:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 440:	5e 98       	cbi	0x0b, 6	; 11
 442:	ef e9       	ldi	r30, 0x9F	; 159
 444:	ff e0       	ldi	r31, 0x0F	; 15
 446:	31 97       	sbiw	r30, 0x01	; 1
 448:	f1 f7       	brne	.-4      	; 0x446 <lcd_start+0x46>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <lcd_start+0x4c>
 44c:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 44e:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
 450:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 452:	5e 9a       	sbi	0x0b, 6	; 11
 454:	8f e1       	ldi	r24, 0x1F	; 31
 456:	9e e4       	ldi	r25, 0x4E	; 78
 458:	01 97       	sbiw	r24, 0x01	; 1
 45a:	f1 f7       	brne	.-4      	; 0x458 <lcd_start+0x58>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <lcd_start+0x5e>
 45e:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 460:	5e 98       	cbi	0x0b, 6	; 11
 462:	ef e9       	ldi	r30, 0x9F	; 159
 464:	ff e0       	ldi	r31, 0x0F	; 15
 466:	31 97       	sbiw	r30, 0x01	; 1
 468:	f1 f7       	brne	.-4      	; 0x466 <lcd_start+0x66>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <lcd_start+0x6c>
 46c:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 46e:	5f 98       	cbi	0x0b, 7	; 11
	//lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
	lcd_port = 0x10;				
 470:	80 e1       	ldi	r24, 0x10	; 16
 472:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 474:	5e 9a       	sbi	0x0b, 6	; 11
 476:	8f e9       	ldi	r24, 0x9F	; 159
 478:	9f e0       	ldi	r25, 0x0F	; 15
 47a:	01 97       	sbiw	r24, 0x01	; 1
 47c:	f1 f7       	brne	.-4      	; 0x47a <lcd_start+0x7a>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <lcd_start+0x80>
 480:	00 00       	nop
	_delay_ms(1);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 482:	5e 98       	cbi	0x0b, 6	; 11
 484:	ef e9       	ldi	r30, 0x9F	; 159
 486:	ff e0       	ldi	r31, 0x0F	; 15
 488:	31 97       	sbiw	r30, 0x01	; 1
 48a:	f1 f7       	brne	.-4      	; 0x488 <lcd_start+0x88>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <lcd_start+0x8e>
 48e:	00 00       	nop
*/
static void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
 490:	88 e2       	ldi	r24, 0x28	; 40
 492:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_wr_command>
	lcd_wr_command(0x01);			//Clear Display
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_wr_command>
	//lcd_wr_command(0x06);			//Increment cursor (Shift to right)
	lcd_wr_command(0x0C);			//Display on, cursor off
 49c:	8c e0       	ldi	r24, 0x0C	; 12
 49e:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_wr_command>
	lcd_wr_command(0x80);			//Force cursor to begigning of first line
 4a2:	80 e8       	ldi	r24, 0x80	; 128
 4a4:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_wr_command>
 4a8:	08 95       	ret

000004aa <port_config>:
#include "lcd.h"
#include "ADC.h"

void port_config (void)
{
	lcd_port_config();
 4aa:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_port_config>
	adc_pin_config();
 4ae:	0e 94 48 00 	call	0x90	; 0x90 <adc_pin_config>
 4b2:	08 95       	ret

000004b4 <init_devices>:
}

void init_devices (void)
{
	cli(); //Clears the global interrupts
 4b4:	f8 94       	cli
	lcd_start();
 4b6:	0e 94 00 02 	call	0x400	; 0x400 <lcd_start>
	adc_config();
 4ba:	0e 94 4b 00 	call	0x96	; 0x96 <adc_config>
	sei();   //Enables the global interrupts
 4be:	78 94       	sei
 4c0:	08 95       	ret

000004c2 <main>:
}

int main(void)
{
	port_config();
 4c2:	0e 94 55 02 	call	0x4aa	; 0x4aa <port_config>
	init_devices();
 4c6:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <init_devices>
    int val;
	char channel0 = 0;
	
    while (1) 
    {
		val = read_adc_channel(channel0);
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	0e 94 66 00 	call	0xcc	; 0xcc <read_adc_channel>
		lcd_print(1, 1 , val, 4);
 4d0:	24 e0       	ldi	r18, 0x04	; 4
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	ac 01       	movw	r20, r24
 4d6:	61 e0       	ldi	r22, 0x01	; 1
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	0e 94 20 01 	call	0x240	; 0x240 <lcd_print>
 4de:	2f ef       	ldi	r18, 0xFF	; 255
 4e0:	89 e6       	ldi	r24, 0x69	; 105
 4e2:	98 e1       	ldi	r25, 0x18	; 24
 4e4:	21 50       	subi	r18, 0x01	; 1
 4e6:	80 40       	sbci	r24, 0x00	; 0
 4e8:	90 40       	sbci	r25, 0x00	; 0
 4ea:	e1 f7       	brne	.-8      	; 0x4e4 <main+0x22>
 4ec:	00 c0       	rjmp	.+0      	; 0x4ee <main+0x2c>
 4ee:	00 00       	nop
 4f0:	ec cf       	rjmp	.-40     	; 0x4ca <main+0x8>

000004f2 <__umulhisi3>:
 4f2:	a2 9f       	mul	r26, r18
 4f4:	b0 01       	movw	r22, r0
 4f6:	b3 9f       	mul	r27, r19
 4f8:	c0 01       	movw	r24, r0
 4fa:	a3 9f       	mul	r26, r19
 4fc:	70 0d       	add	r23, r0
 4fe:	81 1d       	adc	r24, r1
 500:	11 24       	eor	r1, r1
 502:	91 1d       	adc	r25, r1
 504:	b2 9f       	mul	r27, r18
 506:	70 0d       	add	r23, r0
 508:	81 1d       	adc	r24, r1
 50a:	11 24       	eor	r1, r1
 50c:	91 1d       	adc	r25, r1
 50e:	08 95       	ret

00000510 <_exit>:
 510:	f8 94       	cli

00000512 <__stop_program>:
 512:	ff cf       	rjmp	.-2      	; 0x512 <__stop_program>
