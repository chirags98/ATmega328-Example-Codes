
Rotary Encoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001aa  0000023e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800102  00800102  00000240  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000793  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000698  00000000  00000000  00000a93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000351  00000000  00000000  0000112b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  0000147c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a1  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000085  00000000  00000000  000018a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000192e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ea       	ldi	r30, 0xAA	; 170
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 95 00 	call	0x12a	; 0x12a <main>
  9e:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:
volatile int enable_counting = 1;		//to avoid bouncing

//If button is pressed (Falling edge)
//INT0 interrupt (PD2)
ISR(INT0_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	UDR0 = 'b';
  b2:	82 e6       	ldi	r24, 0x62	; 98
  b4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  b8:	8f 91       	pop	r24
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <__vector_2>:

//If a falling edge is detected 
//INT1 interrupt (PD3)
ISR(INT1_vect)
{
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	8f 93       	push	r24
  d0:	9f 93       	push	r25
	if(enable_counting == 1)	
  d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f9 f4       	brne	.+62     	; 0x11c <__vector_2+0x58>
	{
		enable_counting = 0;	//to avoid bouncing, don't count more until this count is registered
  de:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
  e2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		
		if(!bit_is_clear(PIND, PD7))
  e6:	4f 9b       	sbis	0x09, 7	; 9
  e8:	0d c0       	rjmp	.+26     	; 0x104 <__vector_2+0x40>
		{
			count++;
  ea:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <count>
  ee:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <count+0x1>
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <count+0x1>
  f8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <count>
			UDR0 = '+';
  fc:	8b e2       	ldi	r24, 0x2B	; 43
  fe:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 102:	0c c0       	rjmp	.+24     	; 0x11c <__vector_2+0x58>
		}
		else
		{
			count--;
 104:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <count>
 108:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <count+0x1>
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <count+0x1>
 112:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <count>
			UDR0 = '-';
 116:	8d e2       	ldi	r24, 0x2D	; 45
 118:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		}
	}
}
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <main>:

int main(void)
{
	cli();								//Disable all interrupts
 12a:	f8 94       	cli
	
	/* set PD2 and PD3 as input */
	DDRD &=~ (1 << 7);					//DT
 12c:	57 98       	cbi	0x0a, 7	; 10
	DDRD &=~ (1 << 3);					//CLK
 12e:	53 98       	cbi	0x0a, 3	; 10
	//PORTD |= (1 << 3)|(1 << 7);		/* PD2 and PD3 pull-up enabled   */
	
	EIMSK |= (1<<INT1);					// enable INT1
 130:	e9 9a       	sbi	0x1d, 1	; 29
	EIMSK |= (1<<INT0);					// enable INT0
 132:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1<<ISC11)|(1<<ISC10);		//INT1 - rising edge */
 134:	e9 e6       	ldi	r30, 0x69	; 105
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	8c 60       	ori	r24, 0x0C	; 12
 13c:	80 83       	st	Z, r24
	EICRA |= (1<<ISC01);				//INT1 - falling edge */
 13e:	80 81       	ld	r24, Z
 140:	82 60       	ori	r24, 0x02	; 2
 142:	80 83       	st	Z, r24

	uart0_init(); //Initialize UART0 for serial communication
 144:	0e 94 c3 00 	call	0x186	; 0x186 <uart0_init>
	
	sei();								//enable interrupts 
 148:	78 94       	sei
	while(1)
	{
		//If count change is detected. ie the encoder is turned.
		if(count != previous_count)
		{
			UDR0 = '.';
 14a:	e6 ec       	ldi	r30, 0xC6	; 198
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	6e e2       	ldi	r22, 0x2E	; 46
			
			enable_counting = 1;			
 150:	41 e0       	ldi	r20, 0x01	; 1
 152:	50 e0       	ldi	r21, 0x00	; 0
	sei();								//enable interrupts 
	
	while(1)
	{
		//If count change is detected. ie the encoder is turned.
		if(count != previous_count)
 154:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <count>
 158:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <count+0x1>
 15c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 160:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 164:	28 17       	cp	r18, r24
 166:	39 07       	cpc	r19, r25
 168:	a9 f3       	breq	.-22     	; 0x154 <main+0x2a>
		{
			UDR0 = '.';
 16a:	60 83       	st	Z, r22
			
			enable_counting = 1;			
 16c:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <__data_start+0x1>
 170:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__data_start>
			previous_count = count;
 174:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <count>
 178:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <count+0x1>
 17c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 180:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 184:	e7 cf       	rjmp	.-50     	; 0x154 <main+0x2a>

00000186 <uart0_init>:
// actual baud rate:9600 (error 0.2%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
	UCSR0B = 0x00; //disable while setting baud rate
 186:	e1 ec       	ldi	r30, 0xC1	; 193
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	10 82       	st	Z, r1
	UCSR0A = 0x00;
 18c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0C = 0x06;
 190:	86 e0       	ldi	r24, 0x06	; 6
 192:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = 0x67; //set baud rate lo //UBRR0 = 103
 196:	87 e6       	ldi	r24, 0x67	; 103
 198:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UBRR0H = 0x00; //set baud rate hi
 19c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UCSR0B = 0x98;
 1a0:	88 e9       	ldi	r24, 0x98	; 152
 1a2:	80 83       	st	Z, r24
 1a4:	08 95       	ret

000001a6 <_exit>:
 1a6:	f8 94       	cli

000001a8 <__stop_program>:
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <__stop_program>
