
MPU6050 David Gironi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00001e5a  00001eee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006b  00800104  00800104  00001ef2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ef2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00001f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001db3  00000000  00000000  000020ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c2e  00000000  00000000  00003e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fda  00000000  00000000  00004acd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005fc  00000000  00000000  00005aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000079c  00000000  00000000  000060a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020c2  00000000  00000000  00006840  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00008902  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 8a 08 	jmp	0x1114	; 0x1114 <__vector_16>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 56 0b 	jmp	0x16ac	; 0x16ac <__vector_18>
      4c:	0c 94 81 0b 	jmp	0x1702	; 0x1702 <__vector_19>
      50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      68:	03 6e       	ori	r16, 0xE3	; 227
      6a:	db 36       	cpi	r29, 0x6B	; 107
      6c:	3d 9a       	sbi	0x07, 5	; 7
      6e:	99 99       	sbic	0x13, 1	; 19
      70:	99 3d       	cpi	r25, 0xD9	; 217
      72:	ab aa       	std	Y+51, r10	; 0x33
      74:	aa 2a       	or	r10, r26
      76:	3e 00       	.word	0x003e	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 4a       	sbci	r16, 0xA8	; 168
      7e:	d7 3b       	cpi	r29, 0xB7	; 183
      80:	3b ce       	rjmp	.-906    	; 0xfffffcf8 <__eeprom_end+0xff7efcf8>
      82:	01 6e       	ori	r16, 0xE1	; 225
      84:	84 bc       	out	0x24, r8	; 36
      86:	bf fd       	.word	0xfdbf	; ????
      88:	c1 2f       	mov	r28, r17
      8a:	3d 6c       	ori	r19, 0xCD	; 205
      8c:	74 31       	cpi	r23, 0x14	; 20
      8e:	9a bd       	out	0x2a, r25	; 42
      90:	56 83       	std	Z+6, r21	; 0x06
      92:	3d da       	rcall	.-2950   	; 0xfffff50e <__eeprom_end+0xff7ef50e>
      94:	3d 00       	.word	0x003d	; ????
      96:	c7 7f       	andi	r28, 0xF7	; 247
      98:	11 be       	out	0x31, r1	; 49
      9a:	d9 e4       	ldi	r29, 0x49	; 73
      9c:	bb 4c       	sbci	r27, 0xCB	; 203
      9e:	3e 91       	ld	r19, -X
      a0:	6b aa       	std	Y+51, r6	; 0x33
      a2:	aa be       	out	0x3a, r10	; 58
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	3f 07       	cpc	r19, r31
      aa:	2c 7a       	andi	r18, 0xAC	; 172
      ac:	a5 ba       	out	0x15, r10	; 21
      ae:	6c c5       	rjmp	.+2776   	; 0xb88 <__stack+0x289>
      b0:	90 da       	rcall	.-2784   	; 0xfffff5d2 <__eeprom_end+0xff7ef5d2>
      b2:	3b 93       	.word	0x933b	; ????
      b4:	65 fc       	sbrc	r6, 5
      b6:	8b bc       	out	0x2b, r8	; 43
      b8:	53 f8       	bld	r5, 3
      ba:	10 fd       	sbrc	r17, 0
      bc:	3c 56       	subi	r19, 0x6C	; 108
      be:	92 83       	std	Z+2, r25	; 0x02
      c0:	4d bd       	out	0x2d, r20	; 45
      c2:	87 9d       	mul	r24, r7
      c4:	3a b6       	in	r3, 0x3a	; 58
      c6:	3d cb       	rjmp	.-2438   	; 0xfffff742 <__eeprom_end+0xff7ef742>
      c8:	c9 bf       	out	0x39, r28	; 57
      ca:	5b be       	out	0x3b, r5	; 59
      cc:	73 da       	rcall	.-2842   	; 0xfffff5b4 <__eeprom_end+0xff7ef5b4>
      ce:	0f c9       	rjmp	.-3554   	; 0xfffff2ee <__eeprom_end+0xff7ef2ee>
      d0:	3f 00       	.word	0x003f	; ????

000000d2 <__ctors_end>:
      d2:	11 24       	eor	r1, r1
      d4:	1f be       	out	0x3f, r1	; 63
      d6:	cf ef       	ldi	r28, 0xFF	; 255
      d8:	d8 e0       	ldi	r29, 0x08	; 8
      da:	de bf       	out	0x3e, r29	; 62
      dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
      de:	11 e0       	ldi	r17, 0x01	; 1
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	ea e5       	ldi	r30, 0x5A	; 90
      e6:	fe e1       	ldi	r31, 0x1E	; 30
      e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
      ea:	05 90       	lpm	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	a4 30       	cpi	r26, 0x04	; 4
      f0:	b1 07       	cpc	r27, r17
      f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
      f4:	21 e0       	ldi	r18, 0x01	; 1
      f6:	a4 e0       	ldi	r26, 0x04	; 4
      f8:	b1 e0       	ldi	r27, 0x01	; 1
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
      fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
      fe:	af 36       	cpi	r26, 0x6F	; 111
     100:	b2 07       	cpc	r27, r18
     102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
     104:	0e 94 88 00 	call	0x110	; 0x110 <main>
     108:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <main>:
#include "mpu6050/mpu6050.h"

#define UART_BAUD_RATE 57600
#include "uart/uart.h"

int main(void) {
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
     114:	cd b7       	in	r28, 0x3d	; 61
     116:	de b7       	in	r29, 0x3e	; 62
     118:	6c 97       	sbiw	r28, 0x1c	; 28
     11a:	0f b6       	in	r0, 0x3f	; 63
     11c:	f8 94       	cli
     11e:	de bf       	out	0x3e, r29	; 62
     120:	0f be       	out	0x3f, r0	; 63
     122:	cd bf       	out	0x3d, r28	; 61
    double gzds = 0;
	#endif

	#if MPU6050_GETATTITUDE == 1 || MPU6050_GETATTITUDE == 2
    long *ptr = 0;
    double qw = 1.0f;
     124:	80 e0       	ldi	r24, 0x00	; 0
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	a0 e8       	ldi	r26, 0x80	; 128
     12a:	bf e3       	ldi	r27, 0x3F	; 63
     12c:	89 83       	std	Y+1, r24	; 0x01
     12e:	9a 83       	std	Y+2, r25	; 0x02
     130:	ab 83       	std	Y+3, r26	; 0x03
     132:	bc 83       	std	Y+4, r27	; 0x04
	double qx = 0.0f;
     134:	1d 82       	std	Y+5, r1	; 0x05
     136:	1e 82       	std	Y+6, r1	; 0x06
     138:	1f 82       	std	Y+7, r1	; 0x07
     13a:	18 86       	std	Y+8, r1	; 0x08
	double qy = 0.0f;
     13c:	19 86       	std	Y+9, r1	; 0x09
     13e:	1a 86       	std	Y+10, r1	; 0x0a
     140:	1b 86       	std	Y+11, r1	; 0x0b
     142:	1c 86       	std	Y+12, r1	; 0x0c
	double qz = 0.0f;
     144:	1d 86       	std	Y+13, r1	; 0x0d
     146:	1e 86       	std	Y+14, r1	; 0x0e
     148:	1f 86       	std	Y+15, r1	; 0x0f
     14a:	18 8a       	std	Y+16, r1	; 0x10
	double roll = 0.0f;
     14c:	19 8a       	std	Y+17, r1	; 0x11
     14e:	1a 8a       	std	Y+18, r1	; 0x12
     150:	1b 8a       	std	Y+19, r1	; 0x13
     152:	1c 8a       	std	Y+20, r1	; 0x14
	double pitch = 0.0f;
     154:	1d 8a       	std	Y+21, r1	; 0x15
     156:	1e 8a       	std	Y+22, r1	; 0x16
     158:	1f 8a       	std	Y+23, r1	; 0x17
     15a:	18 8e       	std	Y+24, r1	; 0x18
	double yaw = 0.0f;
     15c:	19 8e       	std	Y+25, r1	; 0x19
     15e:	1a 8e       	std	Y+26, r1	; 0x1a
     160:	1b 8e       	std	Y+27, r1	; 0x1b
     162:	1c 8e       	std	Y+28, r1	; 0x1c
	#endif

    //init uart
	uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
     164:	80 e1       	ldi	r24, 0x10	; 16
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 ab 0b 	call	0x1756	; 0x1756 <uart_init>

	//init interrupt
	sei();
     16c:	78 94       	sei

	//init mpu6050
	mpu6050_init();
     16e:	0e 94 5f 02 	call	0x4be	; 0x4be <mpu6050_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     172:	2f ef       	ldi	r18, 0xFF	; 255
     174:	80 e7       	ldi	r24, 0x70	; 112
     176:	92 e0       	ldi	r25, 0x02	; 2
     178:	21 50       	subi	r18, 0x01	; 1
     17a:	80 40       	sbci	r24, 0x00	; 0
     17c:	90 40       	sbci	r25, 0x00	; 0
     17e:	e1 f7       	brne	.-8      	; 0x178 <main+0x68>
     180:	00 c0       	rjmp	.+0      	; 0x182 <main+0x72>
     182:	00 00       	nop
		mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
		mpu6050_getConvData(&axg, &ayg, &azg, &gxds, &gyds, &gzds);
		#endif

		#if MPU6050_GETATTITUDE == 1
		mpu6050_getQuaternion(&qw, &qx, &qy, &qz);
     184:	9e 01       	movw	r18, r28
     186:	23 5f       	subi	r18, 0xF3	; 243
     188:	3f 4f       	sbci	r19, 0xFF	; 255
     18a:	ae 01       	movw	r20, r28
     18c:	47 5f       	subi	r20, 0xF7	; 247
     18e:	5f 4f       	sbci	r21, 0xFF	; 255
     190:	be 01       	movw	r22, r28
     192:	6b 5f       	subi	r22, 0xFB	; 251
     194:	7f 4f       	sbci	r23, 0xFF	; 255
     196:	ce 01       	movw	r24, r28
     198:	01 96       	adiw	r24, 0x01	; 1
     19a:	0e 94 ae 08 	call	0x115c	; 0x115c <mpu6050_getQuaternion>
		mpu6050_getRollPitchYaw(&roll, &pitch, &yaw);
     19e:	ae 01       	movw	r20, r28
     1a0:	47 5e       	subi	r20, 0xE7	; 231
     1a2:	5f 4f       	sbci	r21, 0xFF	; 255
     1a4:	be 01       	movw	r22, r28
     1a6:	6b 5e       	subi	r22, 0xEB	; 235
     1a8:	7f 4f       	sbci	r23, 0xFF	; 255
     1aa:	ce 01       	movw	r24, r28
     1ac:	41 96       	adiw	r24, 0x11	; 17
     1ae:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <mpu6050_getRollPitchYaw>
     1b2:	8f e3       	ldi	r24, 0x3F	; 63
     1b4:	9c e9       	ldi	r25, 0x9C	; 156
     1b6:	01 97       	sbiw	r24, 0x01	; 1
     1b8:	f1 f7       	brne	.-4      	; 0x1b6 <main+0xa6>
     1ba:	00 c0       	rjmp	.+0      	; 0x1bc <main+0xac>
     1bc:	00 00       	nop

		#if MPU6050_GETATTITUDE == 1 || MPU6050_GETATTITUDE == 2

		//quaternion
		ptr = (long *)(&qw);
		uart_putc(*ptr);
     1be:	89 81       	ldd	r24, Y+1	; 0x01
     1c0:	0e 94 c4 0b 	call	0x1788	; 0x1788 <uart_putc>
		uart_putc(*ptr>>8);
     1c4:	8a 81       	ldd	r24, Y+2	; 0x02
     1c6:	0e 94 c4 0b 	call	0x1788	; 0x1788 <uart_putc>
		uart_putc(*ptr>>16);
     1ca:	8b 81       	ldd	r24, Y+3	; 0x03
     1cc:	0e 94 c4 0b 	call	0x1788	; 0x1788 <uart_putc>
		uart_putc(*ptr>>24);
     1d0:	8c 81       	ldd	r24, Y+4	; 0x04
     1d2:	0e 94 c4 0b 	call	0x1788	; 0x1788 <uart_putc>
		ptr = (long *)(&qx);
		uart_putc(*ptr);
     1d6:	8d 81       	ldd	r24, Y+5	; 0x05
     1d8:	0e 94 c4 0b 	call	0x1788	; 0x1788 <uart_putc>
		uart_putc(*ptr>>8);
     1dc:	8e 81       	ldd	r24, Y+6	; 0x06
     1de:	0e 94 c4 0b 	call	0x1788	; 0x1788 <uart_putc>
		uart_putc(*ptr>>16);
     1e2:	8f 81       	ldd	r24, Y+7	; 0x07
     1e4:	0e 94 c4 0b 	call	0x1788	; 0x1788 <uart_putc>
		uart_putc(*ptr>>24);
     1e8:	88 85       	ldd	r24, Y+8	; 0x08
     1ea:	0e 94 c4 0b 	call	0x1788	; 0x1788 <uart_putc>
		ptr = (long *)(&qy);
		uart_putc(*ptr);
     1ee:	89 85       	ldd	r24, Y+9	; 0x09
     1f0:	0e 94 c4 0b 	call	0x1788	; 0x1788 <uart_putc>
		uart_putc(*ptr>>8);
     1f4:	8a 85       	ldd	r24, Y+10	; 0x0a
     1f6:	0e 94 c4 0b 	call	0x1788	; 0x1788 <uart_putc>
		uart_putc(*ptr>>16);
     1fa:	8b 85       	ldd	r24, Y+11	; 0x0b
     1fc:	0e 94 c4 0b 	call	0x1788	; 0x1788 <uart_putc>
		uart_putc(*ptr>>24);
     200:	8c 85       	ldd	r24, Y+12	; 0x0c
     202:	0e 94 c4 0b 	call	0x1788	; 0x1788 <uart_putc>
		ptr = (long *)(&qz);
		uart_putc(*ptr);
     206:	8d 85       	ldd	r24, Y+13	; 0x0d
     208:	0e 94 c4 0b 	call	0x1788	; 0x1788 <uart_putc>
		uart_putc(*ptr>>8);
     20c:	8e 85       	ldd	r24, Y+14	; 0x0e
     20e:	0e 94 c4 0b 	call	0x1788	; 0x1788 <uart_putc>
		uart_putc(*ptr>>16);
     212:	8f 85       	ldd	r24, Y+15	; 0x0f
     214:	0e 94 c4 0b 	call	0x1788	; 0x1788 <uart_putc>
		uart_putc(*ptr>>24);
     218:	88 89       	ldd	r24, Y+16	; 0x10
     21a:	0e 94 c4 0b 	call	0x1788	; 0x1788 <uart_putc>

		//roll pitch yaw
		ptr = (long *)(&roll);
		uart_putc(*ptr);
     21e:	89 89       	ldd	r24, Y+17	; 0x11
     220:	0e 94 c4 0b 	call	0x1788	; 0x1788 <uart_putc>
		uart_putc(*ptr>>8);
     224:	8a 89       	ldd	r24, Y+18	; 0x12
     226:	0e 94 c4 0b 	call	0x1788	; 0x1788 <uart_putc>
		uart_putc(*ptr>>16);
     22a:	8b 89       	ldd	r24, Y+19	; 0x13
     22c:	0e 94 c4 0b 	call	0x1788	; 0x1788 <uart_putc>
		uart_putc(*ptr>>24);
     230:	8c 89       	ldd	r24, Y+20	; 0x14
     232:	0e 94 c4 0b 	call	0x1788	; 0x1788 <uart_putc>
		ptr = (long *)(&pitch);
		uart_putc(*ptr);
     236:	8d 89       	ldd	r24, Y+21	; 0x15
     238:	0e 94 c4 0b 	call	0x1788	; 0x1788 <uart_putc>
		uart_putc(*ptr>>8);
     23c:	8e 89       	ldd	r24, Y+22	; 0x16
     23e:	0e 94 c4 0b 	call	0x1788	; 0x1788 <uart_putc>
		uart_putc(*ptr>>16);
     242:	8f 89       	ldd	r24, Y+23	; 0x17
     244:	0e 94 c4 0b 	call	0x1788	; 0x1788 <uart_putc>
		uart_putc(*ptr>>24);
     248:	88 8d       	ldd	r24, Y+24	; 0x18
     24a:	0e 94 c4 0b 	call	0x1788	; 0x1788 <uart_putc>
		ptr = (long *)(&yaw);
		uart_putc(*ptr);
     24e:	89 8d       	ldd	r24, Y+25	; 0x19
     250:	0e 94 c4 0b 	call	0x1788	; 0x1788 <uart_putc>
		uart_putc(*ptr>>8);
     254:	8a 8d       	ldd	r24, Y+26	; 0x1a
     256:	0e 94 c4 0b 	call	0x1788	; 0x1788 <uart_putc>
		uart_putc(*ptr>>16);
     25a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     25c:	0e 94 c4 0b 	call	0x1788	; 0x1788 <uart_putc>
		uart_putc(*ptr>>24);
     260:	8c 8d       	ldd	r24, Y+28	; 0x1c
     262:	0e 94 c4 0b 	call	0x1788	; 0x1788 <uart_putc>

		uart_putc('\n');
     266:	8a e0       	ldi	r24, 0x0A	; 10
     268:	0e 94 c4 0b 	call	0x1788	; 0x1788 <uart_putc>
     26c:	8b cf       	rjmp	.-234    	; 0x184 <main+0x74>

0000026e <mpu6050_readBytes>:
    *azg = (double)(az)/MPU6050_AGAIN;
    *gxds = (double)(gx)/MPU6050_GGAIN;
	*gyds = (double)(gy)/MPU6050_GGAIN;
	*gzds = (double)(gz)/MPU6050_GGAIN;
	#endif
}
     26e:	af 92       	push	r10
     270:	bf 92       	push	r11
     272:	cf 92       	push	r12
     274:	df 92       	push	r13
     276:	ff 92       	push	r15
     278:	0f 93       	push	r16
     27a:	1f 93       	push	r17
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	66 23       	and	r22, r22
     282:	b9 f1       	breq	.+110    	; 0x2f2 <mpu6050_readBytes+0x84>
     284:	c5 2f       	mov	r28, r21
     286:	d4 2f       	mov	r29, r20
     288:	f6 2e       	mov	r15, r22
     28a:	18 2f       	mov	r17, r24
     28c:	80 ed       	ldi	r24, 0xD0	; 208
     28e:	0e 94 ab 0a 	call	0x1556	; 0x1556 <i2c_start>
     292:	81 2f       	mov	r24, r17
     294:	0e 94 01 0b 	call	0x1602	; 0x1602 <i2c_write>
     298:	85 e3       	ldi	r24, 0x35	; 53
     29a:	8a 95       	dec	r24
     29c:	f1 f7       	brne	.-4      	; 0x29a <mpu6050_readBytes+0x2c>
     29e:	00 00       	nop
     2a0:	81 ed       	ldi	r24, 0xD1	; 209
     2a2:	0e 94 ab 0a 	call	0x1556	; 0x1556 <i2c_start>
     2a6:	0d 2f       	mov	r16, r29
     2a8:	1c 2f       	mov	r17, r28
     2aa:	cc 24       	eor	r12, r12
     2ac:	ca 94       	dec	r12
     2ae:	cf 0c       	add	r12, r15
     2b0:	d1 2c       	mov	r13, r1
     2b2:	ef ef       	ldi	r30, 0xFF	; 255
     2b4:	ce 1a       	sub	r12, r30
     2b6:	de 0a       	sbc	r13, r30
     2b8:	c0 e0       	ldi	r28, 0x00	; 0
     2ba:	d0 e0       	ldi	r29, 0x00	; 0
     2bc:	af 2c       	mov	r10, r15
     2be:	b1 2c       	mov	r11, r1
     2c0:	f1 e0       	ldi	r31, 0x01	; 1
     2c2:	af 1a       	sub	r10, r31
     2c4:	b1 08       	sbc	r11, r1
     2c6:	ac 16       	cp	r10, r28
     2c8:	bd 06       	cpc	r11, r29
     2ca:	29 f4       	brne	.+10     	; 0x2d6 <mpu6050_readBytes+0x68>
     2cc:	0e 94 3c 0b 	call	0x1678	; 0x1678 <i2c_readNak>
     2d0:	f8 01       	movw	r30, r16
     2d2:	80 83       	st	Z, r24
     2d4:	04 c0       	rjmp	.+8      	; 0x2de <mpu6050_readBytes+0x70>
     2d6:	0e 94 22 0b 	call	0x1644	; 0x1644 <i2c_readAck>
     2da:	f8 01       	movw	r30, r16
     2dc:	80 83       	st	Z, r24
     2de:	21 96       	adiw	r28, 0x01	; 1
     2e0:	0f 5f       	subi	r16, 0xFF	; 255
     2e2:	1f 4f       	sbci	r17, 0xFF	; 255
     2e4:	cc 15       	cp	r28, r12
     2e6:	dd 05       	cpc	r29, r13
     2e8:	71 f7       	brne	.-36     	; 0x2c6 <mpu6050_readBytes+0x58>
     2ea:	cf 2d       	mov	r28, r15
     2ec:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <i2c_stop>
     2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <mpu6050_readBytes+0x86>
     2f2:	c0 e0       	ldi	r28, 0x00	; 0
     2f4:	8c 2f       	mov	r24, r28
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	1f 91       	pop	r17
     2fc:	0f 91       	pop	r16
     2fe:	ff 90       	pop	r15
     300:	df 90       	pop	r13
     302:	cf 90       	pop	r12
     304:	bf 90       	pop	r11
     306:	af 90       	pop	r10
     308:	08 95       	ret

0000030a <mpu6050_readByte>:
     30a:	ab 01       	movw	r20, r22
     30c:	61 e0       	ldi	r22, 0x01	; 1
     30e:	0e 94 37 01 	call	0x26e	; 0x26e <mpu6050_readBytes>
     312:	08 95       	ret

00000314 <mpu6050_writeBytes>:
     314:	ef 92       	push	r14
     316:	ff 92       	push	r15
     318:	0f 93       	push	r16
     31a:	1f 93       	push	r17
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	66 23       	and	r22, r22
     322:	d1 f0       	breq	.+52     	; 0x358 <mpu6050_writeBytes+0x44>
     324:	7a 01       	movw	r14, r20
     326:	16 2f       	mov	r17, r22
     328:	c8 2f       	mov	r28, r24
     32a:	80 ed       	ldi	r24, 0xD0	; 208
     32c:	0e 94 ab 0a 	call	0x1556	; 0x1556 <i2c_start>
     330:	8c 2f       	mov	r24, r28
     332:	0e 94 01 0b 	call	0x1602	; 0x1602 <i2c_write>
     336:	e7 01       	movw	r28, r14
     338:	6f ef       	ldi	r22, 0xFF	; 255
     33a:	61 0f       	add	r22, r17
     33c:	06 2f       	mov	r16, r22
     33e:	10 e0       	ldi	r17, 0x00	; 0
     340:	0f 5f       	subi	r16, 0xFF	; 255
     342:	1f 4f       	sbci	r17, 0xFF	; 255
     344:	0e 0d       	add	r16, r14
     346:	1f 1d       	adc	r17, r15
     348:	89 91       	ld	r24, Y+
     34a:	0e 94 01 0b 	call	0x1602	; 0x1602 <i2c_write>
     34e:	c0 17       	cp	r28, r16
     350:	d1 07       	cpc	r29, r17
     352:	d1 f7       	brne	.-12     	; 0x348 <mpu6050_writeBytes+0x34>
     354:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <i2c_stop>
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	1f 91       	pop	r17
     35e:	0f 91       	pop	r16
     360:	ff 90       	pop	r15
     362:	ef 90       	pop	r14
     364:	08 95       	ret

00000366 <mpu6050_writeByte>:
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	1f 92       	push	r1
     36c:	cd b7       	in	r28, 0x3d	; 61
     36e:	de b7       	in	r29, 0x3e	; 62
     370:	69 83       	std	Y+1, r22	; 0x01
     372:	ae 01       	movw	r20, r28
     374:	4f 5f       	subi	r20, 0xFF	; 255
     376:	5f 4f       	sbci	r21, 0xFF	; 255
     378:	61 e0       	ldi	r22, 0x01	; 1
     37a:	0e 94 8a 01 	call	0x314	; 0x314 <mpu6050_writeBytes>
     37e:	0f 90       	pop	r0
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	08 95       	ret

00000386 <mpu6050_readBit>:
     386:	ff 92       	push	r15
     388:	0f 93       	push	r16
     38a:	1f 93       	push	r17
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	1f 92       	push	r1
     392:	cd b7       	in	r28, 0x3d	; 61
     394:	de b7       	in	r29, 0x3e	; 62
     396:	f6 2e       	mov	r15, r22
     398:	8a 01       	movw	r16, r20
     39a:	be 01       	movw	r22, r28
     39c:	6f 5f       	subi	r22, 0xFF	; 255
     39e:	7f 4f       	sbci	r23, 0xFF	; 255
     3a0:	0e 94 85 01 	call	0x30a	; 0x30a <mpu6050_readByte>
     3a4:	21 e0       	ldi	r18, 0x01	; 1
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	02 c0       	rjmp	.+4      	; 0x3ae <mpu6050_readBit+0x28>
     3aa:	22 0f       	add	r18, r18
     3ac:	33 1f       	adc	r19, r19
     3ae:	fa 94       	dec	r15
     3b0:	e2 f7       	brpl	.-8      	; 0x3aa <mpu6050_readBit+0x24>
     3b2:	99 81       	ldd	r25, Y+1	; 0x01
     3b4:	29 23       	and	r18, r25
     3b6:	f8 01       	movw	r30, r16
     3b8:	20 83       	st	Z, r18
     3ba:	0f 90       	pop	r0
     3bc:	df 91       	pop	r29
     3be:	cf 91       	pop	r28
     3c0:	1f 91       	pop	r17
     3c2:	0f 91       	pop	r16
     3c4:	ff 90       	pop	r15
     3c6:	08 95       	ret

000003c8 <mpu6050_writeBits>:
     3c8:	ef 92       	push	r14
     3ca:	ff 92       	push	r15
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	1f 92       	push	r1
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62
     3da:	44 23       	and	r20, r20
     3dc:	89 f1       	breq	.+98     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     3de:	f2 2e       	mov	r15, r18
     3e0:	14 2f       	mov	r17, r20
     3e2:	06 2f       	mov	r16, r22
     3e4:	e8 2e       	mov	r14, r24
     3e6:	19 82       	std	Y+1, r1	; 0x01
     3e8:	be 01       	movw	r22, r28
     3ea:	6f 5f       	subi	r22, 0xFF	; 255
     3ec:	7f 4f       	sbci	r23, 0xFF	; 255
     3ee:	0e 94 85 01 	call	0x30a	; 0x30a <mpu6050_readByte>
     3f2:	88 23       	and	r24, r24
     3f4:	29 f1       	breq	.+74     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     3f6:	40 2f       	mov	r20, r16
     3f8:	50 e0       	ldi	r21, 0x00	; 0
     3fa:	41 1b       	sub	r20, r17
     3fc:	51 09       	sbc	r21, r1
     3fe:	4f 5f       	subi	r20, 0xFF	; 255
     400:	5f 4f       	sbci	r21, 0xFF	; 255
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	02 c0       	rjmp	.+4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     408:	88 0f       	add	r24, r24
     40a:	99 1f       	adc	r25, r25
     40c:	1a 95       	dec	r17
     40e:	e2 f7       	brpl	.-8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     410:	01 97       	sbiw	r24, 0x01	; 1
     412:	04 2e       	mov	r0, r20
     414:	02 c0       	rjmp	.+4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     416:	88 0f       	add	r24, r24
     418:	99 1f       	adc	r25, r25
     41a:	0a 94       	dec	r0
     41c:	e2 f7       	brpl	.-8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     41e:	2f 2d       	mov	r18, r15
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	02 c0       	rjmp	.+4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     424:	22 0f       	add	r18, r18
     426:	33 1f       	adc	r19, r19
     428:	4a 95       	dec	r20
     42a:	e2 f7       	brpl	.-8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     42c:	68 2f       	mov	r22, r24
     42e:	60 95       	com	r22
     430:	99 81       	ldd	r25, Y+1	; 0x01
     432:	69 23       	and	r22, r25
     434:	82 23       	and	r24, r18
     436:	68 2b       	or	r22, r24
     438:	69 83       	std	Y+1, r22	; 0x01
     43a:	8e 2d       	mov	r24, r14
     43c:	0e 94 b3 01 	call	0x366	; 0x366 <mpu6050_writeByte>
     440:	0f 90       	pop	r0
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	1f 91       	pop	r17
     448:	0f 91       	pop	r16
     44a:	ff 90       	pop	r15
     44c:	ef 90       	pop	r14
     44e:	08 95       	ret

00000450 <mpu6050_writeBit>:
     450:	ff 92       	push	r15
     452:	0f 93       	push	r16
     454:	1f 93       	push	r17
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	1f 92       	push	r1
     45c:	cd b7       	in	r28, 0x3d	; 61
     45e:	de b7       	in	r29, 0x3e	; 62
     460:	18 2f       	mov	r17, r24
     462:	06 2f       	mov	r16, r22
     464:	f4 2e       	mov	r15, r20
     466:	be 01       	movw	r22, r28
     468:	6f 5f       	subi	r22, 0xFF	; 255
     46a:	7f 4f       	sbci	r23, 0xFF	; 255
     46c:	0e 94 85 01 	call	0x30a	; 0x30a <mpu6050_readByte>
     470:	ff 20       	and	r15, r15
     472:	51 f0       	breq	.+20     	; 0x488 <mpu6050_writeBit+0x38>
     474:	61 e0       	ldi	r22, 0x01	; 1
     476:	70 e0       	ldi	r23, 0x00	; 0
     478:	02 c0       	rjmp	.+4      	; 0x47e <mpu6050_writeBit+0x2e>
     47a:	66 0f       	add	r22, r22
     47c:	77 1f       	adc	r23, r23
     47e:	0a 95       	dec	r16
     480:	e2 f7       	brpl	.-8      	; 0x47a <mpu6050_writeBit+0x2a>
     482:	89 81       	ldd	r24, Y+1	; 0x01
     484:	68 2b       	or	r22, r24
     486:	0a c0       	rjmp	.+20     	; 0x49c <mpu6050_writeBit+0x4c>
     488:	61 e0       	ldi	r22, 0x01	; 1
     48a:	70 e0       	ldi	r23, 0x00	; 0
     48c:	02 c0       	rjmp	.+4      	; 0x492 <mpu6050_writeBit+0x42>
     48e:	66 0f       	add	r22, r22
     490:	77 1f       	adc	r23, r23
     492:	0a 95       	dec	r16
     494:	e2 f7       	brpl	.-8      	; 0x48e <mpu6050_writeBit+0x3e>
     496:	60 95       	com	r22
     498:	89 81       	ldd	r24, Y+1	; 0x01
     49a:	68 23       	and	r22, r24
     49c:	69 83       	std	Y+1, r22	; 0x01
     49e:	81 2f       	mov	r24, r17
     4a0:	0e 94 b3 01 	call	0x366	; 0x366 <mpu6050_writeByte>
     4a4:	0f 90       	pop	r0
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	1f 91       	pop	r17
     4ac:	0f 91       	pop	r16
     4ae:	ff 90       	pop	r15
     4b0:	08 95       	ret

000004b2 <mpu6050_setSleepDisabled>:
     4b2:	40 e0       	ldi	r20, 0x00	; 0
     4b4:	66 e0       	ldi	r22, 0x06	; 6
     4b6:	8b e6       	ldi	r24, 0x6B	; 107
     4b8:	0e 94 28 02 	call	0x450	; 0x450 <mpu6050_writeBit>
     4bc:	08 95       	ret

000004be <mpu6050_init>:
     4be:	0e 94 a5 0a 	call	0x154a	; 0x154a <i2c_init>
     4c2:	25 e3       	ldi	r18, 0x35	; 53
     4c4:	2a 95       	dec	r18
     4c6:	f1 f7       	brne	.-4      	; 0x4c4 <mpu6050_init+0x6>
     4c8:	00 00       	nop
     4ca:	8f ef       	ldi	r24, 0xFF	; 255
     4cc:	91 ee       	ldi	r25, 0xE1	; 225
     4ce:	24 e0       	ldi	r18, 0x04	; 4
     4d0:	81 50       	subi	r24, 0x01	; 1
     4d2:	90 40       	sbci	r25, 0x00	; 0
     4d4:	20 40       	sbci	r18, 0x00	; 0
     4d6:	e1 f7       	brne	.-8      	; 0x4d0 <mpu6050_init+0x12>
     4d8:	00 c0       	rjmp	.+0      	; 0x4da <mpu6050_init+0x1c>
     4da:	00 00       	nop
     4dc:	0e 94 59 02 	call	0x4b2	; 0x4b2 <mpu6050_setSleepDisabled>
     4e0:	8f e3       	ldi	r24, 0x3F	; 63
     4e2:	9c e9       	ldi	r25, 0x9C	; 156
     4e4:	01 97       	sbiw	r24, 0x01	; 1
     4e6:	f1 f7       	brne	.-4      	; 0x4e4 <mpu6050_init+0x26>
     4e8:	00 c0       	rjmp	.+0      	; 0x4ea <mpu6050_init+0x2c>
     4ea:	00 00       	nop
     4ec:	21 e0       	ldi	r18, 0x01	; 1
     4ee:	43 e0       	ldi	r20, 0x03	; 3
     4f0:	62 e0       	ldi	r22, 0x02	; 2
     4f2:	8b e6       	ldi	r24, 0x6B	; 107
     4f4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <mpu6050_writeBits>
     4f8:	23 e0       	ldi	r18, 0x03	; 3
     4fa:	43 e0       	ldi	r20, 0x03	; 3
     4fc:	62 e0       	ldi	r22, 0x02	; 2
     4fe:	8a e1       	ldi	r24, 0x1A	; 26
     500:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <mpu6050_writeBits>
     504:	64 e0       	ldi	r22, 0x04	; 4
     506:	89 e1       	ldi	r24, 0x19	; 25
     508:	0e 94 b3 01 	call	0x366	; 0x366 <mpu6050_writeByte>
     50c:	23 e0       	ldi	r18, 0x03	; 3
     50e:	42 e0       	ldi	r20, 0x02	; 2
     510:	64 e0       	ldi	r22, 0x04	; 4
     512:	8b e1       	ldi	r24, 0x1B	; 27
     514:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <mpu6050_writeBits>
     518:	20 e0       	ldi	r18, 0x00	; 0
     51a:	42 e0       	ldi	r20, 0x02	; 2
     51c:	64 e0       	ldi	r22, 0x04	; 4
     51e:	8c e1       	ldi	r24, 0x1C	; 28
     520:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <mpu6050_writeBits>
     524:	85 b5       	in	r24, 0x25	; 37
     526:	85 60       	ori	r24, 0x05	; 5
     528:	85 bd       	out	0x25, r24	; 37
     52a:	ee e6       	ldi	r30, 0x6E	; 110
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	80 81       	ld	r24, Z
     530:	81 60       	ori	r24, 0x01	; 1
     532:	80 83       	st	Z, r24
     534:	08 95       	ret

00000536 <mpu6050_mahonyUpdate>:
volatile float q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;
volatile float integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;
/*
 * Mahony update function (for 6DOF)
 */
void mpu6050_mahonyUpdate(float gx, float gy, float gz, float ax, float ay, float az) {
     536:	4f 92       	push	r4
     538:	5f 92       	push	r5
     53a:	6f 92       	push	r6
     53c:	7f 92       	push	r7
     53e:	8f 92       	push	r8
     540:	9f 92       	push	r9
     542:	af 92       	push	r10
     544:	bf 92       	push	r11
     546:	cf 92       	push	r12
     548:	df 92       	push	r13
     54a:	ef 92       	push	r14
     54c:	ff 92       	push	r15
     54e:	0f 93       	push	r16
     550:	1f 93       	push	r17
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	cd b7       	in	r28, 0x3d	; 61
     558:	de b7       	in	r29, 0x3e	; 62
     55a:	a4 97       	sbiw	r28, 0x24	; 36
     55c:	0f b6       	in	r0, 0x3f	; 63
     55e:	f8 94       	cli
     560:	de bf       	out	0x3e, r29	; 62
     562:	0f be       	out	0x3f, r0	; 63
     564:	cd bf       	out	0x3d, r28	; 61
     566:	6d 87       	std	Y+13, r22	; 0x0d
     568:	7e 87       	std	Y+14, r23	; 0x0e
     56a:	8f 87       	std	Y+15, r24	; 0x0f
     56c:	98 8b       	std	Y+16, r25	; 0x10
     56e:	29 8b       	std	Y+17, r18	; 0x11
     570:	3a 8b       	std	Y+18, r19	; 0x12
     572:	4b 8b       	std	Y+19, r20	; 0x13
     574:	5c 8b       	std	Y+20, r21	; 0x14
     576:	ed 8a       	std	Y+21, r14	; 0x15
     578:	fe 8a       	std	Y+22, r15	; 0x16
     57a:	0f 8b       	std	Y+23, r16	; 0x17
     57c:	18 8f       	std	Y+24, r17	; 0x18
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
     57e:	20 e0       	ldi	r18, 0x00	; 0
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	a9 01       	movw	r20, r18
     584:	c6 01       	movw	r24, r12
     586:	b5 01       	movw	r22, r10
     588:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__cmpsf2>
     58c:	81 11       	cpse	r24, r1
     58e:	17 c0       	rjmp	.+46     	; 0x5be <mpu6050_mahonyUpdate+0x88>
     590:	20 e0       	ldi	r18, 0x00	; 0
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	a9 01       	movw	r20, r18
     596:	6f a9       	ldd	r22, Y+55	; 0x37
     598:	78 ad       	ldd	r23, Y+56	; 0x38
     59a:	89 ad       	ldd	r24, Y+57	; 0x39
     59c:	9a ad       	ldd	r25, Y+58	; 0x3a
     59e:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__cmpsf2>
     5a2:	81 11       	cpse	r24, r1
     5a4:	0c c0       	rjmp	.+24     	; 0x5be <mpu6050_mahonyUpdate+0x88>
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	a9 01       	movw	r20, r18
     5ac:	6b ad       	ldd	r22, Y+59	; 0x3b
     5ae:	7c ad       	ldd	r23, Y+60	; 0x3c
     5b0:	8d ad       	ldd	r24, Y+61	; 0x3d
     5b2:	9e ad       	ldd	r25, Y+62	; 0x3e
     5b4:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__cmpsf2>
     5b8:	88 23       	and	r24, r24
     5ba:	09 f4       	brne	.+2      	; 0x5be <mpu6050_mahonyUpdate+0x88>
     5bc:	1a c2       	rjmp	.+1076   	; 0x9f2 <__stack+0xf3>

		// Normalise accelerometer measurement
		norm = sqrt(ax * ax + ay * ay + az * az);
     5be:	a6 01       	movw	r20, r12
     5c0:	95 01       	movw	r18, r10
     5c2:	c6 01       	movw	r24, r12
     5c4:	b5 01       	movw	r22, r10
     5c6:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     5ca:	2b 01       	movw	r4, r22
     5cc:	3c 01       	movw	r6, r24
     5ce:	2f a9       	ldd	r18, Y+55	; 0x37
     5d0:	38 ad       	ldd	r19, Y+56	; 0x38
     5d2:	49 ad       	ldd	r20, Y+57	; 0x39
     5d4:	5a ad       	ldd	r21, Y+58	; 0x3a
     5d6:	ca 01       	movw	r24, r20
     5d8:	b9 01       	movw	r22, r18
     5da:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     5de:	69 83       	std	Y+1, r22	; 0x01
     5e0:	7a 83       	std	Y+2, r23	; 0x02
     5e2:	8b 83       	std	Y+3, r24	; 0x03
     5e4:	9c 83       	std	Y+4, r25	; 0x04
     5e6:	9b 01       	movw	r18, r22
     5e8:	ac 01       	movw	r20, r24
     5ea:	c3 01       	movw	r24, r6
     5ec:	b2 01       	movw	r22, r4
     5ee:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
     5f2:	6d 8f       	std	Y+29, r22	; 0x1d
     5f4:	7e 8f       	std	Y+30, r23	; 0x1e
     5f6:	8f 8f       	std	Y+31, r24	; 0x1f
     5f8:	98 a3       	std	Y+32, r25	; 0x20
     5fa:	2b ad       	ldd	r18, Y+59	; 0x3b
     5fc:	3c ad       	ldd	r19, Y+60	; 0x3c
     5fe:	4d ad       	ldd	r20, Y+61	; 0x3d
     600:	5e ad       	ldd	r21, Y+62	; 0x3e
     602:	ca 01       	movw	r24, r20
     604:	b9 01       	movw	r22, r18
     606:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     60a:	69 8f       	std	Y+25, r22	; 0x19
     60c:	7a 8f       	std	Y+26, r23	; 0x1a
     60e:	8b 8f       	std	Y+27, r24	; 0x1b
     610:	9c 8f       	std	Y+28, r25	; 0x1c
     612:	29 81       	ldd	r18, Y+1	; 0x01
     614:	3a 81       	ldd	r19, Y+2	; 0x02
     616:	4b 81       	ldd	r20, Y+3	; 0x03
     618:	5c 81       	ldd	r21, Y+4	; 0x04
     61a:	c3 01       	movw	r24, r6
     61c:	b2 01       	movw	r22, r4
     61e:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
     622:	2b 01       	movw	r4, r22
     624:	3c 01       	movw	r6, r24
     626:	29 8d       	ldd	r18, Y+25	; 0x19
     628:	3a 8d       	ldd	r19, Y+26	; 0x1a
     62a:	4b 8d       	ldd	r20, Y+27	; 0x1b
     62c:	5c 8d       	ldd	r21, Y+28	; 0x1c
     62e:	c3 01       	movw	r24, r6
     630:	b2 01       	movw	r22, r4
     632:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
     636:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <sqrt>
     63a:	2b 01       	movw	r4, r22
     63c:	3c 01       	movw	r6, r24
		ax /= norm;
     63e:	9b 01       	movw	r18, r22
     640:	ac 01       	movw	r20, r24
     642:	c6 01       	movw	r24, r12
     644:	b5 01       	movw	r22, r10
     646:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__divsf3>
     64a:	69 83       	std	Y+1, r22	; 0x01
     64c:	7a 83       	std	Y+2, r23	; 0x02
     64e:	8b 83       	std	Y+3, r24	; 0x03
     650:	9c 83       	std	Y+4, r25	; 0x04
		ay /= norm;
     652:	a3 01       	movw	r20, r6
     654:	92 01       	movw	r18, r4
     656:	6f a9       	ldd	r22, Y+55	; 0x37
     658:	78 ad       	ldd	r23, Y+56	; 0x38
     65a:	89 ad       	ldd	r24, Y+57	; 0x39
     65c:	9a ad       	ldd	r25, Y+58	; 0x3a
     65e:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__divsf3>
     662:	6d 83       	std	Y+5, r22	; 0x05
     664:	7e 83       	std	Y+6, r23	; 0x06
     666:	8f 83       	std	Y+7, r24	; 0x07
     668:	98 87       	std	Y+8, r25	; 0x08
		az /= norm;
     66a:	a3 01       	movw	r20, r6
     66c:	92 01       	movw	r18, r4
     66e:	6b ad       	ldd	r22, Y+59	; 0x3b
     670:	7c ad       	ldd	r23, Y+60	; 0x3c
     672:	8d ad       	ldd	r24, Y+61	; 0x3d
     674:	9e ad       	ldd	r25, Y+62	; 0x3e
     676:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__divsf3>
     67a:	69 87       	std	Y+9, r22	; 0x09
     67c:	7a 87       	std	Y+10, r23	; 0x0a
     67e:	8b 87       	std	Y+11, r24	; 0x0b
     680:	9c 87       	std	Y+12, r25	; 0x0c

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q1 * q3 - q0 * q2;
     682:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <q1>
     686:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <q1+0x1>
     68a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <q1+0x2>
     68e:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <q1+0x3>
     692:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <q3>
     696:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <q3+0x1>
     69a:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <q3+0x2>
     69e:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <q3+0x3>
     6a2:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__data_start>
     6a6:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__data_start+0x1>
     6aa:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <__data_start+0x2>
     6ae:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <__data_start+0x3>
     6b2:	40 90 14 01 	lds	r4, 0x0114	; 0x800114 <q2>
     6b6:	50 90 15 01 	lds	r5, 0x0115	; 0x800115 <q2+0x1>
     6ba:	60 90 16 01 	lds	r6, 0x0116	; 0x800116 <q2+0x2>
     6be:	70 90 17 01 	lds	r7, 0x0117	; 0x800117 <q2+0x3>
     6c2:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     6c6:	6b 01       	movw	r12, r22
     6c8:	7c 01       	movw	r14, r24
     6ca:	a3 01       	movw	r20, r6
     6cc:	92 01       	movw	r18, r4
     6ce:	c5 01       	movw	r24, r10
     6d0:	b4 01       	movw	r22, r8
     6d2:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     6d6:	9b 01       	movw	r18, r22
     6d8:	ac 01       	movw	r20, r24
     6da:	c7 01       	movw	r24, r14
     6dc:	b6 01       	movw	r22, r12
     6de:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__subsf3>
     6e2:	69 8f       	std	Y+25, r22	; 0x19
     6e4:	7a 8f       	std	Y+26, r23	; 0x1a
     6e6:	8b 8f       	std	Y+27, r24	; 0x1b
     6e8:	9c 8f       	std	Y+28, r25	; 0x1c
		halfvy = q0 * q1 + q2 * q3;
     6ea:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     6ee:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     6f2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     6f6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     6fa:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <q1>
     6fe:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <q1+0x1>
     702:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <q1+0x2>
     706:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <q1+0x3>
     70a:	80 90 14 01 	lds	r8, 0x0114	; 0x800114 <q2>
     70e:	90 90 15 01 	lds	r9, 0x0115	; 0x800115 <q2+0x1>
     712:	a0 90 16 01 	lds	r10, 0x0116	; 0x800116 <q2+0x2>
     716:	b0 90 17 01 	lds	r11, 0x0117	; 0x800117 <q2+0x3>
     71a:	40 90 10 01 	lds	r4, 0x0110	; 0x800110 <q3>
     71e:	50 90 11 01 	lds	r5, 0x0111	; 0x800111 <q3+0x1>
     722:	60 90 12 01 	lds	r6, 0x0112	; 0x800112 <q3+0x2>
     726:	70 90 13 01 	lds	r7, 0x0113	; 0x800113 <q3+0x3>
     72a:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     72e:	6b 01       	movw	r12, r22
     730:	7c 01       	movw	r14, r24
     732:	a3 01       	movw	r20, r6
     734:	92 01       	movw	r18, r4
     736:	c5 01       	movw	r24, r10
     738:	b4 01       	movw	r22, r8
     73a:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     73e:	9b 01       	movw	r18, r22
     740:	ac 01       	movw	r20, r24
     742:	c7 01       	movw	r24, r14
     744:	b6 01       	movw	r22, r12
     746:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
     74a:	6d 8f       	std	Y+29, r22	; 0x1d
     74c:	7e 8f       	std	Y+30, r23	; 0x1e
     74e:	8f 8f       	std	Y+31, r24	; 0x1f
     750:	98 a3       	std	Y+32, r25	; 0x20
		halfvz = q0 * q0 - 0.5f + q3 * q3;
     752:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     756:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     75a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     75e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     762:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     766:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     76a:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_start+0x2>
     76e:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_start+0x3>
     772:	80 90 10 01 	lds	r8, 0x0110	; 0x800110 <q3>
     776:	90 90 11 01 	lds	r9, 0x0111	; 0x800111 <q3+0x1>
     77a:	a0 90 12 01 	lds	r10, 0x0112	; 0x800112 <q3+0x2>
     77e:	b0 90 13 01 	lds	r11, 0x0113	; 0x800113 <q3+0x3>
     782:	40 90 10 01 	lds	r4, 0x0110	; 0x800110 <q3>
     786:	50 90 11 01 	lds	r5, 0x0111	; 0x800111 <q3+0x1>
     78a:	60 90 12 01 	lds	r6, 0x0112	; 0x800112 <q3+0x2>
     78e:	70 90 13 01 	lds	r7, 0x0113	; 0x800113 <q3+0x3>
     792:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	40 e0       	ldi	r20, 0x00	; 0
     79c:	5f e3       	ldi	r21, 0x3F	; 63
     79e:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__subsf3>
     7a2:	6b 01       	movw	r12, r22
     7a4:	7c 01       	movw	r14, r24
     7a6:	a3 01       	movw	r20, r6
     7a8:	92 01       	movw	r18, r4
     7aa:	c5 01       	movw	r24, r10
     7ac:	b4 01       	movw	r22, r8
     7ae:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     7b2:	9b 01       	movw	r18, r22
     7b4:	ac 01       	movw	r20, r24
     7b6:	c7 01       	movw	r24, r14
     7b8:	b6 01       	movw	r22, r12
     7ba:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
     7be:	6b 01       	movw	r12, r22
     7c0:	7c 01       	movw	r14, r24

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
     7c2:	9b 01       	movw	r18, r22
     7c4:	ac 01       	movw	r20, r24
     7c6:	6d 81       	ldd	r22, Y+5	; 0x05
     7c8:	7e 81       	ldd	r23, Y+6	; 0x06
     7ca:	8f 81       	ldd	r24, Y+7	; 0x07
     7cc:	98 85       	ldd	r25, Y+8	; 0x08
     7ce:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     7d2:	4b 01       	movw	r8, r22
     7d4:	5c 01       	movw	r10, r24
     7d6:	2d 8d       	ldd	r18, Y+29	; 0x1d
     7d8:	3e 8d       	ldd	r19, Y+30	; 0x1e
     7da:	4f 8d       	ldd	r20, Y+31	; 0x1f
     7dc:	58 a1       	ldd	r21, Y+32	; 0x20
     7de:	69 85       	ldd	r22, Y+9	; 0x09
     7e0:	7a 85       	ldd	r23, Y+10	; 0x0a
     7e2:	8b 85       	ldd	r24, Y+11	; 0x0b
     7e4:	9c 85       	ldd	r25, Y+12	; 0x0c
     7e6:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     7ea:	9b 01       	movw	r18, r22
     7ec:	ac 01       	movw	r20, r24
     7ee:	c5 01       	movw	r24, r10
     7f0:	b4 01       	movw	r22, r8
     7f2:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__subsf3>
     7f6:	69 a3       	std	Y+33, r22	; 0x21
     7f8:	7a a3       	std	Y+34, r23	; 0x22
     7fa:	8b a3       	std	Y+35, r24	; 0x23
     7fc:	9c a3       	std	Y+36, r25	; 0x24
		halfey = (az * halfvx - ax * halfvz);
     7fe:	29 8d       	ldd	r18, Y+25	; 0x19
     800:	3a 8d       	ldd	r19, Y+26	; 0x1a
     802:	4b 8d       	ldd	r20, Y+27	; 0x1b
     804:	5c 8d       	ldd	r21, Y+28	; 0x1c
     806:	69 85       	ldd	r22, Y+9	; 0x09
     808:	7a 85       	ldd	r23, Y+10	; 0x0a
     80a:	8b 85       	ldd	r24, Y+11	; 0x0b
     80c:	9c 85       	ldd	r25, Y+12	; 0x0c
     80e:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     812:	4b 01       	movw	r8, r22
     814:	5c 01       	movw	r10, r24
     816:	a7 01       	movw	r20, r14
     818:	96 01       	movw	r18, r12
     81a:	69 81       	ldd	r22, Y+1	; 0x01
     81c:	7a 81       	ldd	r23, Y+2	; 0x02
     81e:	8b 81       	ldd	r24, Y+3	; 0x03
     820:	9c 81       	ldd	r25, Y+4	; 0x04
     822:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     826:	9b 01       	movw	r18, r22
     828:	ac 01       	movw	r20, r24
     82a:	c5 01       	movw	r24, r10
     82c:	b4 01       	movw	r22, r8
     82e:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__subsf3>
     832:	2b 01       	movw	r4, r22
     834:	3c 01       	movw	r6, r24
		halfez = (ax * halfvy - ay * halfvx);
     836:	2d 8d       	ldd	r18, Y+29	; 0x1d
     838:	3e 8d       	ldd	r19, Y+30	; 0x1e
     83a:	4f 8d       	ldd	r20, Y+31	; 0x1f
     83c:	58 a1       	ldd	r21, Y+32	; 0x20
     83e:	69 81       	ldd	r22, Y+1	; 0x01
     840:	7a 81       	ldd	r23, Y+2	; 0x02
     842:	8b 81       	ldd	r24, Y+3	; 0x03
     844:	9c 81       	ldd	r25, Y+4	; 0x04
     846:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     84a:	6b 01       	movw	r12, r22
     84c:	7c 01       	movw	r14, r24
     84e:	29 8d       	ldd	r18, Y+25	; 0x19
     850:	3a 8d       	ldd	r19, Y+26	; 0x1a
     852:	4b 8d       	ldd	r20, Y+27	; 0x1b
     854:	5c 8d       	ldd	r21, Y+28	; 0x1c
     856:	6d 81       	ldd	r22, Y+5	; 0x05
     858:	7e 81       	ldd	r23, Y+6	; 0x06
     85a:	8f 81       	ldd	r24, Y+7	; 0x07
     85c:	98 85       	ldd	r25, Y+8	; 0x08
     85e:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     862:	9b 01       	movw	r18, r22
     864:	ac 01       	movw	r20, r24
     866:	c7 01       	movw	r24, r14
     868:	b6 01       	movw	r22, r12
     86a:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__subsf3>
     86e:	4b 01       	movw	r8, r22
     870:	5c 01       	movw	r10, r24

		// Compute and apply integral feedback if enabled
		if(mpu6050_mahonytwoKiDef > 0.0f) {
			integralFBx += mpu6050_mahonytwoKiDef * halfex * (1.0f / mpu6050_mahonysampleFreq);	// integral error scaled by Ki
     872:	c0 90 0c 01 	lds	r12, 0x010C	; 0x80010c <integralFBx>
     876:	d0 90 0d 01 	lds	r13, 0x010D	; 0x80010d <integralFBx+0x1>
     87a:	e0 90 0e 01 	lds	r14, 0x010E	; 0x80010e <integralFBx+0x2>
     87e:	f0 90 0f 01 	lds	r15, 0x010F	; 0x80010f <integralFBx+0x3>
     882:	2d ec       	ldi	r18, 0xCD	; 205
     884:	3c ec       	ldi	r19, 0xCC	; 204
     886:	4c e4       	ldi	r20, 0x4C	; 76
     888:	5e e3       	ldi	r21, 0x3E	; 62
     88a:	69 a1       	ldd	r22, Y+33	; 0x21
     88c:	7a a1       	ldd	r23, Y+34	; 0x22
     88e:	8b a1       	ldd	r24, Y+35	; 0x23
     890:	9c a1       	ldd	r25, Y+36	; 0x24
     892:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     896:	2a e8       	ldi	r18, 0x8A	; 138
     898:	3b e4       	ldi	r19, 0x4B	; 75
     89a:	46 e8       	ldi	r20, 0x86	; 134
     89c:	5c e3       	ldi	r21, 0x3C	; 60
     89e:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     8a2:	a7 01       	movw	r20, r14
     8a4:	96 01       	movw	r18, r12
     8a6:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
     8aa:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <integralFBx>
     8ae:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <integralFBx+0x1>
     8b2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <integralFBx+0x2>
     8b6:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <integralFBx+0x3>
			integralFBy += mpu6050_mahonytwoKiDef * halfey * (1.0f / mpu6050_mahonysampleFreq);
     8ba:	c0 90 08 01 	lds	r12, 0x0108	; 0x800108 <integralFBy>
     8be:	d0 90 09 01 	lds	r13, 0x0109	; 0x800109 <integralFBy+0x1>
     8c2:	e0 90 0a 01 	lds	r14, 0x010A	; 0x80010a <integralFBy+0x2>
     8c6:	f0 90 0b 01 	lds	r15, 0x010B	; 0x80010b <integralFBy+0x3>
     8ca:	2d ec       	ldi	r18, 0xCD	; 205
     8cc:	3c ec       	ldi	r19, 0xCC	; 204
     8ce:	4c e4       	ldi	r20, 0x4C	; 76
     8d0:	5e e3       	ldi	r21, 0x3E	; 62
     8d2:	c3 01       	movw	r24, r6
     8d4:	b2 01       	movw	r22, r4
     8d6:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     8da:	2a e8       	ldi	r18, 0x8A	; 138
     8dc:	3b e4       	ldi	r19, 0x4B	; 75
     8de:	46 e8       	ldi	r20, 0x86	; 134
     8e0:	5c e3       	ldi	r21, 0x3C	; 60
     8e2:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     8e6:	a7 01       	movw	r20, r14
     8e8:	96 01       	movw	r18, r12
     8ea:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
     8ee:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <integralFBy>
     8f2:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <integralFBy+0x1>
     8f6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <integralFBy+0x2>
     8fa:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <integralFBy+0x3>
			integralFBz += mpu6050_mahonytwoKiDef * halfez * (1.0f / mpu6050_mahonysampleFreq);
     8fe:	c0 90 04 01 	lds	r12, 0x0104	; 0x800104 <__data_end>
     902:	d0 90 05 01 	lds	r13, 0x0105	; 0x800105 <__data_end+0x1>
     906:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <__data_end+0x2>
     90a:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <__data_end+0x3>
     90e:	2d ec       	ldi	r18, 0xCD	; 205
     910:	3c ec       	ldi	r19, 0xCC	; 204
     912:	4c e4       	ldi	r20, 0x4C	; 76
     914:	5e e3       	ldi	r21, 0x3E	; 62
     916:	c5 01       	movw	r24, r10
     918:	b4 01       	movw	r22, r8
     91a:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     91e:	2a e8       	ldi	r18, 0x8A	; 138
     920:	3b e4       	ldi	r19, 0x4B	; 75
     922:	46 e8       	ldi	r20, 0x86	; 134
     924:	5c e3       	ldi	r21, 0x3C	; 60
     926:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     92a:	a7 01       	movw	r20, r14
     92c:	96 01       	movw	r18, r12
     92e:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
     932:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
     936:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
     93a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
     93e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>
			gx += integralFBx;	// apply integral feedback
     942:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <integralFBx>
     946:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <integralFBx+0x1>
     94a:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <integralFBx+0x2>
     94e:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <integralFBx+0x3>
     952:	6d 85       	ldd	r22, Y+13	; 0x0d
     954:	7e 85       	ldd	r23, Y+14	; 0x0e
     956:	8f 85       	ldd	r24, Y+15	; 0x0f
     958:	98 89       	ldd	r25, Y+16	; 0x10
     95a:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
     95e:	6d 83       	std	Y+5, r22	; 0x05
     960:	7e 83       	std	Y+6, r23	; 0x06
     962:	8f 83       	std	Y+7, r24	; 0x07
     964:	98 87       	std	Y+8, r25	; 0x08
			gy += integralFBy;
     966:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <integralFBy>
     96a:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <integralFBy+0x1>
     96e:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <integralFBy+0x2>
     972:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <integralFBy+0x3>
     976:	69 89       	ldd	r22, Y+17	; 0x11
     978:	7a 89       	ldd	r23, Y+18	; 0x12
     97a:	8b 89       	ldd	r24, Y+19	; 0x13
     97c:	9c 89       	ldd	r25, Y+20	; 0x14
     97e:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
     982:	6b 01       	movw	r12, r22
     984:	7c 01       	movw	r14, r24
			gz += integralFBz;
     986:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
     98a:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x1>
     98e:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <__data_end+0x2>
     992:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <__data_end+0x3>
     996:	6d 89       	ldd	r22, Y+21	; 0x15
     998:	7e 89       	ldd	r23, Y+22	; 0x16
     99a:	8f 89       	ldd	r24, Y+23	; 0x17
     99c:	98 8d       	ldd	r25, Y+24	; 0x18
     99e:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
     9a2:	69 87       	std	Y+9, r22	; 0x09
     9a4:	7a 87       	std	Y+10, r23	; 0x0a
     9a6:	8b 87       	std	Y+11, r24	; 0x0b
     9a8:	9c 87       	std	Y+12, r25	; 0x0c
			integralFBy = 0.0f;
			integralFBz = 0.0f;
		}

		// Apply proportional feedback
		gx += mpu6050_mahonytwoKpDef * halfex;
     9aa:	2d 81       	ldd	r18, Y+5	; 0x05
     9ac:	3e 81       	ldd	r19, Y+6	; 0x06
     9ae:	4f 81       	ldd	r20, Y+7	; 0x07
     9b0:	58 85       	ldd	r21, Y+8	; 0x08
     9b2:	69 a1       	ldd	r22, Y+33	; 0x21
     9b4:	7a a1       	ldd	r23, Y+34	; 0x22
     9b6:	8b a1       	ldd	r24, Y+35	; 0x23
     9b8:	9c a1       	ldd	r25, Y+36	; 0x24
     9ba:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
     9be:	6d 87       	std	Y+13, r22	; 0x0d
     9c0:	7e 87       	std	Y+14, r23	; 0x0e
     9c2:	8f 87       	std	Y+15, r24	; 0x0f
     9c4:	98 8b       	std	Y+16, r25	; 0x10
		gy += mpu6050_mahonytwoKpDef * halfey;
     9c6:	a7 01       	movw	r20, r14
     9c8:	96 01       	movw	r18, r12
     9ca:	c3 01       	movw	r24, r6
     9cc:	b2 01       	movw	r22, r4
     9ce:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
     9d2:	69 8b       	std	Y+17, r22	; 0x11
     9d4:	7a 8b       	std	Y+18, r23	; 0x12
     9d6:	8b 8b       	std	Y+19, r24	; 0x13
     9d8:	9c 8b       	std	Y+20, r25	; 0x14
		gz += mpu6050_mahonytwoKpDef * halfez;
     9da:	29 85       	ldd	r18, Y+9	; 0x09
     9dc:	3a 85       	ldd	r19, Y+10	; 0x0a
     9de:	4b 85       	ldd	r20, Y+11	; 0x0b
     9e0:	5c 85       	ldd	r21, Y+12	; 0x0c
     9e2:	c5 01       	movw	r24, r10
     9e4:	b4 01       	movw	r22, r8
     9e6:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
     9ea:	6d 8b       	std	Y+21, r22	; 0x15
     9ec:	7e 8b       	std	Y+22, r23	; 0x16
     9ee:	8f 8b       	std	Y+23, r24	; 0x17
     9f0:	98 8f       	std	Y+24, r25	; 0x18
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * (1.0f / mpu6050_mahonysampleFreq));		// pre-multiply common factors
     9f2:	2a e8       	ldi	r18, 0x8A	; 138
     9f4:	3b e4       	ldi	r19, 0x4B	; 75
     9f6:	46 e0       	ldi	r20, 0x06	; 6
     9f8:	5c e3       	ldi	r21, 0x3C	; 60
     9fa:	6d 85       	ldd	r22, Y+13	; 0x0d
     9fc:	7e 85       	ldd	r23, Y+14	; 0x0e
     9fe:	8f 85       	ldd	r24, Y+15	; 0x0f
     a00:	98 89       	ldd	r25, Y+16	; 0x10
     a02:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     a06:	6d 83       	std	Y+5, r22	; 0x05
     a08:	7e 83       	std	Y+6, r23	; 0x06
     a0a:	8f 83       	std	Y+7, r24	; 0x07
     a0c:	98 87       	std	Y+8, r25	; 0x08
	gy *= (0.5f * (1.0f / mpu6050_mahonysampleFreq));
     a0e:	2a e8       	ldi	r18, 0x8A	; 138
     a10:	3b e4       	ldi	r19, 0x4B	; 75
     a12:	46 e0       	ldi	r20, 0x06	; 6
     a14:	5c e3       	ldi	r21, 0x3C	; 60
     a16:	69 89       	ldd	r22, Y+17	; 0x11
     a18:	7a 89       	ldd	r23, Y+18	; 0x12
     a1a:	8b 89       	ldd	r24, Y+19	; 0x13
     a1c:	9c 89       	ldd	r25, Y+20	; 0x14
     a1e:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     a22:	69 87       	std	Y+9, r22	; 0x09
     a24:	7a 87       	std	Y+10, r23	; 0x0a
     a26:	8b 87       	std	Y+11, r24	; 0x0b
     a28:	9c 87       	std	Y+12, r25	; 0x0c
	gz *= (0.5f * (1.0f / mpu6050_mahonysampleFreq));
     a2a:	2a e8       	ldi	r18, 0x8A	; 138
     a2c:	3b e4       	ldi	r19, 0x4B	; 75
     a2e:	46 e0       	ldi	r20, 0x06	; 6
     a30:	5c e3       	ldi	r21, 0x3C	; 60
     a32:	6d 89       	ldd	r22, Y+21	; 0x15
     a34:	7e 89       	ldd	r23, Y+22	; 0x16
     a36:	8f 89       	ldd	r24, Y+23	; 0x17
     a38:	98 8d       	ldd	r25, Y+24	; 0x18
     a3a:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     a3e:	6d 87       	std	Y+13, r22	; 0x0d
     a40:	7e 87       	std	Y+14, r23	; 0x0e
     a42:	8f 87       	std	Y+15, r24	; 0x0f
     a44:	98 8b       	std	Y+16, r25	; 0x10
	qa = q0;
     a46:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     a4a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     a4e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
     a52:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
     a56:	89 8b       	std	Y+17, r24	; 0x11
     a58:	9a 8b       	std	Y+18, r25	; 0x12
     a5a:	ab 8b       	std	Y+19, r26	; 0x13
     a5c:	bc 8b       	std	Y+20, r27	; 0x14
	qb = q1;
     a5e:	80 90 18 01 	lds	r8, 0x0118	; 0x800118 <q1>
     a62:	90 90 19 01 	lds	r9, 0x0119	; 0x800119 <q1+0x1>
     a66:	a0 90 1a 01 	lds	r10, 0x011A	; 0x80011a <q1+0x2>
     a6a:	b0 90 1b 01 	lds	r11, 0x011B	; 0x80011b <q1+0x3>
	qc = q2;
     a6e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <q2>
     a72:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <q2+0x1>
     a76:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <q2+0x2>
     a7a:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <q2+0x3>
     a7e:	8d 8b       	std	Y+21, r24	; 0x15
     a80:	9e 8b       	std	Y+22, r25	; 0x16
     a82:	af 8b       	std	Y+23, r26	; 0x17
     a84:	b8 8f       	std	Y+24, r27	; 0x18
	q0 += (-qb * gx - qc * gy - q3 * gz);
     a86:	40 90 10 01 	lds	r4, 0x0110	; 0x800110 <q3>
     a8a:	50 90 11 01 	lds	r5, 0x0111	; 0x800111 <q3+0x1>
     a8e:	60 90 12 01 	lds	r6, 0x0112	; 0x800112 <q3+0x2>
     a92:	70 90 13 01 	lds	r7, 0x0113	; 0x800113 <q3+0x3>
     a96:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
     a9a:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
     a9e:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
     aa2:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
     aa6:	c5 01       	movw	r24, r10
     aa8:	b4 01       	movw	r22, r8
     aaa:	90 58       	subi	r25, 0x80	; 128
     aac:	2d 81       	ldd	r18, Y+5	; 0x05
     aae:	3e 81       	ldd	r19, Y+6	; 0x06
     ab0:	4f 81       	ldd	r20, Y+7	; 0x07
     ab2:	58 85       	ldd	r21, Y+8	; 0x08
     ab4:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     ab8:	69 83       	std	Y+1, r22	; 0x01
     aba:	7a 83       	std	Y+2, r23	; 0x02
     abc:	8b 83       	std	Y+3, r24	; 0x03
     abe:	9c 83       	std	Y+4, r25	; 0x04
     ac0:	2d 89       	ldd	r18, Y+21	; 0x15
     ac2:	3e 89       	ldd	r19, Y+22	; 0x16
     ac4:	4f 89       	ldd	r20, Y+23	; 0x17
     ac6:	58 8d       	ldd	r21, Y+24	; 0x18
     ac8:	69 85       	ldd	r22, Y+9	; 0x09
     aca:	7a 85       	ldd	r23, Y+10	; 0x0a
     acc:	8b 85       	ldd	r24, Y+11	; 0x0b
     ace:	9c 85       	ldd	r25, Y+12	; 0x0c
     ad0:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     ad4:	9b 01       	movw	r18, r22
     ad6:	ac 01       	movw	r20, r24
     ad8:	69 81       	ldd	r22, Y+1	; 0x01
     ada:	7a 81       	ldd	r23, Y+2	; 0x02
     adc:	8b 81       	ldd	r24, Y+3	; 0x03
     ade:	9c 81       	ldd	r25, Y+4	; 0x04
     ae0:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__subsf3>
     ae4:	69 83       	std	Y+1, r22	; 0x01
     ae6:	7a 83       	std	Y+2, r23	; 0x02
     ae8:	8b 83       	std	Y+3, r24	; 0x03
     aea:	9c 83       	std	Y+4, r25	; 0x04
     aec:	a3 01       	movw	r20, r6
     aee:	92 01       	movw	r18, r4
     af0:	6d 85       	ldd	r22, Y+13	; 0x0d
     af2:	7e 85       	ldd	r23, Y+14	; 0x0e
     af4:	8f 85       	ldd	r24, Y+15	; 0x0f
     af6:	98 89       	ldd	r25, Y+16	; 0x10
     af8:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     afc:	9b 01       	movw	r18, r22
     afe:	ac 01       	movw	r20, r24
     b00:	69 81       	ldd	r22, Y+1	; 0x01
     b02:	7a 81       	ldd	r23, Y+2	; 0x02
     b04:	8b 81       	ldd	r24, Y+3	; 0x03
     b06:	9c 81       	ldd	r25, Y+4	; 0x04
     b08:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__subsf3>
     b0c:	a7 01       	movw	r20, r14
     b0e:	96 01       	movw	r18, r12
     b10:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
     b14:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     b18:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     b1c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     b20:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	q1 += (qa * gx + qc * gz - q3 * gy);
     b24:	40 90 10 01 	lds	r4, 0x0110	; 0x800110 <q3>
     b28:	50 90 11 01 	lds	r5, 0x0111	; 0x800111 <q3+0x1>
     b2c:	60 90 12 01 	lds	r6, 0x0112	; 0x800112 <q3+0x2>
     b30:	70 90 13 01 	lds	r7, 0x0113	; 0x800113 <q3+0x3>
     b34:	c0 90 18 01 	lds	r12, 0x0118	; 0x800118 <q1>
     b38:	d0 90 19 01 	lds	r13, 0x0119	; 0x800119 <q1+0x1>
     b3c:	e0 90 1a 01 	lds	r14, 0x011A	; 0x80011a <q1+0x2>
     b40:	f0 90 1b 01 	lds	r15, 0x011B	; 0x80011b <q1+0x3>
     b44:	29 89       	ldd	r18, Y+17	; 0x11
     b46:	3a 89       	ldd	r19, Y+18	; 0x12
     b48:	4b 89       	ldd	r20, Y+19	; 0x13
     b4a:	5c 89       	ldd	r21, Y+20	; 0x14
     b4c:	6d 81       	ldd	r22, Y+5	; 0x05
     b4e:	7e 81       	ldd	r23, Y+6	; 0x06
     b50:	8f 81       	ldd	r24, Y+7	; 0x07
     b52:	98 85       	ldd	r25, Y+8	; 0x08
     b54:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     b58:	69 83       	std	Y+1, r22	; 0x01
     b5a:	7a 83       	std	Y+2, r23	; 0x02
     b5c:	8b 83       	std	Y+3, r24	; 0x03
     b5e:	9c 83       	std	Y+4, r25	; 0x04
     b60:	2d 89       	ldd	r18, Y+21	; 0x15
     b62:	3e 89       	ldd	r19, Y+22	; 0x16
     b64:	4f 89       	ldd	r20, Y+23	; 0x17
     b66:	58 8d       	ldd	r21, Y+24	; 0x18
     b68:	6d 85       	ldd	r22, Y+13	; 0x0d
     b6a:	7e 85       	ldd	r23, Y+14	; 0x0e
     b6c:	8f 85       	ldd	r24, Y+15	; 0x0f
     b6e:	98 89       	ldd	r25, Y+16	; 0x10
     b70:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     b74:	9b 01       	movw	r18, r22
     b76:	ac 01       	movw	r20, r24
     b78:	69 81       	ldd	r22, Y+1	; 0x01
     b7a:	7a 81       	ldd	r23, Y+2	; 0x02
     b7c:	8b 81       	ldd	r24, Y+3	; 0x03
     b7e:	9c 81       	ldd	r25, Y+4	; 0x04
     b80:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
     b84:	69 83       	std	Y+1, r22	; 0x01
     b86:	7a 83       	std	Y+2, r23	; 0x02
     b88:	8b 83       	std	Y+3, r24	; 0x03
     b8a:	9c 83       	std	Y+4, r25	; 0x04
     b8c:	a3 01       	movw	r20, r6
     b8e:	92 01       	movw	r18, r4
     b90:	69 85       	ldd	r22, Y+9	; 0x09
     b92:	7a 85       	ldd	r23, Y+10	; 0x0a
     b94:	8b 85       	ldd	r24, Y+11	; 0x0b
     b96:	9c 85       	ldd	r25, Y+12	; 0x0c
     b98:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     b9c:	9b 01       	movw	r18, r22
     b9e:	ac 01       	movw	r20, r24
     ba0:	69 81       	ldd	r22, Y+1	; 0x01
     ba2:	7a 81       	ldd	r23, Y+2	; 0x02
     ba4:	8b 81       	ldd	r24, Y+3	; 0x03
     ba6:	9c 81       	ldd	r25, Y+4	; 0x04
     ba8:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__subsf3>
     bac:	a7 01       	movw	r20, r14
     bae:	96 01       	movw	r18, r12
     bb0:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
     bb4:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <q1>
     bb8:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <q1+0x1>
     bbc:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <q1+0x2>
     bc0:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <q1+0x3>
	q2 += (qa * gy - qb * gz + q3 * gx);
     bc4:	40 90 10 01 	lds	r4, 0x0110	; 0x800110 <q3>
     bc8:	50 90 11 01 	lds	r5, 0x0111	; 0x800111 <q3+0x1>
     bcc:	60 90 12 01 	lds	r6, 0x0112	; 0x800112 <q3+0x2>
     bd0:	70 90 13 01 	lds	r7, 0x0113	; 0x800113 <q3+0x3>
     bd4:	c0 90 14 01 	lds	r12, 0x0114	; 0x800114 <q2>
     bd8:	d0 90 15 01 	lds	r13, 0x0115	; 0x800115 <q2+0x1>
     bdc:	e0 90 16 01 	lds	r14, 0x0116	; 0x800116 <q2+0x2>
     be0:	f0 90 17 01 	lds	r15, 0x0117	; 0x800117 <q2+0x3>
     be4:	29 89       	ldd	r18, Y+17	; 0x11
     be6:	3a 89       	ldd	r19, Y+18	; 0x12
     be8:	4b 89       	ldd	r20, Y+19	; 0x13
     bea:	5c 89       	ldd	r21, Y+20	; 0x14
     bec:	69 85       	ldd	r22, Y+9	; 0x09
     bee:	7a 85       	ldd	r23, Y+10	; 0x0a
     bf0:	8b 85       	ldd	r24, Y+11	; 0x0b
     bf2:	9c 85       	ldd	r25, Y+12	; 0x0c
     bf4:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     bf8:	69 83       	std	Y+1, r22	; 0x01
     bfa:	7a 83       	std	Y+2, r23	; 0x02
     bfc:	8b 83       	std	Y+3, r24	; 0x03
     bfe:	9c 83       	std	Y+4, r25	; 0x04
     c00:	a5 01       	movw	r20, r10
     c02:	94 01       	movw	r18, r8
     c04:	6d 85       	ldd	r22, Y+13	; 0x0d
     c06:	7e 85       	ldd	r23, Y+14	; 0x0e
     c08:	8f 85       	ldd	r24, Y+15	; 0x0f
     c0a:	98 89       	ldd	r25, Y+16	; 0x10
     c0c:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     c10:	9b 01       	movw	r18, r22
     c12:	ac 01       	movw	r20, r24
     c14:	69 81       	ldd	r22, Y+1	; 0x01
     c16:	7a 81       	ldd	r23, Y+2	; 0x02
     c18:	8b 81       	ldd	r24, Y+3	; 0x03
     c1a:	9c 81       	ldd	r25, Y+4	; 0x04
     c1c:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__subsf3>
     c20:	69 83       	std	Y+1, r22	; 0x01
     c22:	7a 83       	std	Y+2, r23	; 0x02
     c24:	8b 83       	std	Y+3, r24	; 0x03
     c26:	9c 83       	std	Y+4, r25	; 0x04
     c28:	a3 01       	movw	r20, r6
     c2a:	92 01       	movw	r18, r4
     c2c:	6d 81       	ldd	r22, Y+5	; 0x05
     c2e:	7e 81       	ldd	r23, Y+6	; 0x06
     c30:	8f 81       	ldd	r24, Y+7	; 0x07
     c32:	98 85       	ldd	r25, Y+8	; 0x08
     c34:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     c38:	9b 01       	movw	r18, r22
     c3a:	ac 01       	movw	r20, r24
     c3c:	69 81       	ldd	r22, Y+1	; 0x01
     c3e:	7a 81       	ldd	r23, Y+2	; 0x02
     c40:	8b 81       	ldd	r24, Y+3	; 0x03
     c42:	9c 81       	ldd	r25, Y+4	; 0x04
     c44:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
     c48:	a7 01       	movw	r20, r14
     c4a:	96 01       	movw	r18, r12
     c4c:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
     c50:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <q2>
     c54:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <q2+0x1>
     c58:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <q2+0x2>
     c5c:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <q2+0x3>
	q3 += (qa * gz + qb * gy - qc * gx);
     c60:	c0 90 10 01 	lds	r12, 0x0110	; 0x800110 <q3>
     c64:	d0 90 11 01 	lds	r13, 0x0111	; 0x800111 <q3+0x1>
     c68:	e0 90 12 01 	lds	r14, 0x0112	; 0x800112 <q3+0x2>
     c6c:	f0 90 13 01 	lds	r15, 0x0113	; 0x800113 <q3+0x3>
     c70:	29 89       	ldd	r18, Y+17	; 0x11
     c72:	3a 89       	ldd	r19, Y+18	; 0x12
     c74:	4b 89       	ldd	r20, Y+19	; 0x13
     c76:	5c 89       	ldd	r21, Y+20	; 0x14
     c78:	6d 85       	ldd	r22, Y+13	; 0x0d
     c7a:	7e 85       	ldd	r23, Y+14	; 0x0e
     c7c:	8f 85       	ldd	r24, Y+15	; 0x0f
     c7e:	98 89       	ldd	r25, Y+16	; 0x10
     c80:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     c84:	2b 01       	movw	r4, r22
     c86:	3c 01       	movw	r6, r24
     c88:	a5 01       	movw	r20, r10
     c8a:	94 01       	movw	r18, r8
     c8c:	69 85       	ldd	r22, Y+9	; 0x09
     c8e:	7a 85       	ldd	r23, Y+10	; 0x0a
     c90:	8b 85       	ldd	r24, Y+11	; 0x0b
     c92:	9c 85       	ldd	r25, Y+12	; 0x0c
     c94:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     c98:	9b 01       	movw	r18, r22
     c9a:	ac 01       	movw	r20, r24
     c9c:	c3 01       	movw	r24, r6
     c9e:	b2 01       	movw	r22, r4
     ca0:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
     ca4:	4b 01       	movw	r8, r22
     ca6:	5c 01       	movw	r10, r24
     ca8:	2d 89       	ldd	r18, Y+21	; 0x15
     caa:	3e 89       	ldd	r19, Y+22	; 0x16
     cac:	4f 89       	ldd	r20, Y+23	; 0x17
     cae:	58 8d       	ldd	r21, Y+24	; 0x18
     cb0:	6d 81       	ldd	r22, Y+5	; 0x05
     cb2:	7e 81       	ldd	r23, Y+6	; 0x06
     cb4:	8f 81       	ldd	r24, Y+7	; 0x07
     cb6:	98 85       	ldd	r25, Y+8	; 0x08
     cb8:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     cbc:	9b 01       	movw	r18, r22
     cbe:	ac 01       	movw	r20, r24
     cc0:	c5 01       	movw	r24, r10
     cc2:	b4 01       	movw	r22, r8
     cc4:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__subsf3>
     cc8:	a7 01       	movw	r20, r14
     cca:	96 01       	movw	r18, r12
     ccc:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
     cd0:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <q3>
     cd4:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <q3+0x1>
     cd8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <q3+0x2>
     cdc:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <q3+0x3>

	// Normalise quaternion
	norm = sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
     ce0:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
     ce4:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
     ce8:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
     cec:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
     cf0:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__data_start>
     cf4:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__data_start+0x1>
     cf8:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <__data_start+0x2>
     cfc:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <__data_start+0x3>
     d00:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <q1>
     d04:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <q1+0x1>
     d08:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <q1+0x2>
     d0c:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <q1+0x3>
     d10:	8d 83       	std	Y+5, r24	; 0x05
     d12:	9e 83       	std	Y+6, r25	; 0x06
     d14:	af 83       	std	Y+7, r26	; 0x07
     d16:	b8 87       	std	Y+8, r27	; 0x08
     d18:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <q1>
     d1c:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <q1+0x1>
     d20:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <q1+0x2>
     d24:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <q1+0x3>
     d28:	89 87       	std	Y+9, r24	; 0x09
     d2a:	9a 87       	std	Y+10, r25	; 0x0a
     d2c:	ab 87       	std	Y+11, r26	; 0x0b
     d2e:	bc 87       	std	Y+12, r27	; 0x0c
     d30:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <q2>
     d34:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <q2+0x1>
     d38:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <q2+0x2>
     d3c:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <q2+0x3>
     d40:	8d 87       	std	Y+13, r24	; 0x0d
     d42:	9e 87       	std	Y+14, r25	; 0x0e
     d44:	af 87       	std	Y+15, r26	; 0x0f
     d46:	b8 8b       	std	Y+16, r27	; 0x10
     d48:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <q2>
     d4c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <q2+0x1>
     d50:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <q2+0x2>
     d54:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <q2+0x3>
     d58:	89 8b       	std	Y+17, r24	; 0x11
     d5a:	9a 8b       	std	Y+18, r25	; 0x12
     d5c:	ab 8b       	std	Y+19, r26	; 0x13
     d5e:	bc 8b       	std	Y+20, r27	; 0x14
     d60:	40 90 10 01 	lds	r4, 0x0110	; 0x800110 <q3>
     d64:	50 90 11 01 	lds	r5, 0x0111	; 0x800111 <q3+0x1>
     d68:	60 90 12 01 	lds	r6, 0x0112	; 0x800112 <q3+0x2>
     d6c:	70 90 13 01 	lds	r7, 0x0113	; 0x800113 <q3+0x3>
     d70:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <q3>
     d74:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <q3+0x1>
     d78:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <q3+0x2>
     d7c:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <q3+0x3>
     d80:	8d 8b       	std	Y+21, r24	; 0x15
     d82:	9e 8b       	std	Y+22, r25	; 0x16
     d84:	af 8b       	std	Y+23, r26	; 0x17
     d86:	b8 8f       	std	Y+24, r27	; 0x18
     d88:	a5 01       	movw	r20, r10
     d8a:	94 01       	movw	r18, r8
     d8c:	c7 01       	movw	r24, r14
     d8e:	b6 01       	movw	r22, r12
     d90:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     d94:	69 83       	std	Y+1, r22	; 0x01
     d96:	7a 83       	std	Y+2, r23	; 0x02
     d98:	8b 83       	std	Y+3, r24	; 0x03
     d9a:	9c 83       	std	Y+4, r25	; 0x04
     d9c:	29 85       	ldd	r18, Y+9	; 0x09
     d9e:	3a 85       	ldd	r19, Y+10	; 0x0a
     da0:	4b 85       	ldd	r20, Y+11	; 0x0b
     da2:	5c 85       	ldd	r21, Y+12	; 0x0c
     da4:	6d 81       	ldd	r22, Y+5	; 0x05
     da6:	7e 81       	ldd	r23, Y+6	; 0x06
     da8:	8f 81       	ldd	r24, Y+7	; 0x07
     daa:	98 85       	ldd	r25, Y+8	; 0x08
     dac:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     db0:	9b 01       	movw	r18, r22
     db2:	ac 01       	movw	r20, r24
     db4:	69 81       	ldd	r22, Y+1	; 0x01
     db6:	7a 81       	ldd	r23, Y+2	; 0x02
     db8:	8b 81       	ldd	r24, Y+3	; 0x03
     dba:	9c 81       	ldd	r25, Y+4	; 0x04
     dbc:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
     dc0:	69 83       	std	Y+1, r22	; 0x01
     dc2:	7a 83       	std	Y+2, r23	; 0x02
     dc4:	8b 83       	std	Y+3, r24	; 0x03
     dc6:	9c 83       	std	Y+4, r25	; 0x04
     dc8:	29 89       	ldd	r18, Y+17	; 0x11
     dca:	3a 89       	ldd	r19, Y+18	; 0x12
     dcc:	4b 89       	ldd	r20, Y+19	; 0x13
     dce:	5c 89       	ldd	r21, Y+20	; 0x14
     dd0:	6d 85       	ldd	r22, Y+13	; 0x0d
     dd2:	7e 85       	ldd	r23, Y+14	; 0x0e
     dd4:	8f 85       	ldd	r24, Y+15	; 0x0f
     dd6:	98 89       	ldd	r25, Y+16	; 0x10
     dd8:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     ddc:	9b 01       	movw	r18, r22
     dde:	ac 01       	movw	r20, r24
     de0:	69 81       	ldd	r22, Y+1	; 0x01
     de2:	7a 81       	ldd	r23, Y+2	; 0x02
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	9c 81       	ldd	r25, Y+4	; 0x04
     de8:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
     dec:	69 83       	std	Y+1, r22	; 0x01
     dee:	7a 83       	std	Y+2, r23	; 0x02
     df0:	8b 83       	std	Y+3, r24	; 0x03
     df2:	9c 83       	std	Y+4, r25	; 0x04
     df4:	a5 01       	movw	r20, r10
     df6:	94 01       	movw	r18, r8
     df8:	c7 01       	movw	r24, r14
     dfa:	b6 01       	movw	r22, r12
     dfc:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     e00:	6b 01       	movw	r12, r22
     e02:	7c 01       	movw	r14, r24
     e04:	29 85       	ldd	r18, Y+9	; 0x09
     e06:	3a 85       	ldd	r19, Y+10	; 0x0a
     e08:	4b 85       	ldd	r20, Y+11	; 0x0b
     e0a:	5c 85       	ldd	r21, Y+12	; 0x0c
     e0c:	6d 81       	ldd	r22, Y+5	; 0x05
     e0e:	7e 81       	ldd	r23, Y+6	; 0x06
     e10:	8f 81       	ldd	r24, Y+7	; 0x07
     e12:	98 85       	ldd	r25, Y+8	; 0x08
     e14:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     e18:	9b 01       	movw	r18, r22
     e1a:	ac 01       	movw	r20, r24
     e1c:	c7 01       	movw	r24, r14
     e1e:	b6 01       	movw	r22, r12
     e20:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
     e24:	6b 01       	movw	r12, r22
     e26:	7c 01       	movw	r14, r24
     e28:	29 89       	ldd	r18, Y+17	; 0x11
     e2a:	3a 89       	ldd	r19, Y+18	; 0x12
     e2c:	4b 89       	ldd	r20, Y+19	; 0x13
     e2e:	5c 89       	ldd	r21, Y+20	; 0x14
     e30:	6d 85       	ldd	r22, Y+13	; 0x0d
     e32:	7e 85       	ldd	r23, Y+14	; 0x0e
     e34:	8f 85       	ldd	r24, Y+15	; 0x0f
     e36:	98 89       	ldd	r25, Y+16	; 0x10
     e38:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     e3c:	9b 01       	movw	r18, r22
     e3e:	ac 01       	movw	r20, r24
     e40:	c7 01       	movw	r24, r14
     e42:	b6 01       	movw	r22, r12
     e44:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
     e48:	6b 01       	movw	r12, r22
     e4a:	7c 01       	movw	r14, r24
     e4c:	2d 89       	ldd	r18, Y+21	; 0x15
     e4e:	3e 89       	ldd	r19, Y+22	; 0x16
     e50:	4f 89       	ldd	r20, Y+23	; 0x17
     e52:	58 8d       	ldd	r21, Y+24	; 0x18
     e54:	c3 01       	movw	r24, r6
     e56:	b2 01       	movw	r22, r4
     e58:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     e5c:	9b 01       	movw	r18, r22
     e5e:	ac 01       	movw	r20, r24
     e60:	c7 01       	movw	r24, r14
     e62:	b6 01       	movw	r22, r12
     e64:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
     e68:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <sqrt>
     e6c:	6b 01       	movw	r12, r22
     e6e:	7c 01       	movw	r14, r24
	q0 /= norm;
     e70:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     e74:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     e78:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     e7c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     e80:	a7 01       	movw	r20, r14
     e82:	96 01       	movw	r18, r12
     e84:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__divsf3>
     e88:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     e8c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     e90:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     e94:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	q1 /= norm;
     e98:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <q1>
     e9c:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <q1+0x1>
     ea0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <q1+0x2>
     ea4:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <q1+0x3>
     ea8:	a7 01       	movw	r20, r14
     eaa:	96 01       	movw	r18, r12
     eac:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__divsf3>
     eb0:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <q1>
     eb4:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <q1+0x1>
     eb8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <q1+0x2>
     ebc:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <q1+0x3>
	q2 /= norm;
     ec0:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <q2>
     ec4:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <q2+0x1>
     ec8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <q2+0x2>
     ecc:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <q2+0x3>
     ed0:	a7 01       	movw	r20, r14
     ed2:	96 01       	movw	r18, r12
     ed4:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__divsf3>
     ed8:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <q2>
     edc:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <q2+0x1>
     ee0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <q2+0x2>
     ee4:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <q2+0x3>
	q3 /= norm;
     ee8:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <q3>
     eec:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <q3+0x1>
     ef0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <q3+0x2>
     ef4:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <q3+0x3>
     ef8:	a7 01       	movw	r20, r14
     efa:	96 01       	movw	r18, r12
     efc:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__divsf3>
     f00:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <q3>
     f04:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <q3+0x1>
     f08:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <q3+0x2>
     f0c:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <q3+0x3>
}
     f10:	a4 96       	adiw	r28, 0x24	; 36
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	df 91       	pop	r29
     f1e:	cf 91       	pop	r28
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	df 90       	pop	r13
     f2a:	cf 90       	pop	r12
     f2c:	bf 90       	pop	r11
     f2e:	af 90       	pop	r10
     f30:	9f 90       	pop	r9
     f32:	8f 90       	pop	r8
     f34:	7f 90       	pop	r7
     f36:	6f 90       	pop	r6
     f38:	5f 90       	pop	r5
     f3a:	4f 90       	pop	r4
     f3c:	08 95       	ret

00000f3e <mpu6050_updateQuaternion>:

/*
 * update quaternion
 */
void mpu6050_updateQuaternion() {
     f3e:	4f 92       	push	r4
     f40:	5f 92       	push	r5
     f42:	6f 92       	push	r6
     f44:	7f 92       	push	r7
     f46:	af 92       	push	r10
     f48:	bf 92       	push	r11
     f4a:	cf 92       	push	r12
     f4c:	df 92       	push	r13
     f4e:	ef 92       	push	r14
     f50:	ff 92       	push	r15
     f52:	0f 93       	push	r16
     f54:	1f 93       	push	r17
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
     f5e:	2b 97       	sbiw	r28, 0x0b	; 11
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	cd bf       	out	0x3d, r28	; 61
	double gyrs = 0;
	double gzrs = 0;

	//get raw data
	while(1) {
		mpu6050_readBit(MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_DATA_RDY_BIT, (uint8_t *)buffer);
     f6a:	41 e6       	ldi	r20, 0x61	; 97
     f6c:	51 e0       	ldi	r21, 0x01	; 1
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	8a e3       	ldi	r24, 0x3A	; 58
     f72:	0e 94 c3 01 	call	0x386	; 0x386 <mpu6050_readBit>
		if(buffer[0])
     f76:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <buffer>
     f7a:	81 11       	cpse	r24, r1
     f7c:	05 c0       	rjmp	.+10     	; 0xf88 <mpu6050_updateQuaternion+0x4a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f7e:	25 e3       	ldi	r18, 0x35	; 53
     f80:	2a 95       	dec	r18
     f82:	f1 f7       	brne	.-4      	; 0xf80 <mpu6050_updateQuaternion+0x42>
     f84:	00 00       	nop
     f86:	f1 cf       	rjmp	.-30     	; 0xf6a <mpu6050_updateQuaternion+0x2c>
			break;
		_delay_us(10);
	}

	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
     f88:	41 e6       	ldi	r20, 0x61	; 97
     f8a:	51 e0       	ldi	r21, 0x01	; 1
     f8c:	6e e0       	ldi	r22, 0x0E	; 14
     f8e:	8b e3       	ldi	r24, 0x3B	; 59
     f90:	0e 94 37 01 	call	0x26e	; 0x26e <mpu6050_readBytes>
    ax = (((int16_t)buffer[0]) << 8) | buffer[1];
     f94:	e1 e6       	ldi	r30, 0x61	; 97
     f96:	f1 e0       	ldi	r31, 0x01	; 1
     f98:	80 81       	ld	r24, Z
     f9a:	61 81       	ldd	r22, Z+1	; 0x01
    ay = (((int16_t)buffer[2]) << 8) | buffer[3];
     f9c:	02 81       	ldd	r16, Z+2	; 0x02
     f9e:	33 81       	ldd	r19, Z+3	; 0x03
     fa0:	39 87       	std	Y+9, r19	; 0x09
    az = (((int16_t)buffer[4]) << 8) | buffer[5];
     fa2:	14 81       	ldd	r17, Z+4	; 0x04
     fa4:	95 81       	ldd	r25, Z+5	; 0x05
     fa6:	9a 87       	std	Y+10, r25	; 0x0a
    gx = (((int16_t)buffer[8]) << 8) | buffer[9];
     fa8:	60 84       	ldd	r6, Z+8	; 0x08
     faa:	71 84       	ldd	r7, Z+9	; 0x09
    gy = (((int16_t)buffer[10]) << 8) | buffer[11];
     fac:	52 84       	ldd	r5, Z+10	; 0x0a
     fae:	43 84       	ldd	r4, Z+11	; 0x0b
    gz = (((int16_t)buffer[12]) << 8) | buffer[13];
     fb0:	e4 84       	ldd	r14, Z+12	; 0x0c
     fb2:	f5 84       	ldd	r15, Z+13	; 0x0d
	gyrs = (double)(gy)/MPU6050_GGAIN*0.01745329; //degree to radians
	gzrs = (double)(gz)/MPU6050_GGAIN*0.01745329; //degree to radians
	#endif

    //compute data
    mpu6050_mahonyUpdate(gxrs, gyrs, gzrs, axg, ayg, azg);
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	78 2b       	or	r23, r24
     fb8:	07 2e       	mov	r0, r23
     fba:	00 0c       	add	r0, r0
     fbc:	88 0b       	sbc	r24, r24
     fbe:	99 0b       	sbc	r25, r25
     fc0:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__floatsisf>
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	40 e8       	ldi	r20, 0x80	; 128
     fca:	58 e3       	ldi	r21, 0x38	; 56
     fcc:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     fd0:	5b 01       	movw	r10, r22
     fd2:	6c 01       	movw	r12, r24
     fd4:	6f 2d       	mov	r22, r15
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	7e 29       	or	r23, r14
     fda:	63 5e       	subi	r22, 0xE3	; 227
     fdc:	7f 4f       	sbci	r23, 0xFF	; 255
     fde:	07 2e       	mov	r0, r23
     fe0:	00 0c       	add	r0, r0
     fe2:	88 0b       	sbc	r24, r24
     fe4:	99 0b       	sbc	r25, r25
     fe6:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__floatsisf>
     fea:	23 e3       	ldi	r18, 0x33	; 51
     fec:	33 e3       	ldi	r19, 0x33	; 51
     fee:	43 e8       	ldi	r20, 0x83	; 131
     ff0:	51 e4       	ldi	r21, 0x41	; 65
     ff2:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__divsf3>
     ff6:	24 e3       	ldi	r18, 0x34	; 52
     ff8:	3a ef       	ldi	r19, 0xFA	; 250
     ffa:	4e e8       	ldi	r20, 0x8E	; 142
     ffc:	5c e3       	ldi	r21, 0x3C	; 60
     ffe:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
    1002:	69 83       	std	Y+1, r22	; 0x01
    1004:	7a 83       	std	Y+2, r23	; 0x02
    1006:	8b 83       	std	Y+3, r24	; 0x03
    1008:	9c 83       	std	Y+4, r25	; 0x04
    100a:	64 2d       	mov	r22, r4
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	75 29       	or	r23, r5
    1010:	69 50       	subi	r22, 0x09	; 9
    1012:	71 09       	sbc	r23, r1
    1014:	07 2e       	mov	r0, r23
    1016:	00 0c       	add	r0, r0
    1018:	88 0b       	sbc	r24, r24
    101a:	99 0b       	sbc	r25, r25
    101c:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__floatsisf>
    1020:	23 e3       	ldi	r18, 0x33	; 51
    1022:	33 e3       	ldi	r19, 0x33	; 51
    1024:	43 e8       	ldi	r20, 0x83	; 131
    1026:	51 e4       	ldi	r21, 0x41	; 65
    1028:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__divsf3>
    102c:	24 e3       	ldi	r18, 0x34	; 52
    102e:	3a ef       	ldi	r19, 0xFA	; 250
    1030:	4e e8       	ldi	r20, 0x8E	; 142
    1032:	5c e3       	ldi	r21, 0x3C	; 60
    1034:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
    1038:	6d 83       	std	Y+5, r22	; 0x05
    103a:	7e 83       	std	Y+6, r23	; 0x06
    103c:	8f 83       	std	Y+7, r24	; 0x07
    103e:	98 87       	std	Y+8, r25	; 0x08
    1040:	67 2d       	mov	r22, r7
    1042:	70 e0       	ldi	r23, 0x00	; 0
    1044:	76 29       	or	r23, r6
    1046:	66 5d       	subi	r22, 0xD6	; 214
    1048:	7f 4f       	sbci	r23, 0xFF	; 255
    104a:	07 2e       	mov	r0, r23
    104c:	00 0c       	add	r0, r0
    104e:	88 0b       	sbc	r24, r24
    1050:	99 0b       	sbc	r25, r25
    1052:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__floatsisf>
    1056:	23 e3       	ldi	r18, 0x33	; 51
    1058:	33 e3       	ldi	r19, 0x33	; 51
    105a:	43 e8       	ldi	r20, 0x83	; 131
    105c:	51 e4       	ldi	r21, 0x41	; 65
    105e:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__divsf3>
    1062:	24 e3       	ldi	r18, 0x34	; 52
    1064:	3a ef       	ldi	r19, 0xFA	; 250
    1066:	4e e8       	ldi	r20, 0x8E	; 142
    1068:	5c e3       	ldi	r21, 0x3C	; 60
    106a:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
    106e:	2b 01       	movw	r4, r22
    1070:	3c 01       	movw	r6, r24
    1072:	2a 85       	ldd	r18, Y+10	; 0x0a
    1074:	62 2f       	mov	r22, r18
    1076:	70 e0       	ldi	r23, 0x00	; 0
    1078:	71 2b       	or	r23, r17
    107a:	07 2e       	mov	r0, r23
    107c:	00 0c       	add	r0, r0
    107e:	88 0b       	sbc	r24, r24
    1080:	99 0b       	sbc	r25, r25
    1082:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__floatsisf>
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	40 e8       	ldi	r20, 0x80	; 128
    108c:	58 e3       	ldi	r21, 0x38	; 56
    108e:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
    1092:	9f 93       	push	r25
    1094:	8f 93       	push	r24
    1096:	7f 93       	push	r23
    1098:	6f 93       	push	r22
    109a:	39 85       	ldd	r19, Y+9	; 0x09
    109c:	63 2f       	mov	r22, r19
    109e:	70 e0       	ldi	r23, 0x00	; 0
    10a0:	cb 01       	movw	r24, r22
    10a2:	90 2b       	or	r25, r16
    10a4:	9b 87       	std	Y+11, r25	; 0x0b
    10a6:	8a 87       	std	Y+10, r24	; 0x0a
    10a8:	bc 01       	movw	r22, r24
    10aa:	99 0f       	add	r25, r25
    10ac:	88 0b       	sbc	r24, r24
    10ae:	99 0b       	sbc	r25, r25
    10b0:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__floatsisf>
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	40 e8       	ldi	r20, 0x80	; 128
    10ba:	58 e3       	ldi	r21, 0x38	; 56
    10bc:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
    10c0:	9f 93       	push	r25
    10c2:	8f 93       	push	r24
    10c4:	7f 93       	push	r23
    10c6:	6f 93       	push	r22
    10c8:	e9 80       	ldd	r14, Y+1	; 0x01
    10ca:	fa 80       	ldd	r15, Y+2	; 0x02
    10cc:	0b 81       	ldd	r16, Y+3	; 0x03
    10ce:	1c 81       	ldd	r17, Y+4	; 0x04
    10d0:	2d 81       	ldd	r18, Y+5	; 0x05
    10d2:	3e 81       	ldd	r19, Y+6	; 0x06
    10d4:	4f 81       	ldd	r20, Y+7	; 0x07
    10d6:	58 85       	ldd	r21, Y+8	; 0x08
    10d8:	c3 01       	movw	r24, r6
    10da:	b2 01       	movw	r22, r4
    10dc:	0e 94 9b 02 	call	0x536	; 0x536 <mpu6050_mahonyUpdate>
}
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	f8 94       	cli
    10e4:	de bf       	out	0x3e, r29	; 62
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	cd bf       	out	0x3d, r28	; 61
    10ea:	2b 96       	adiw	r28, 0x0b	; 11
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
    10f6:	df 91       	pop	r29
    10f8:	cf 91       	pop	r28
    10fa:	1f 91       	pop	r17
    10fc:	0f 91       	pop	r16
    10fe:	ff 90       	pop	r15
    1100:	ef 90       	pop	r14
    1102:	df 90       	pop	r13
    1104:	cf 90       	pop	r12
    1106:	bf 90       	pop	r11
    1108:	af 90       	pop	r10
    110a:	7f 90       	pop	r7
    110c:	6f 90       	pop	r6
    110e:	5f 90       	pop	r5
    1110:	4f 90       	pop	r4
    1112:	08 95       	ret

00001114 <__vector_16>:

/*
 * update timer for attitude
 */
ISR(TIMER0_OVF_vect) {
    1114:	1f 92       	push	r1
    1116:	0f 92       	push	r0
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	0f 92       	push	r0
    111c:	11 24       	eor	r1, r1
    111e:	2f 93       	push	r18
    1120:	3f 93       	push	r19
    1122:	4f 93       	push	r20
    1124:	5f 93       	push	r21
    1126:	6f 93       	push	r22
    1128:	7f 93       	push	r23
    112a:	8f 93       	push	r24
    112c:	9f 93       	push	r25
    112e:	af 93       	push	r26
    1130:	bf 93       	push	r27
    1132:	ef 93       	push	r30
    1134:	ff 93       	push	r31
	mpu6050_updateQuaternion();
    1136:	0e 94 9f 07 	call	0xf3e	; 0xf3e <mpu6050_updateQuaternion>
}
    113a:	ff 91       	pop	r31
    113c:	ef 91       	pop	r30
    113e:	bf 91       	pop	r27
    1140:	af 91       	pop	r26
    1142:	9f 91       	pop	r25
    1144:	8f 91       	pop	r24
    1146:	7f 91       	pop	r23
    1148:	6f 91       	pop	r22
    114a:	5f 91       	pop	r21
    114c:	4f 91       	pop	r20
    114e:	3f 91       	pop	r19
    1150:	2f 91       	pop	r18
    1152:	0f 90       	pop	r0
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	0f 90       	pop	r0
    1158:	1f 90       	pop	r1
    115a:	18 95       	reti

0000115c <mpu6050_getQuaternion>:

/*
 * get quaternion
 */
void mpu6050_getQuaternion(double *qw, double *qx, double *qy, double *qz) {
    115c:	cf 92       	push	r12
    115e:	df 92       	push	r13
    1160:	ef 92       	push	r14
    1162:	ff 92       	push	r15
	*qw = q0;
    1164:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
    1168:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
    116c:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
    1170:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
    1174:	fc 01       	movw	r30, r24
    1176:	c0 82       	st	Z, r12
    1178:	d1 82       	std	Z+1, r13	; 0x01
    117a:	e2 82       	std	Z+2, r14	; 0x02
    117c:	f3 82       	std	Z+3, r15	; 0x03
	*qx = q1;
    117e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <q1>
    1182:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <q1+0x1>
    1186:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <q1+0x2>
    118a:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <q1+0x3>
    118e:	fb 01       	movw	r30, r22
    1190:	80 83       	st	Z, r24
    1192:	91 83       	std	Z+1, r25	; 0x01
    1194:	a2 83       	std	Z+2, r26	; 0x02
    1196:	b3 83       	std	Z+3, r27	; 0x03
	*qy = q2;
    1198:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <q2>
    119c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <q2+0x1>
    11a0:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <q2+0x2>
    11a4:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <q2+0x3>
    11a8:	fa 01       	movw	r30, r20
    11aa:	80 83       	st	Z, r24
    11ac:	91 83       	std	Z+1, r25	; 0x01
    11ae:	a2 83       	std	Z+2, r26	; 0x02
    11b0:	b3 83       	std	Z+3, r27	; 0x03
	*qz = q3;
    11b2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <q3>
    11b6:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <q3+0x1>
    11ba:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <q3+0x2>
    11be:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <q3+0x3>
    11c2:	f9 01       	movw	r30, r18
    11c4:	80 83       	st	Z, r24
    11c6:	91 83       	std	Z+1, r25	; 0x01
    11c8:	a2 83       	std	Z+2, r26	; 0x02
    11ca:	b3 83       	std	Z+3, r27	; 0x03
}
    11cc:	ff 90       	pop	r15
    11ce:	ef 90       	pop	r14
    11d0:	df 90       	pop	r13
    11d2:	cf 90       	pop	r12
    11d4:	08 95       	ret

000011d6 <mpu6050_getRollPitchYaw>:
 * aerospace sequence, to obtain sensor attitude:
 * 1. rotate around sensor Z plane by yaw
 * 2. rotate around sensor Y plane by pitch
 * 3. rotate around sensor X plane by roll
 */
void mpu6050_getRollPitchYaw(double *roll, double *pitch, double *yaw) {
    11d6:	2f 92       	push	r2
    11d8:	3f 92       	push	r3
    11da:	4f 92       	push	r4
    11dc:	5f 92       	push	r5
    11de:	6f 92       	push	r6
    11e0:	7f 92       	push	r7
    11e2:	8f 92       	push	r8
    11e4:	9f 92       	push	r9
    11e6:	af 92       	push	r10
    11e8:	bf 92       	push	r11
    11ea:	cf 92       	push	r12
    11ec:	df 92       	push	r13
    11ee:	ef 92       	push	r14
    11f0:	ff 92       	push	r15
    11f2:	0f 93       	push	r16
    11f4:	1f 93       	push	r17
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	62 97       	sbiw	r28, 0x12	; 18
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	f8 94       	cli
    1204:	de bf       	out	0x3e, r29	; 62
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	cd bf       	out	0x3d, r28	; 61
    120a:	1c 01       	movw	r2, r24
    120c:	8b 01       	movw	r16, r22
    120e:	5a 8b       	std	Y+18, r21	; 0x12
    1210:	49 8b       	std	Y+17, r20	; 0x11
	*yaw = atan2(2*q1*q2 - 2*q0*q3, 2*q0*q0 + 2*q1*q1 - 1);
    1212:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    1216:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    121a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    121e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    1222:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__data_start>
    1226:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__data_start+0x1>
    122a:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <__data_start+0x2>
    122e:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <__data_start+0x3>
    1232:	c0 90 18 01 	lds	r12, 0x0118	; 0x800118 <q1>
    1236:	d0 90 19 01 	lds	r13, 0x0119	; 0x800119 <q1+0x1>
    123a:	e0 90 1a 01 	lds	r14, 0x011A	; 0x80011a <q1+0x2>
    123e:	f0 90 1b 01 	lds	r15, 0x011B	; 0x80011b <q1+0x3>
    1242:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <q1>
    1246:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <q1+0x1>
    124a:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <q1+0x2>
    124e:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <q1+0x3>
    1252:	2d 83       	std	Y+5, r18	; 0x05
    1254:	3e 83       	std	Y+6, r19	; 0x06
    1256:	4f 83       	std	Y+7, r20	; 0x07
    1258:	58 87       	std	Y+8, r21	; 0x08
    125a:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <q1>
    125e:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <q1+0x1>
    1262:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <q1+0x2>
    1266:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <q1+0x3>
    126a:	29 83       	std	Y+1, r18	; 0x01
    126c:	3a 83       	std	Y+2, r19	; 0x02
    126e:	4b 83       	std	Y+3, r20	; 0x03
    1270:	5c 83       	std	Y+4, r21	; 0x04
    1272:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <q2>
    1276:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <q2+0x1>
    127a:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <q2+0x2>
    127e:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <q2+0x3>
    1282:	29 87       	std	Y+9, r18	; 0x09
    1284:	3a 87       	std	Y+10, r19	; 0x0a
    1286:	4b 87       	std	Y+11, r20	; 0x0b
    1288:	5c 87       	std	Y+12, r21	; 0x0c
    128a:	40 90 00 01 	lds	r4, 0x0100	; 0x800100 <__data_start>
    128e:	50 90 01 01 	lds	r5, 0x0101	; 0x800101 <__data_start+0x1>
    1292:	60 90 02 01 	lds	r6, 0x0102	; 0x800102 <__data_start+0x2>
    1296:	70 90 03 01 	lds	r7, 0x0103	; 0x800103 <__data_start+0x3>
    129a:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <q3>
    129e:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <q3+0x1>
    12a2:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <q3+0x2>
    12a6:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <q3+0x3>
    12aa:	2d 87       	std	Y+13, r18	; 0x0d
    12ac:	3e 87       	std	Y+14, r19	; 0x0e
    12ae:	4f 87       	std	Y+15, r20	; 0x0f
    12b0:	58 8b       	std	Y+16, r21	; 0x10
    12b2:	9b 01       	movw	r18, r22
    12b4:	ac 01       	movw	r20, r24
    12b6:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
    12ba:	a5 01       	movw	r20, r10
    12bc:	94 01       	movw	r18, r8
    12be:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
    12c2:	4b 01       	movw	r8, r22
    12c4:	5c 01       	movw	r10, r24
    12c6:	a7 01       	movw	r20, r14
    12c8:	96 01       	movw	r18, r12
    12ca:	c7 01       	movw	r24, r14
    12cc:	b6 01       	movw	r22, r12
    12ce:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
    12d2:	2d 81       	ldd	r18, Y+5	; 0x05
    12d4:	3e 81       	ldd	r19, Y+6	; 0x06
    12d6:	4f 81       	ldd	r20, Y+7	; 0x07
    12d8:	58 85       	ldd	r21, Y+8	; 0x08
    12da:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
    12de:	9b 01       	movw	r18, r22
    12e0:	ac 01       	movw	r20, r24
    12e2:	c5 01       	movw	r24, r10
    12e4:	b4 01       	movw	r22, r8
    12e6:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	40 e8       	ldi	r20, 0x80	; 128
    12f0:	5f e3       	ldi	r21, 0x3F	; 63
    12f2:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__subsf3>
    12f6:	6b 01       	movw	r12, r22
    12f8:	7c 01       	movw	r14, r24
    12fa:	29 81       	ldd	r18, Y+1	; 0x01
    12fc:	3a 81       	ldd	r19, Y+2	; 0x02
    12fe:	4b 81       	ldd	r20, Y+3	; 0x03
    1300:	5c 81       	ldd	r21, Y+4	; 0x04
    1302:	ca 01       	movw	r24, r20
    1304:	b9 01       	movw	r22, r18
    1306:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
    130a:	29 85       	ldd	r18, Y+9	; 0x09
    130c:	3a 85       	ldd	r19, Y+10	; 0x0a
    130e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1310:	5c 85       	ldd	r21, Y+12	; 0x0c
    1312:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
    1316:	4b 01       	movw	r8, r22
    1318:	5c 01       	movw	r10, r24
    131a:	a3 01       	movw	r20, r6
    131c:	92 01       	movw	r18, r4
    131e:	c3 01       	movw	r24, r6
    1320:	b2 01       	movw	r22, r4
    1322:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
    1326:	2d 85       	ldd	r18, Y+13	; 0x0d
    1328:	3e 85       	ldd	r19, Y+14	; 0x0e
    132a:	4f 85       	ldd	r20, Y+15	; 0x0f
    132c:	58 89       	ldd	r21, Y+16	; 0x10
    132e:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
    1332:	9b 01       	movw	r18, r22
    1334:	ac 01       	movw	r20, r24
    1336:	c5 01       	movw	r24, r10
    1338:	b4 01       	movw	r22, r8
    133a:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__subsf3>
    133e:	a7 01       	movw	r20, r14
    1340:	96 01       	movw	r18, r12
    1342:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <atan2>
    1346:	e9 89       	ldd	r30, Y+17	; 0x11
    1348:	fa 89       	ldd	r31, Y+18	; 0x12
    134a:	60 83       	st	Z, r22
    134c:	71 83       	std	Z+1, r23	; 0x01
    134e:	82 83       	std	Z+2, r24	; 0x02
    1350:	93 83       	std	Z+3, r25	; 0x03
	*pitch = -asin(2*q1*q3 + 2*q0*q2);
    1352:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <q1>
    1356:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <q1+0x1>
    135a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <q1+0x2>
    135e:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <q1+0x3>
    1362:	80 90 10 01 	lds	r8, 0x0110	; 0x800110 <q3>
    1366:	90 90 11 01 	lds	r9, 0x0111	; 0x800111 <q3+0x1>
    136a:	a0 90 12 01 	lds	r10, 0x0112	; 0x800112 <q3+0x2>
    136e:	b0 90 13 01 	lds	r11, 0x0113	; 0x800113 <q3+0x3>
    1372:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
    1376:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
    137a:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
    137e:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
    1382:	40 90 14 01 	lds	r4, 0x0114	; 0x800114 <q2>
    1386:	50 90 15 01 	lds	r5, 0x0115	; 0x800115 <q2+0x1>
    138a:	60 90 16 01 	lds	r6, 0x0116	; 0x800116 <q2+0x2>
    138e:	70 90 17 01 	lds	r7, 0x0117	; 0x800117 <q2+0x3>
    1392:	9b 01       	movw	r18, r22
    1394:	ac 01       	movw	r20, r24
    1396:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
    139a:	a5 01       	movw	r20, r10
    139c:	94 01       	movw	r18, r8
    139e:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
    13a2:	4b 01       	movw	r8, r22
    13a4:	5c 01       	movw	r10, r24
    13a6:	a7 01       	movw	r20, r14
    13a8:	96 01       	movw	r18, r12
    13aa:	c7 01       	movw	r24, r14
    13ac:	b6 01       	movw	r22, r12
    13ae:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
    13b2:	a3 01       	movw	r20, r6
    13b4:	92 01       	movw	r18, r4
    13b6:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
    13ba:	9b 01       	movw	r18, r22
    13bc:	ac 01       	movw	r20, r24
    13be:	c5 01       	movw	r24, r10
    13c0:	b4 01       	movw	r22, r8
    13c2:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
    13c6:	0e 94 46 0c 	call	0x188c	; 0x188c <asin>
    13ca:	dc 01       	movw	r26, r24
    13cc:	cb 01       	movw	r24, r22
    13ce:	b0 58       	subi	r27, 0x80	; 128
    13d0:	f8 01       	movw	r30, r16
    13d2:	80 83       	st	Z, r24
    13d4:	91 83       	std	Z+1, r25	; 0x01
    13d6:	a2 83       	std	Z+2, r26	; 0x02
    13d8:	b3 83       	std	Z+3, r27	; 0x03
	*roll = atan2(2*q2*q3 - 2*q0*q1, 2*q0*q0 + 2*q3*q3 - 1);
    13da:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    13de:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    13e2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    13e6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    13ea:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__data_start>
    13ee:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__data_start+0x1>
    13f2:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <__data_start+0x2>
    13f6:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <__data_start+0x3>
    13fa:	c0 90 10 01 	lds	r12, 0x0110	; 0x800110 <q3>
    13fe:	d0 90 11 01 	lds	r13, 0x0111	; 0x800111 <q3+0x1>
    1402:	e0 90 12 01 	lds	r14, 0x0112	; 0x800112 <q3+0x2>
    1406:	f0 90 13 01 	lds	r15, 0x0113	; 0x800113 <q3+0x3>
    140a:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <q3>
    140e:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <q3+0x1>
    1412:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <q3+0x2>
    1416:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <q3+0x3>
    141a:	2d 83       	std	Y+5, r18	; 0x05
    141c:	3e 83       	std	Y+6, r19	; 0x06
    141e:	4f 83       	std	Y+7, r20	; 0x07
    1420:	58 87       	std	Y+8, r21	; 0x08
    1422:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <q2>
    1426:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <q2+0x1>
    142a:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <q2+0x2>
    142e:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <q2+0x3>
    1432:	29 83       	std	Y+1, r18	; 0x01
    1434:	3a 83       	std	Y+2, r19	; 0x02
    1436:	4b 83       	std	Y+3, r20	; 0x03
    1438:	5c 83       	std	Y+4, r21	; 0x04
    143a:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <q3>
    143e:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <q3+0x1>
    1442:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <q3+0x2>
    1446:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <q3+0x3>
    144a:	29 87       	std	Y+9, r18	; 0x09
    144c:	3a 87       	std	Y+10, r19	; 0x0a
    144e:	4b 87       	std	Y+11, r20	; 0x0b
    1450:	5c 87       	std	Y+12, r21	; 0x0c
    1452:	40 90 00 01 	lds	r4, 0x0100	; 0x800100 <__data_start>
    1456:	50 90 01 01 	lds	r5, 0x0101	; 0x800101 <__data_start+0x1>
    145a:	60 90 02 01 	lds	r6, 0x0102	; 0x800102 <__data_start+0x2>
    145e:	70 90 03 01 	lds	r7, 0x0103	; 0x800103 <__data_start+0x3>
    1462:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <q1>
    1466:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <q1+0x1>
    146a:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <q1+0x2>
    146e:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <q1+0x3>
    1472:	2d 87       	std	Y+13, r18	; 0x0d
    1474:	3e 87       	std	Y+14, r19	; 0x0e
    1476:	4f 87       	std	Y+15, r20	; 0x0f
    1478:	58 8b       	std	Y+16, r21	; 0x10
    147a:	9b 01       	movw	r18, r22
    147c:	ac 01       	movw	r20, r24
    147e:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
    1482:	a5 01       	movw	r20, r10
    1484:	94 01       	movw	r18, r8
    1486:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
    148a:	4b 01       	movw	r8, r22
    148c:	5c 01       	movw	r10, r24
    148e:	a7 01       	movw	r20, r14
    1490:	96 01       	movw	r18, r12
    1492:	c7 01       	movw	r24, r14
    1494:	b6 01       	movw	r22, r12
    1496:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
    149a:	2d 81       	ldd	r18, Y+5	; 0x05
    149c:	3e 81       	ldd	r19, Y+6	; 0x06
    149e:	4f 81       	ldd	r20, Y+7	; 0x07
    14a0:	58 85       	ldd	r21, Y+8	; 0x08
    14a2:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
    14a6:	9b 01       	movw	r18, r22
    14a8:	ac 01       	movw	r20, r24
    14aa:	c5 01       	movw	r24, r10
    14ac:	b4 01       	movw	r22, r8
    14ae:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	40 e8       	ldi	r20, 0x80	; 128
    14b8:	5f e3       	ldi	r21, 0x3F	; 63
    14ba:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__subsf3>
    14be:	6b 01       	movw	r12, r22
    14c0:	7c 01       	movw	r14, r24
    14c2:	29 81       	ldd	r18, Y+1	; 0x01
    14c4:	3a 81       	ldd	r19, Y+2	; 0x02
    14c6:	4b 81       	ldd	r20, Y+3	; 0x03
    14c8:	5c 81       	ldd	r21, Y+4	; 0x04
    14ca:	ca 01       	movw	r24, r20
    14cc:	b9 01       	movw	r22, r18
    14ce:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
    14d2:	29 85       	ldd	r18, Y+9	; 0x09
    14d4:	3a 85       	ldd	r19, Y+10	; 0x0a
    14d6:	4b 85       	ldd	r20, Y+11	; 0x0b
    14d8:	5c 85       	ldd	r21, Y+12	; 0x0c
    14da:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
    14de:	4b 01       	movw	r8, r22
    14e0:	5c 01       	movw	r10, r24
    14e2:	a3 01       	movw	r20, r6
    14e4:	92 01       	movw	r18, r4
    14e6:	c3 01       	movw	r24, r6
    14e8:	b2 01       	movw	r22, r4
    14ea:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
    14ee:	2d 85       	ldd	r18, Y+13	; 0x0d
    14f0:	3e 85       	ldd	r19, Y+14	; 0x0e
    14f2:	4f 85       	ldd	r20, Y+15	; 0x0f
    14f4:	58 89       	ldd	r21, Y+16	; 0x10
    14f6:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
    14fa:	9b 01       	movw	r18, r22
    14fc:	ac 01       	movw	r20, r24
    14fe:	c5 01       	movw	r24, r10
    1500:	b4 01       	movw	r22, r8
    1502:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__subsf3>
    1506:	a7 01       	movw	r20, r14
    1508:	96 01       	movw	r18, r12
    150a:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <atan2>
    150e:	f1 01       	movw	r30, r2
    1510:	60 83       	st	Z, r22
    1512:	71 83       	std	Z+1, r23	; 0x01
    1514:	82 83       	std	Z+2, r24	; 0x02
    1516:	93 83       	std	Z+3, r25	; 0x03
}
    1518:	62 96       	adiw	r28, 0x12	; 18
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	f8 94       	cli
    151e:	de bf       	out	0x3e, r29	; 62
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	cd bf       	out	0x3d, r28	; 61
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	1f 91       	pop	r17
    152a:	0f 91       	pop	r16
    152c:	ff 90       	pop	r15
    152e:	ef 90       	pop	r14
    1530:	df 90       	pop	r13
    1532:	cf 90       	pop	r12
    1534:	bf 90       	pop	r11
    1536:	af 90       	pop	r10
    1538:	9f 90       	pop	r9
    153a:	8f 90       	pop	r8
    153c:	7f 90       	pop	r7
    153e:	6f 90       	pop	r6
    1540:	5f 90       	pop	r5
    1542:	4f 90       	pop	r4
    1544:	3f 90       	pop	r3
    1546:	2f 90       	pop	r2
    1548:	08 95       	ret

0000154a <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    154a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    154e:	88 e4       	ldi	r24, 0x48	; 72
    1550:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1554:	08 95       	ret

00001556 <i2c_start>:
    1556:	94 ea       	ldi	r25, 0xA4	; 164
    1558:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    155c:	4f ef       	ldi	r20, 0xFF	; 255
    155e:	50 e0       	ldi	r21, 0x00	; 0
    1560:	60 e0       	ldi	r22, 0x00	; 0
    1562:	70 e0       	ldi	r23, 0x00	; 0
    1564:	ec eb       	ldi	r30, 0xBC	; 188
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	90 81       	ld	r25, Z
    156a:	99 23       	and	r25, r25
    156c:	34 f0       	brlt	.+12     	; 0x157a <i2c_start+0x24>
    156e:	41 50       	subi	r20, 0x01	; 1
    1570:	51 09       	sbc	r21, r1
    1572:	61 09       	sbc	r22, r1
    1574:	71 09       	sbc	r23, r1
    1576:	c0 f7       	brcc	.-16     	; 0x1568 <i2c_start+0x12>
    1578:	04 c0       	rjmp	.+8      	; 0x1582 <i2c_start+0x2c>
    157a:	45 2b       	or	r20, r21
    157c:	46 2b       	or	r20, r22
    157e:	47 2b       	or	r20, r23
    1580:	41 f1       	breq	.+80     	; 0x15d2 <i2c_start+0x7c>
    1582:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1586:	98 7f       	andi	r25, 0xF8	; 248
    1588:	98 30       	cpi	r25, 0x08	; 8
    158a:	11 f0       	breq	.+4      	; 0x1590 <i2c_start+0x3a>
    158c:	90 31       	cpi	r25, 0x10	; 16
    158e:	19 f5       	brne	.+70     	; 0x15d6 <i2c_start+0x80>
    1590:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1594:	84 e8       	ldi	r24, 0x84	; 132
    1596:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    159a:	8f ef       	ldi	r24, 0xFF	; 255
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	a0 e0       	ldi	r26, 0x00	; 0
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	ec eb       	ldi	r30, 0xBC	; 188
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	20 81       	ld	r18, Z
    15a8:	22 23       	and	r18, r18
    15aa:	2c f0       	brlt	.+10     	; 0x15b6 <i2c_start+0x60>
    15ac:	01 97       	sbiw	r24, 0x01	; 1
    15ae:	a1 09       	sbc	r26, r1
    15b0:	b1 09       	sbc	r27, r1
    15b2:	c8 f7       	brcc	.-14     	; 0x15a6 <i2c_start+0x50>
    15b4:	04 c0       	rjmp	.+8      	; 0x15be <i2c_start+0x68>
    15b6:	89 2b       	or	r24, r25
    15b8:	8a 2b       	or	r24, r26
    15ba:	8b 2b       	or	r24, r27
    15bc:	71 f0       	breq	.+28     	; 0x15da <i2c_start+0x84>
    15be:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    15c2:	98 7f       	andi	r25, 0xF8	; 248
    15c4:	98 31       	cpi	r25, 0x18	; 24
    15c6:	59 f0       	breq	.+22     	; 0x15de <i2c_start+0x88>
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 34       	cpi	r25, 0x40	; 64
    15cc:	49 f4       	brne	.+18     	; 0x15e0 <i2c_start+0x8a>
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	08 95       	ret
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	08 95       	ret
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	08 95       	ret
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	08 95       	ret
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	08 95       	ret

000015e2 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    15e2:	84 e9       	ldi	r24, 0x94	; 148
    15e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	ec eb       	ldi	r30, 0xBC	; 188
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	20 81       	ld	r18, Z
    15f2:	24 ff       	sbrs	r18, 4
    15f4:	05 c0       	rjmp	.+10     	; 0x1600 <i2c_stop+0x1e>
    15f6:	01 96       	adiw	r24, 0x01	; 1
    15f8:	81 15       	cp	r24, r1
    15fa:	21 e0       	ldi	r18, 0x01	; 1
    15fc:	92 07       	cpc	r25, r18
    15fe:	c1 f7       	brne	.-16     	; 0x15f0 <i2c_stop+0xe>
    1600:	08 95       	ret

00001602 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1602:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    1606:	84 e8       	ldi	r24, 0x84	; 132
    1608:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    160c:	8f ef       	ldi	r24, 0xFF	; 255
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	a0 e0       	ldi	r26, 0x00	; 0
    1612:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    1614:	ec eb       	ldi	r30, 0xBC	; 188
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	20 81       	ld	r18, Z
    161a:	22 23       	and	r18, r18
    161c:	2c f0       	brlt	.+10     	; 0x1628 <i2c_write+0x26>
    161e:	01 97       	sbiw	r24, 0x01	; 1
    1620:	a1 09       	sbc	r26, r1
    1622:	b1 09       	sbc	r27, r1
    1624:	c8 f7       	brcc	.-14     	; 0x1618 <i2c_write+0x16>
    1626:	04 c0       	rjmp	.+8      	; 0x1630 <i2c_write+0x2e>
	if(i2c_timer == 0)
    1628:	89 2b       	or	r24, r25
    162a:	8a 2b       	or	r24, r26
    162c:	8b 2b       	or	r24, r27
    162e:	41 f0       	breq	.+16     	; 0x1640 <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1630:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    1634:	98 7f       	andi	r25, 0xF8	; 248
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	98 32       	cpi	r25, 0x28	; 40
    163a:	19 f4       	brne	.+6      	; 0x1642 <i2c_write+0x40>
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	08 95       	ret
    1640:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    1642:	08 95       	ret

00001644 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    1644:	84 ec       	ldi	r24, 0xC4	; 196
    1646:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_timer = I2C_TIMER_DELAY;
    164a:	8f ef       	ldi	r24, 0xFF	; 255
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	a0 e0       	ldi	r26, 0x00	; 0
    1650:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    1652:	ec eb       	ldi	r30, 0xBC	; 188
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	20 81       	ld	r18, Z
    1658:	22 23       	and	r18, r18
    165a:	2c f0       	brlt	.+10     	; 0x1666 <i2c_readAck+0x22>
    165c:	01 97       	sbiw	r24, 0x01	; 1
    165e:	a1 09       	sbc	r26, r1
    1660:	b1 09       	sbc	r27, r1
    1662:	c8 f7       	brcc	.-14     	; 0x1656 <i2c_readAck+0x12>
    1664:	04 c0       	rjmp	.+8      	; 0x166e <i2c_readAck+0x2a>
	if(i2c_timer == 0)
    1666:	89 2b       	or	r24, r25
    1668:	8a 2b       	or	r24, r26
    166a:	8b 2b       	or	r24, r27
    166c:	19 f0       	breq	.+6      	; 0x1674 <i2c_readAck+0x30>
		return 0;

    return TWDR;
    166e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1672:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    1674:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    1676:	08 95       	ret

00001678 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    1678:	84 e8       	ldi	r24, 0x84	; 132
    167a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_timer = I2C_TIMER_DELAY;
    167e:	8f ef       	ldi	r24, 0xFF	; 255
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	a0 e0       	ldi	r26, 0x00	; 0
    1684:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    1686:	ec eb       	ldi	r30, 0xBC	; 188
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	20 81       	ld	r18, Z
    168c:	22 23       	and	r18, r18
    168e:	2c f0       	brlt	.+10     	; 0x169a <i2c_readNak+0x22>
    1690:	01 97       	sbiw	r24, 0x01	; 1
    1692:	a1 09       	sbc	r26, r1
    1694:	b1 09       	sbc	r27, r1
    1696:	c8 f7       	brcc	.-14     	; 0x168a <i2c_readNak+0x12>
    1698:	04 c0       	rjmp	.+8      	; 0x16a2 <i2c_readNak+0x2a>
	if(i2c_timer == 0)
    169a:	89 2b       	or	r24, r25
    169c:	8a 2b       	or	r24, r26
    169e:	8b 2b       	or	r24, r27
    16a0:	19 f0       	breq	.+6      	; 0x16a8 <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
    16a2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    16a6:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    16a8:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    16aa:	08 95       	ret

000016ac <__vector_18>:
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    
    return (UART_LastRxError << 8) + data;

}/* uart_getc */
    16ac:	1f 92       	push	r1
    16ae:	0f 92       	push	r0
    16b0:	0f b6       	in	r0, 0x3f	; 63
    16b2:	0f 92       	push	r0
    16b4:	11 24       	eor	r1, r1
    16b6:	2f 93       	push	r18
    16b8:	8f 93       	push	r24
    16ba:	9f 93       	push	r25
    16bc:	ef 93       	push	r30
    16be:	ff 93       	push	r31
    16c0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    16c4:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    16c8:	88 71       	andi	r24, 0x18	; 24
    16ca:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <UART_RxHead>
    16ce:	ef 5f       	subi	r30, 0xFF	; 255
    16d0:	ef 71       	andi	r30, 0x1F	; 31
    16d2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <UART_RxTail>
    16d6:	e9 17       	cp	r30, r25
    16d8:	39 f0       	breq	.+14     	; 0x16e8 <__vector_18+0x3c>
    16da:	e0 93 1e 01 	sts	0x011E, r30	; 0x80011e <UART_RxHead>
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	ef 5d       	subi	r30, 0xDF	; 223
    16e2:	fe 4f       	sbci	r31, 0xFE	; 254
    16e4:	20 83       	st	Z, r18
    16e6:	01 c0       	rjmp	.+2      	; 0x16ea <__vector_18+0x3e>
    16e8:	82 e0       	ldi	r24, 0x02	; 2
    16ea:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <UART_LastRxError>
    16ee:	ff 91       	pop	r31
    16f0:	ef 91       	pop	r30
    16f2:	9f 91       	pop	r25
    16f4:	8f 91       	pop	r24
    16f6:	2f 91       	pop	r18
    16f8:	0f 90       	pop	r0
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	0f 90       	pop	r0
    16fe:	1f 90       	pop	r1
    1700:	18 95       	reti

00001702 <__vector_19>:
    1702:	1f 92       	push	r1
    1704:	0f 92       	push	r0
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	0f 92       	push	r0
    170a:	11 24       	eor	r1, r1
    170c:	8f 93       	push	r24
    170e:	9f 93       	push	r25
    1710:	ef 93       	push	r30
    1712:	ff 93       	push	r31
    1714:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <UART_TxHead>
    1718:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <UART_TxTail>
    171c:	98 17       	cp	r25, r24
    171e:	69 f0       	breq	.+26     	; 0x173a <__vector_19+0x38>
    1720:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <UART_TxTail>
    1724:	ef 5f       	subi	r30, 0xFF	; 255
    1726:	ef 71       	andi	r30, 0x1F	; 31
    1728:	e0 93 1f 01 	sts	0x011F, r30	; 0x80011f <UART_TxTail>
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	ef 5b       	subi	r30, 0xBF	; 191
    1730:	fe 4f       	sbci	r31, 0xFE	; 254
    1732:	80 81       	ld	r24, Z
    1734:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1738:	05 c0       	rjmp	.+10     	; 0x1744 <__vector_19+0x42>
    173a:	e1 ec       	ldi	r30, 0xC1	; 193
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	8f 7d       	andi	r24, 0xDF	; 223
    1742:	80 83       	st	Z, r24
    1744:	ff 91       	pop	r31
    1746:	ef 91       	pop	r30
    1748:	9f 91       	pop	r25
    174a:	8f 91       	pop	r24
    174c:	0f 90       	pop	r0
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	0f 90       	pop	r0
    1752:	1f 90       	pop	r1
    1754:	18 95       	reti

00001756 <uart_init>:
    1756:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <UART_TxHead>
    175a:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <UART_TxTail>
    175e:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <UART_RxHead>
    1762:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <UART_RxTail>
    1766:	99 23       	and	r25, r25
    1768:	24 f4       	brge	.+8      	; 0x1772 <uart_init+0x1c>
    176a:	22 e0       	ldi	r18, 0x02	; 2
    176c:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1770:	9f 77       	andi	r25, 0x7F	; 127
    1772:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1776:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    177a:	88 e9       	ldi	r24, 0x98	; 152
    177c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1780:	86 e0       	ldi	r24, 0x06	; 6
    1782:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    1786:	08 95       	ret

00001788 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    1788:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <UART_TxHead>
    178c:	2f 5f       	subi	r18, 0xFF	; 255
    178e:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
    1790:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <UART_TxTail>
    1794:	29 17       	cp	r18, r25
    1796:	e1 f3       	breq	.-8      	; 0x1790 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    1798:	e2 2f       	mov	r30, r18
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	ef 5b       	subi	r30, 0xBF	; 191
    179e:	fe 4f       	sbci	r31, 0xFE	; 254
    17a0:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    17a2:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    17a6:	e1 ec       	ldi	r30, 0xC1	; 193
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	80 62       	ori	r24, 0x20	; 32
    17ae:	80 83       	st	Z, r24
    17b0:	08 95       	ret

000017b2 <__subsf3>:
    17b2:	50 58       	subi	r21, 0x80	; 128

000017b4 <__addsf3>:
    17b4:	bb 27       	eor	r27, r27
    17b6:	aa 27       	eor	r26, r26
    17b8:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__addsf3x>
    17bc:	0c 94 1d 0e 	jmp	0x1c3a	; 0x1c3a <__fp_round>
    17c0:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <__fp_pscA>
    17c4:	38 f0       	brcs	.+14     	; 0x17d4 <__addsf3+0x20>
    17c6:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__fp_pscB>
    17ca:	20 f0       	brcs	.+8      	; 0x17d4 <__addsf3+0x20>
    17cc:	39 f4       	brne	.+14     	; 0x17dc <__addsf3+0x28>
    17ce:	9f 3f       	cpi	r25, 0xFF	; 255
    17d0:	19 f4       	brne	.+6      	; 0x17d8 <__addsf3+0x24>
    17d2:	26 f4       	brtc	.+8      	; 0x17dc <__addsf3+0x28>
    17d4:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <__fp_nan>
    17d8:	0e f4       	brtc	.+2      	; 0x17dc <__addsf3+0x28>
    17da:	e0 95       	com	r30
    17dc:	e7 fb       	bst	r30, 7
    17de:	0c 94 cb 0d 	jmp	0x1b96	; 0x1b96 <__fp_inf>

000017e2 <__addsf3x>:
    17e2:	e9 2f       	mov	r30, r25
    17e4:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <__fp_split3>
    17e8:	58 f3       	brcs	.-42     	; 0x17c0 <__addsf3+0xc>
    17ea:	ba 17       	cp	r27, r26
    17ec:	62 07       	cpc	r22, r18
    17ee:	73 07       	cpc	r23, r19
    17f0:	84 07       	cpc	r24, r20
    17f2:	95 07       	cpc	r25, r21
    17f4:	20 f0       	brcs	.+8      	; 0x17fe <__addsf3x+0x1c>
    17f6:	79 f4       	brne	.+30     	; 0x1816 <__addsf3x+0x34>
    17f8:	a6 f5       	brtc	.+104    	; 0x1862 <__addsf3x+0x80>
    17fa:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__fp_zero>
    17fe:	0e f4       	brtc	.+2      	; 0x1802 <__addsf3x+0x20>
    1800:	e0 95       	com	r30
    1802:	0b 2e       	mov	r0, r27
    1804:	ba 2f       	mov	r27, r26
    1806:	a0 2d       	mov	r26, r0
    1808:	0b 01       	movw	r0, r22
    180a:	b9 01       	movw	r22, r18
    180c:	90 01       	movw	r18, r0
    180e:	0c 01       	movw	r0, r24
    1810:	ca 01       	movw	r24, r20
    1812:	a0 01       	movw	r20, r0
    1814:	11 24       	eor	r1, r1
    1816:	ff 27       	eor	r31, r31
    1818:	59 1b       	sub	r21, r25
    181a:	99 f0       	breq	.+38     	; 0x1842 <__addsf3x+0x60>
    181c:	59 3f       	cpi	r21, 0xF9	; 249
    181e:	50 f4       	brcc	.+20     	; 0x1834 <__addsf3x+0x52>
    1820:	50 3e       	cpi	r21, 0xE0	; 224
    1822:	68 f1       	brcs	.+90     	; 0x187e <__addsf3x+0x9c>
    1824:	1a 16       	cp	r1, r26
    1826:	f0 40       	sbci	r31, 0x00	; 0
    1828:	a2 2f       	mov	r26, r18
    182a:	23 2f       	mov	r18, r19
    182c:	34 2f       	mov	r19, r20
    182e:	44 27       	eor	r20, r20
    1830:	58 5f       	subi	r21, 0xF8	; 248
    1832:	f3 cf       	rjmp	.-26     	; 0x181a <__addsf3x+0x38>
    1834:	46 95       	lsr	r20
    1836:	37 95       	ror	r19
    1838:	27 95       	ror	r18
    183a:	a7 95       	ror	r26
    183c:	f0 40       	sbci	r31, 0x00	; 0
    183e:	53 95       	inc	r21
    1840:	c9 f7       	brne	.-14     	; 0x1834 <__addsf3x+0x52>
    1842:	7e f4       	brtc	.+30     	; 0x1862 <__addsf3x+0x80>
    1844:	1f 16       	cp	r1, r31
    1846:	ba 0b       	sbc	r27, r26
    1848:	62 0b       	sbc	r22, r18
    184a:	73 0b       	sbc	r23, r19
    184c:	84 0b       	sbc	r24, r20
    184e:	ba f0       	brmi	.+46     	; 0x187e <__addsf3x+0x9c>
    1850:	91 50       	subi	r25, 0x01	; 1
    1852:	a1 f0       	breq	.+40     	; 0x187c <__addsf3x+0x9a>
    1854:	ff 0f       	add	r31, r31
    1856:	bb 1f       	adc	r27, r27
    1858:	66 1f       	adc	r22, r22
    185a:	77 1f       	adc	r23, r23
    185c:	88 1f       	adc	r24, r24
    185e:	c2 f7       	brpl	.-16     	; 0x1850 <__addsf3x+0x6e>
    1860:	0e c0       	rjmp	.+28     	; 0x187e <__addsf3x+0x9c>
    1862:	ba 0f       	add	r27, r26
    1864:	62 1f       	adc	r22, r18
    1866:	73 1f       	adc	r23, r19
    1868:	84 1f       	adc	r24, r20
    186a:	48 f4       	brcc	.+18     	; 0x187e <__addsf3x+0x9c>
    186c:	87 95       	ror	r24
    186e:	77 95       	ror	r23
    1870:	67 95       	ror	r22
    1872:	b7 95       	ror	r27
    1874:	f7 95       	ror	r31
    1876:	9e 3f       	cpi	r25, 0xFE	; 254
    1878:	08 f0       	brcs	.+2      	; 0x187c <__addsf3x+0x9a>
    187a:	b0 cf       	rjmp	.-160    	; 0x17dc <__addsf3+0x28>
    187c:	93 95       	inc	r25
    187e:	88 0f       	add	r24, r24
    1880:	08 f0       	brcs	.+2      	; 0x1884 <__addsf3x+0xa2>
    1882:	99 27       	eor	r25, r25
    1884:	ee 0f       	add	r30, r30
    1886:	97 95       	ror	r25
    1888:	87 95       	ror	r24
    188a:	08 95       	ret

0000188c <asin>:
    188c:	9f 93       	push	r25
    188e:	9f 77       	andi	r25, 0x7F	; 127
    1890:	ee e3       	ldi	r30, 0x3E	; 62
    1892:	89 37       	cpi	r24, 0x79	; 121
    1894:	9e 07       	cpc	r25, r30
    1896:	28 f4       	brcc	.+10     	; 0x18a2 <asin+0x16>
    1898:	e8 e6       	ldi	r30, 0x68	; 104
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <__fp_powsodd>
    18a0:	0c c0       	rjmp	.+24     	; 0x18ba <asin+0x2e>
    18a2:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__fp_arccos>
    18a6:	90 58       	subi	r25, 0x80	; 128
    18a8:	a2 ea       	ldi	r26, 0xA2	; 162
    18aa:	2a ed       	ldi	r18, 0xDA	; 218
    18ac:	3f e0       	ldi	r19, 0x0F	; 15
    18ae:	49 ec       	ldi	r20, 0xC9	; 201
    18b0:	5f e3       	ldi	r21, 0x3F	; 63
    18b2:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__addsf3x>
    18b6:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__fp_round>
    18ba:	0f 90       	pop	r0
    18bc:	07 fc       	sbrc	r0, 7
    18be:	90 58       	subi	r25, 0x80	; 128
    18c0:	08 95       	ret
    18c2:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <__fp_pscA>
    18c6:	60 f0       	brcs	.+24     	; 0x18e0 <asin+0x54>
    18c8:	80 e8       	ldi	r24, 0x80	; 128
    18ca:	91 e0       	ldi	r25, 0x01	; 1
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <asin+0x44>
    18ce:	9e ef       	ldi	r25, 0xFE	; 254
    18d0:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__fp_pscB>
    18d4:	28 f0       	brcs	.+10     	; 0x18e0 <asin+0x54>
    18d6:	40 e8       	ldi	r20, 0x80	; 128
    18d8:	51 e0       	ldi	r21, 0x01	; 1
    18da:	71 f4       	brne	.+28     	; 0x18f8 <atan2+0x10>
    18dc:	5e ef       	ldi	r21, 0xFE	; 254
    18de:	0c c0       	rjmp	.+24     	; 0x18f8 <atan2+0x10>
    18e0:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <__fp_nan>
    18e4:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__fp_zero>

000018e8 <atan2>:
    18e8:	e9 2f       	mov	r30, r25
    18ea:	e0 78       	andi	r30, 0x80	; 128
    18ec:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <__fp_split3>
    18f0:	40 f3       	brcs	.-48     	; 0x18c2 <asin+0x36>
    18f2:	09 2e       	mov	r0, r25
    18f4:	05 2a       	or	r0, r21
    18f6:	b1 f3       	breq	.-20     	; 0x18e4 <asin+0x58>
    18f8:	26 17       	cp	r18, r22
    18fa:	37 07       	cpc	r19, r23
    18fc:	48 07       	cpc	r20, r24
    18fe:	59 07       	cpc	r21, r25
    1900:	38 f0       	brcs	.+14     	; 0x1910 <atan2+0x28>
    1902:	0e 2e       	mov	r0, r30
    1904:	07 f8       	bld	r0, 7
    1906:	e0 25       	eor	r30, r0
    1908:	69 f0       	breq	.+26     	; 0x1924 <atan2+0x3c>
    190a:	e0 25       	eor	r30, r0
    190c:	e0 64       	ori	r30, 0x40	; 64
    190e:	0a c0       	rjmp	.+20     	; 0x1924 <atan2+0x3c>
    1910:	ef 63       	ori	r30, 0x3F	; 63
    1912:	07 f8       	bld	r0, 7
    1914:	00 94       	com	r0
    1916:	07 fa       	bst	r0, 7
    1918:	db 01       	movw	r26, r22
    191a:	b9 01       	movw	r22, r18
    191c:	9d 01       	movw	r18, r26
    191e:	dc 01       	movw	r26, r24
    1920:	ca 01       	movw	r24, r20
    1922:	ad 01       	movw	r20, r26
    1924:	ef 93       	push	r30
    1926:	0e 94 ef 0c 	call	0x19de	; 0x19de <__divsf3_pse>
    192a:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__fp_round>
    192e:	0e 94 a4 0c 	call	0x1948	; 0x1948 <atan>
    1932:	5f 91       	pop	r21
    1934:	55 23       	and	r21, r21
    1936:	39 f0       	breq	.+14     	; 0x1946 <atan2+0x5e>
    1938:	2b ed       	ldi	r18, 0xDB	; 219
    193a:	3f e0       	ldi	r19, 0x0F	; 15
    193c:	49 e4       	ldi	r20, 0x49	; 73
    193e:	50 fd       	sbrc	r21, 0
    1940:	49 ec       	ldi	r20, 0xC9	; 201
    1942:	0c 94 da 0b 	jmp	0x17b4	; 0x17b4 <__addsf3>
    1946:	08 95       	ret

00001948 <atan>:
    1948:	df 93       	push	r29
    194a:	dd 27       	eor	r29, r29
    194c:	b9 2f       	mov	r27, r25
    194e:	bf 77       	andi	r27, 0x7F	; 127
    1950:	40 e8       	ldi	r20, 0x80	; 128
    1952:	5f e3       	ldi	r21, 0x3F	; 63
    1954:	16 16       	cp	r1, r22
    1956:	17 06       	cpc	r1, r23
    1958:	48 07       	cpc	r20, r24
    195a:	5b 07       	cpc	r21, r27
    195c:	18 f4       	brcc	.+6      	; 0x1964 <atan+0x1c>
    195e:	d9 2f       	mov	r29, r25
    1960:	0e 94 57 0e 	call	0x1cae	; 0x1cae <inverse>
    1964:	9f 93       	push	r25
    1966:	8f 93       	push	r24
    1968:	7f 93       	push	r23
    196a:	6f 93       	push	r22
    196c:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <square>
    1970:	ec e7       	ldi	r30, 0x7C	; 124
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__fp_powser>
    1978:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__fp_round>
    197c:	2f 91       	pop	r18
    197e:	3f 91       	pop	r19
    1980:	4f 91       	pop	r20
    1982:	5f 91       	pop	r21
    1984:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__mulsf3x>
    1988:	dd 23       	and	r29, r29
    198a:	51 f0       	breq	.+20     	; 0x19a0 <atan+0x58>
    198c:	90 58       	subi	r25, 0x80	; 128
    198e:	a2 ea       	ldi	r26, 0xA2	; 162
    1990:	2a ed       	ldi	r18, 0xDA	; 218
    1992:	3f e0       	ldi	r19, 0x0F	; 15
    1994:	49 ec       	ldi	r20, 0xC9	; 201
    1996:	5f e3       	ldi	r21, 0x3F	; 63
    1998:	d0 78       	andi	r29, 0x80	; 128
    199a:	5d 27       	eor	r21, r29
    199c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__addsf3x>
    19a0:	df 91       	pop	r29
    19a2:	0c 94 1d 0e 	jmp	0x1c3a	; 0x1c3a <__fp_round>

000019a6 <__cmpsf2>:
    19a6:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__fp_cmp>
    19aa:	08 f4       	brcc	.+2      	; 0x19ae <__cmpsf2+0x8>
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	08 95       	ret

000019b0 <__divsf3>:
    19b0:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__divsf3x>
    19b4:	0c 94 1d 0e 	jmp	0x1c3a	; 0x1c3a <__fp_round>
    19b8:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__fp_pscB>
    19bc:	58 f0       	brcs	.+22     	; 0x19d4 <__divsf3+0x24>
    19be:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <__fp_pscA>
    19c2:	40 f0       	brcs	.+16     	; 0x19d4 <__divsf3+0x24>
    19c4:	29 f4       	brne	.+10     	; 0x19d0 <__divsf3+0x20>
    19c6:	5f 3f       	cpi	r21, 0xFF	; 255
    19c8:	29 f0       	breq	.+10     	; 0x19d4 <__divsf3+0x24>
    19ca:	0c 94 cb 0d 	jmp	0x1b96	; 0x1b96 <__fp_inf>
    19ce:	51 11       	cpse	r21, r1
    19d0:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <__fp_szero>
    19d4:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <__fp_nan>

000019d8 <__divsf3x>:
    19d8:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <__fp_split3>
    19dc:	68 f3       	brcs	.-38     	; 0x19b8 <__divsf3+0x8>

000019de <__divsf3_pse>:
    19de:	99 23       	and	r25, r25
    19e0:	b1 f3       	breq	.-20     	; 0x19ce <__divsf3+0x1e>
    19e2:	55 23       	and	r21, r21
    19e4:	91 f3       	breq	.-28     	; 0x19ca <__divsf3+0x1a>
    19e6:	95 1b       	sub	r25, r21
    19e8:	55 0b       	sbc	r21, r21
    19ea:	bb 27       	eor	r27, r27
    19ec:	aa 27       	eor	r26, r26
    19ee:	62 17       	cp	r22, r18
    19f0:	73 07       	cpc	r23, r19
    19f2:	84 07       	cpc	r24, r20
    19f4:	38 f0       	brcs	.+14     	; 0x1a04 <__divsf3_pse+0x26>
    19f6:	9f 5f       	subi	r25, 0xFF	; 255
    19f8:	5f 4f       	sbci	r21, 0xFF	; 255
    19fa:	22 0f       	add	r18, r18
    19fc:	33 1f       	adc	r19, r19
    19fe:	44 1f       	adc	r20, r20
    1a00:	aa 1f       	adc	r26, r26
    1a02:	a9 f3       	breq	.-22     	; 0x19ee <__divsf3_pse+0x10>
    1a04:	35 d0       	rcall	.+106    	; 0x1a70 <__divsf3_pse+0x92>
    1a06:	0e 2e       	mov	r0, r30
    1a08:	3a f0       	brmi	.+14     	; 0x1a18 <__divsf3_pse+0x3a>
    1a0a:	e0 e8       	ldi	r30, 0x80	; 128
    1a0c:	32 d0       	rcall	.+100    	; 0x1a72 <__divsf3_pse+0x94>
    1a0e:	91 50       	subi	r25, 0x01	; 1
    1a10:	50 40       	sbci	r21, 0x00	; 0
    1a12:	e6 95       	lsr	r30
    1a14:	00 1c       	adc	r0, r0
    1a16:	ca f7       	brpl	.-14     	; 0x1a0a <__divsf3_pse+0x2c>
    1a18:	2b d0       	rcall	.+86     	; 0x1a70 <__divsf3_pse+0x92>
    1a1a:	fe 2f       	mov	r31, r30
    1a1c:	29 d0       	rcall	.+82     	; 0x1a70 <__divsf3_pse+0x92>
    1a1e:	66 0f       	add	r22, r22
    1a20:	77 1f       	adc	r23, r23
    1a22:	88 1f       	adc	r24, r24
    1a24:	bb 1f       	adc	r27, r27
    1a26:	26 17       	cp	r18, r22
    1a28:	37 07       	cpc	r19, r23
    1a2a:	48 07       	cpc	r20, r24
    1a2c:	ab 07       	cpc	r26, r27
    1a2e:	b0 e8       	ldi	r27, 0x80	; 128
    1a30:	09 f0       	breq	.+2      	; 0x1a34 <__divsf3_pse+0x56>
    1a32:	bb 0b       	sbc	r27, r27
    1a34:	80 2d       	mov	r24, r0
    1a36:	bf 01       	movw	r22, r30
    1a38:	ff 27       	eor	r31, r31
    1a3a:	93 58       	subi	r25, 0x83	; 131
    1a3c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a3e:	3a f0       	brmi	.+14     	; 0x1a4e <__divsf3_pse+0x70>
    1a40:	9e 3f       	cpi	r25, 0xFE	; 254
    1a42:	51 05       	cpc	r21, r1
    1a44:	78 f0       	brcs	.+30     	; 0x1a64 <__divsf3_pse+0x86>
    1a46:	0c 94 cb 0d 	jmp	0x1b96	; 0x1b96 <__fp_inf>
    1a4a:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <__fp_szero>
    1a4e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a50:	e4 f3       	brlt	.-8      	; 0x1a4a <__divsf3_pse+0x6c>
    1a52:	98 3e       	cpi	r25, 0xE8	; 232
    1a54:	d4 f3       	brlt	.-12     	; 0x1a4a <__divsf3_pse+0x6c>
    1a56:	86 95       	lsr	r24
    1a58:	77 95       	ror	r23
    1a5a:	67 95       	ror	r22
    1a5c:	b7 95       	ror	r27
    1a5e:	f7 95       	ror	r31
    1a60:	9f 5f       	subi	r25, 0xFF	; 255
    1a62:	c9 f7       	brne	.-14     	; 0x1a56 <__divsf3_pse+0x78>
    1a64:	88 0f       	add	r24, r24
    1a66:	91 1d       	adc	r25, r1
    1a68:	96 95       	lsr	r25
    1a6a:	87 95       	ror	r24
    1a6c:	97 f9       	bld	r25, 7
    1a6e:	08 95       	ret
    1a70:	e1 e0       	ldi	r30, 0x01	; 1
    1a72:	66 0f       	add	r22, r22
    1a74:	77 1f       	adc	r23, r23
    1a76:	88 1f       	adc	r24, r24
    1a78:	bb 1f       	adc	r27, r27
    1a7a:	62 17       	cp	r22, r18
    1a7c:	73 07       	cpc	r23, r19
    1a7e:	84 07       	cpc	r24, r20
    1a80:	ba 07       	cpc	r27, r26
    1a82:	20 f0       	brcs	.+8      	; 0x1a8c <__divsf3_pse+0xae>
    1a84:	62 1b       	sub	r22, r18
    1a86:	73 0b       	sbc	r23, r19
    1a88:	84 0b       	sbc	r24, r20
    1a8a:	ba 0b       	sbc	r27, r26
    1a8c:	ee 1f       	adc	r30, r30
    1a8e:	88 f7       	brcc	.-30     	; 0x1a72 <__divsf3_pse+0x94>
    1a90:	e0 95       	com	r30
    1a92:	08 95       	ret

00001a94 <__floatunsisf>:
    1a94:	e8 94       	clt
    1a96:	09 c0       	rjmp	.+18     	; 0x1aaa <__floatsisf+0x12>

00001a98 <__floatsisf>:
    1a98:	97 fb       	bst	r25, 7
    1a9a:	3e f4       	brtc	.+14     	; 0x1aaa <__floatsisf+0x12>
    1a9c:	90 95       	com	r25
    1a9e:	80 95       	com	r24
    1aa0:	70 95       	com	r23
    1aa2:	61 95       	neg	r22
    1aa4:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa6:	8f 4f       	sbci	r24, 0xFF	; 255
    1aa8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aaa:	99 23       	and	r25, r25
    1aac:	a9 f0       	breq	.+42     	; 0x1ad8 <__floatsisf+0x40>
    1aae:	f9 2f       	mov	r31, r25
    1ab0:	96 e9       	ldi	r25, 0x96	; 150
    1ab2:	bb 27       	eor	r27, r27
    1ab4:	93 95       	inc	r25
    1ab6:	f6 95       	lsr	r31
    1ab8:	87 95       	ror	r24
    1aba:	77 95       	ror	r23
    1abc:	67 95       	ror	r22
    1abe:	b7 95       	ror	r27
    1ac0:	f1 11       	cpse	r31, r1
    1ac2:	f8 cf       	rjmp	.-16     	; 0x1ab4 <__floatsisf+0x1c>
    1ac4:	fa f4       	brpl	.+62     	; 0x1b04 <__floatsisf+0x6c>
    1ac6:	bb 0f       	add	r27, r27
    1ac8:	11 f4       	brne	.+4      	; 0x1ace <__floatsisf+0x36>
    1aca:	60 ff       	sbrs	r22, 0
    1acc:	1b c0       	rjmp	.+54     	; 0x1b04 <__floatsisf+0x6c>
    1ace:	6f 5f       	subi	r22, 0xFF	; 255
    1ad0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad6:	16 c0       	rjmp	.+44     	; 0x1b04 <__floatsisf+0x6c>
    1ad8:	88 23       	and	r24, r24
    1ada:	11 f0       	breq	.+4      	; 0x1ae0 <__floatsisf+0x48>
    1adc:	96 e9       	ldi	r25, 0x96	; 150
    1ade:	11 c0       	rjmp	.+34     	; 0x1b02 <__floatsisf+0x6a>
    1ae0:	77 23       	and	r23, r23
    1ae2:	21 f0       	breq	.+8      	; 0x1aec <__floatsisf+0x54>
    1ae4:	9e e8       	ldi	r25, 0x8E	; 142
    1ae6:	87 2f       	mov	r24, r23
    1ae8:	76 2f       	mov	r23, r22
    1aea:	05 c0       	rjmp	.+10     	; 0x1af6 <__floatsisf+0x5e>
    1aec:	66 23       	and	r22, r22
    1aee:	71 f0       	breq	.+28     	; 0x1b0c <__floatsisf+0x74>
    1af0:	96 e8       	ldi	r25, 0x86	; 134
    1af2:	86 2f       	mov	r24, r22
    1af4:	70 e0       	ldi	r23, 0x00	; 0
    1af6:	60 e0       	ldi	r22, 0x00	; 0
    1af8:	2a f0       	brmi	.+10     	; 0x1b04 <__floatsisf+0x6c>
    1afa:	9a 95       	dec	r25
    1afc:	66 0f       	add	r22, r22
    1afe:	77 1f       	adc	r23, r23
    1b00:	88 1f       	adc	r24, r24
    1b02:	da f7       	brpl	.-10     	; 0x1afa <__floatsisf+0x62>
    1b04:	88 0f       	add	r24, r24
    1b06:	96 95       	lsr	r25
    1b08:	87 95       	ror	r24
    1b0a:	97 f9       	bld	r25, 7
    1b0c:	08 95       	ret

00001b0e <__fp_arccos>:
    1b0e:	df 93       	push	r29
    1b10:	cf 93       	push	r28
    1b12:	1f 93       	push	r17
    1b14:	0f 93       	push	r16
    1b16:	8b 01       	movw	r16, r22
    1b18:	ec 01       	movw	r28, r24
    1b1a:	e9 ea       	ldi	r30, 0xA9	; 169
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__fp_powser>
    1b22:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__fp_round>
    1b26:	98 01       	movw	r18, r16
    1b28:	ae 01       	movw	r20, r28
    1b2a:	8b 01       	movw	r16, r22
    1b2c:	ec 01       	movw	r28, r24
    1b2e:	60 e0       	ldi	r22, 0x00	; 0
    1b30:	70 e0       	ldi	r23, 0x00	; 0
    1b32:	80 e8       	ldi	r24, 0x80	; 128
    1b34:	9f e3       	ldi	r25, 0x3F	; 63
    1b36:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__subsf3>
    1b3a:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <sqrt>
    1b3e:	98 01       	movw	r18, r16
    1b40:	ae 01       	movw	r20, r28
    1b42:	0f 91       	pop	r16
    1b44:	1f 91       	pop	r17
    1b46:	cf 91       	pop	r28
    1b48:	df 91       	pop	r29
    1b4a:	0c 94 72 0e 	jmp	0x1ce4	; 0x1ce4 <__mulsf3x>

00001b4e <__fp_cmp>:
    1b4e:	99 0f       	add	r25, r25
    1b50:	00 08       	sbc	r0, r0
    1b52:	55 0f       	add	r21, r21
    1b54:	aa 0b       	sbc	r26, r26
    1b56:	e0 e8       	ldi	r30, 0x80	; 128
    1b58:	fe ef       	ldi	r31, 0xFE	; 254
    1b5a:	16 16       	cp	r1, r22
    1b5c:	17 06       	cpc	r1, r23
    1b5e:	e8 07       	cpc	r30, r24
    1b60:	f9 07       	cpc	r31, r25
    1b62:	c0 f0       	brcs	.+48     	; 0x1b94 <__fp_cmp+0x46>
    1b64:	12 16       	cp	r1, r18
    1b66:	13 06       	cpc	r1, r19
    1b68:	e4 07       	cpc	r30, r20
    1b6a:	f5 07       	cpc	r31, r21
    1b6c:	98 f0       	brcs	.+38     	; 0x1b94 <__fp_cmp+0x46>
    1b6e:	62 1b       	sub	r22, r18
    1b70:	73 0b       	sbc	r23, r19
    1b72:	84 0b       	sbc	r24, r20
    1b74:	95 0b       	sbc	r25, r21
    1b76:	39 f4       	brne	.+14     	; 0x1b86 <__fp_cmp+0x38>
    1b78:	0a 26       	eor	r0, r26
    1b7a:	61 f0       	breq	.+24     	; 0x1b94 <__fp_cmp+0x46>
    1b7c:	23 2b       	or	r18, r19
    1b7e:	24 2b       	or	r18, r20
    1b80:	25 2b       	or	r18, r21
    1b82:	21 f4       	brne	.+8      	; 0x1b8c <__fp_cmp+0x3e>
    1b84:	08 95       	ret
    1b86:	0a 26       	eor	r0, r26
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <__fp_cmp+0x3e>
    1b8a:	a1 40       	sbci	r26, 0x01	; 1
    1b8c:	a6 95       	lsr	r26
    1b8e:	8f ef       	ldi	r24, 0xFF	; 255
    1b90:	81 1d       	adc	r24, r1
    1b92:	81 1d       	adc	r24, r1
    1b94:	08 95       	ret

00001b96 <__fp_inf>:
    1b96:	97 f9       	bld	r25, 7
    1b98:	9f 67       	ori	r25, 0x7F	; 127
    1b9a:	80 e8       	ldi	r24, 0x80	; 128
    1b9c:	70 e0       	ldi	r23, 0x00	; 0
    1b9e:	60 e0       	ldi	r22, 0x00	; 0
    1ba0:	08 95       	ret

00001ba2 <__fp_nan>:
    1ba2:	9f ef       	ldi	r25, 0xFF	; 255
    1ba4:	80 ec       	ldi	r24, 0xC0	; 192
    1ba6:	08 95       	ret

00001ba8 <__fp_powser>:
    1ba8:	df 93       	push	r29
    1baa:	cf 93       	push	r28
    1bac:	1f 93       	push	r17
    1bae:	0f 93       	push	r16
    1bb0:	ff 92       	push	r15
    1bb2:	ef 92       	push	r14
    1bb4:	df 92       	push	r13
    1bb6:	7b 01       	movw	r14, r22
    1bb8:	8c 01       	movw	r16, r24
    1bba:	68 94       	set
    1bbc:	06 c0       	rjmp	.+12     	; 0x1bca <__fp_powser+0x22>
    1bbe:	da 2e       	mov	r13, r26
    1bc0:	ef 01       	movw	r28, r30
    1bc2:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__mulsf3x>
    1bc6:	fe 01       	movw	r30, r28
    1bc8:	e8 94       	clt
    1bca:	a5 91       	lpm	r26, Z+
    1bcc:	25 91       	lpm	r18, Z+
    1bce:	35 91       	lpm	r19, Z+
    1bd0:	45 91       	lpm	r20, Z+
    1bd2:	55 91       	lpm	r21, Z+
    1bd4:	a6 f3       	brts	.-24     	; 0x1bbe <__fp_powser+0x16>
    1bd6:	ef 01       	movw	r28, r30
    1bd8:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__addsf3x>
    1bdc:	fe 01       	movw	r30, r28
    1bde:	97 01       	movw	r18, r14
    1be0:	a8 01       	movw	r20, r16
    1be2:	da 94       	dec	r13
    1be4:	69 f7       	brne	.-38     	; 0x1bc0 <__fp_powser+0x18>
    1be6:	df 90       	pop	r13
    1be8:	ef 90       	pop	r14
    1bea:	ff 90       	pop	r15
    1bec:	0f 91       	pop	r16
    1bee:	1f 91       	pop	r17
    1bf0:	cf 91       	pop	r28
    1bf2:	df 91       	pop	r29
    1bf4:	08 95       	ret

00001bf6 <__fp_powsodd>:
    1bf6:	9f 93       	push	r25
    1bf8:	8f 93       	push	r24
    1bfa:	7f 93       	push	r23
    1bfc:	6f 93       	push	r22
    1bfe:	ff 93       	push	r31
    1c00:	ef 93       	push	r30
    1c02:	9b 01       	movw	r18, r22
    1c04:	ac 01       	movw	r20, r24
    1c06:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
    1c0a:	ef 91       	pop	r30
    1c0c:	ff 91       	pop	r31
    1c0e:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__fp_powser>
    1c12:	2f 91       	pop	r18
    1c14:	3f 91       	pop	r19
    1c16:	4f 91       	pop	r20
    1c18:	5f 91       	pop	r21
    1c1a:	0c 94 5f 0e 	jmp	0x1cbe	; 0x1cbe <__mulsf3>

00001c1e <__fp_pscA>:
    1c1e:	00 24       	eor	r0, r0
    1c20:	0a 94       	dec	r0
    1c22:	16 16       	cp	r1, r22
    1c24:	17 06       	cpc	r1, r23
    1c26:	18 06       	cpc	r1, r24
    1c28:	09 06       	cpc	r0, r25
    1c2a:	08 95       	ret

00001c2c <__fp_pscB>:
    1c2c:	00 24       	eor	r0, r0
    1c2e:	0a 94       	dec	r0
    1c30:	12 16       	cp	r1, r18
    1c32:	13 06       	cpc	r1, r19
    1c34:	14 06       	cpc	r1, r20
    1c36:	05 06       	cpc	r0, r21
    1c38:	08 95       	ret

00001c3a <__fp_round>:
    1c3a:	09 2e       	mov	r0, r25
    1c3c:	03 94       	inc	r0
    1c3e:	00 0c       	add	r0, r0
    1c40:	11 f4       	brne	.+4      	; 0x1c46 <__fp_round+0xc>
    1c42:	88 23       	and	r24, r24
    1c44:	52 f0       	brmi	.+20     	; 0x1c5a <__fp_round+0x20>
    1c46:	bb 0f       	add	r27, r27
    1c48:	40 f4       	brcc	.+16     	; 0x1c5a <__fp_round+0x20>
    1c4a:	bf 2b       	or	r27, r31
    1c4c:	11 f4       	brne	.+4      	; 0x1c52 <__fp_round+0x18>
    1c4e:	60 ff       	sbrs	r22, 0
    1c50:	04 c0       	rjmp	.+8      	; 0x1c5a <__fp_round+0x20>
    1c52:	6f 5f       	subi	r22, 0xFF	; 255
    1c54:	7f 4f       	sbci	r23, 0xFF	; 255
    1c56:	8f 4f       	sbci	r24, 0xFF	; 255
    1c58:	9f 4f       	sbci	r25, 0xFF	; 255
    1c5a:	08 95       	ret

00001c5c <__fp_split3>:
    1c5c:	57 fd       	sbrc	r21, 7
    1c5e:	90 58       	subi	r25, 0x80	; 128
    1c60:	44 0f       	add	r20, r20
    1c62:	55 1f       	adc	r21, r21
    1c64:	59 f0       	breq	.+22     	; 0x1c7c <__fp_splitA+0x10>
    1c66:	5f 3f       	cpi	r21, 0xFF	; 255
    1c68:	71 f0       	breq	.+28     	; 0x1c86 <__fp_splitA+0x1a>
    1c6a:	47 95       	ror	r20

00001c6c <__fp_splitA>:
    1c6c:	88 0f       	add	r24, r24
    1c6e:	97 fb       	bst	r25, 7
    1c70:	99 1f       	adc	r25, r25
    1c72:	61 f0       	breq	.+24     	; 0x1c8c <__fp_splitA+0x20>
    1c74:	9f 3f       	cpi	r25, 0xFF	; 255
    1c76:	79 f0       	breq	.+30     	; 0x1c96 <__fp_splitA+0x2a>
    1c78:	87 95       	ror	r24
    1c7a:	08 95       	ret
    1c7c:	12 16       	cp	r1, r18
    1c7e:	13 06       	cpc	r1, r19
    1c80:	14 06       	cpc	r1, r20
    1c82:	55 1f       	adc	r21, r21
    1c84:	f2 cf       	rjmp	.-28     	; 0x1c6a <__fp_split3+0xe>
    1c86:	46 95       	lsr	r20
    1c88:	f1 df       	rcall	.-30     	; 0x1c6c <__fp_splitA>
    1c8a:	08 c0       	rjmp	.+16     	; 0x1c9c <__fp_splitA+0x30>
    1c8c:	16 16       	cp	r1, r22
    1c8e:	17 06       	cpc	r1, r23
    1c90:	18 06       	cpc	r1, r24
    1c92:	99 1f       	adc	r25, r25
    1c94:	f1 cf       	rjmp	.-30     	; 0x1c78 <__fp_splitA+0xc>
    1c96:	86 95       	lsr	r24
    1c98:	71 05       	cpc	r23, r1
    1c9a:	61 05       	cpc	r22, r1
    1c9c:	08 94       	sec
    1c9e:	08 95       	ret

00001ca0 <__fp_zero>:
    1ca0:	e8 94       	clt

00001ca2 <__fp_szero>:
    1ca2:	bb 27       	eor	r27, r27
    1ca4:	66 27       	eor	r22, r22
    1ca6:	77 27       	eor	r23, r23
    1ca8:	cb 01       	movw	r24, r22
    1caa:	97 f9       	bld	r25, 7
    1cac:	08 95       	ret

00001cae <inverse>:
    1cae:	9b 01       	movw	r18, r22
    1cb0:	ac 01       	movw	r20, r24
    1cb2:	60 e0       	ldi	r22, 0x00	; 0
    1cb4:	70 e0       	ldi	r23, 0x00	; 0
    1cb6:	80 e8       	ldi	r24, 0x80	; 128
    1cb8:	9f e3       	ldi	r25, 0x3F	; 63
    1cba:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__divsf3>

00001cbe <__mulsf3>:
    1cbe:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__mulsf3x>
    1cc2:	0c 94 1d 0e 	jmp	0x1c3a	; 0x1c3a <__fp_round>
    1cc6:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <__fp_pscA>
    1cca:	38 f0       	brcs	.+14     	; 0x1cda <__mulsf3+0x1c>
    1ccc:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__fp_pscB>
    1cd0:	20 f0       	brcs	.+8      	; 0x1cda <__mulsf3+0x1c>
    1cd2:	95 23       	and	r25, r21
    1cd4:	11 f0       	breq	.+4      	; 0x1cda <__mulsf3+0x1c>
    1cd6:	0c 94 cb 0d 	jmp	0x1b96	; 0x1b96 <__fp_inf>
    1cda:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <__fp_nan>
    1cde:	11 24       	eor	r1, r1
    1ce0:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <__fp_szero>

00001ce4 <__mulsf3x>:
    1ce4:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <__fp_split3>
    1ce8:	70 f3       	brcs	.-36     	; 0x1cc6 <__mulsf3+0x8>

00001cea <__mulsf3_pse>:
    1cea:	95 9f       	mul	r25, r21
    1cec:	c1 f3       	breq	.-16     	; 0x1cde <__mulsf3+0x20>
    1cee:	95 0f       	add	r25, r21
    1cf0:	50 e0       	ldi	r21, 0x00	; 0
    1cf2:	55 1f       	adc	r21, r21
    1cf4:	62 9f       	mul	r22, r18
    1cf6:	f0 01       	movw	r30, r0
    1cf8:	72 9f       	mul	r23, r18
    1cfa:	bb 27       	eor	r27, r27
    1cfc:	f0 0d       	add	r31, r0
    1cfe:	b1 1d       	adc	r27, r1
    1d00:	63 9f       	mul	r22, r19
    1d02:	aa 27       	eor	r26, r26
    1d04:	f0 0d       	add	r31, r0
    1d06:	b1 1d       	adc	r27, r1
    1d08:	aa 1f       	adc	r26, r26
    1d0a:	64 9f       	mul	r22, r20
    1d0c:	66 27       	eor	r22, r22
    1d0e:	b0 0d       	add	r27, r0
    1d10:	a1 1d       	adc	r26, r1
    1d12:	66 1f       	adc	r22, r22
    1d14:	82 9f       	mul	r24, r18
    1d16:	22 27       	eor	r18, r18
    1d18:	b0 0d       	add	r27, r0
    1d1a:	a1 1d       	adc	r26, r1
    1d1c:	62 1f       	adc	r22, r18
    1d1e:	73 9f       	mul	r23, r19
    1d20:	b0 0d       	add	r27, r0
    1d22:	a1 1d       	adc	r26, r1
    1d24:	62 1f       	adc	r22, r18
    1d26:	83 9f       	mul	r24, r19
    1d28:	a0 0d       	add	r26, r0
    1d2a:	61 1d       	adc	r22, r1
    1d2c:	22 1f       	adc	r18, r18
    1d2e:	74 9f       	mul	r23, r20
    1d30:	33 27       	eor	r19, r19
    1d32:	a0 0d       	add	r26, r0
    1d34:	61 1d       	adc	r22, r1
    1d36:	23 1f       	adc	r18, r19
    1d38:	84 9f       	mul	r24, r20
    1d3a:	60 0d       	add	r22, r0
    1d3c:	21 1d       	adc	r18, r1
    1d3e:	82 2f       	mov	r24, r18
    1d40:	76 2f       	mov	r23, r22
    1d42:	6a 2f       	mov	r22, r26
    1d44:	11 24       	eor	r1, r1
    1d46:	9f 57       	subi	r25, 0x7F	; 127
    1d48:	50 40       	sbci	r21, 0x00	; 0
    1d4a:	9a f0       	brmi	.+38     	; 0x1d72 <__mulsf3_pse+0x88>
    1d4c:	f1 f0       	breq	.+60     	; 0x1d8a <__mulsf3_pse+0xa0>
    1d4e:	88 23       	and	r24, r24
    1d50:	4a f0       	brmi	.+18     	; 0x1d64 <__mulsf3_pse+0x7a>
    1d52:	ee 0f       	add	r30, r30
    1d54:	ff 1f       	adc	r31, r31
    1d56:	bb 1f       	adc	r27, r27
    1d58:	66 1f       	adc	r22, r22
    1d5a:	77 1f       	adc	r23, r23
    1d5c:	88 1f       	adc	r24, r24
    1d5e:	91 50       	subi	r25, 0x01	; 1
    1d60:	50 40       	sbci	r21, 0x00	; 0
    1d62:	a9 f7       	brne	.-22     	; 0x1d4e <__mulsf3_pse+0x64>
    1d64:	9e 3f       	cpi	r25, 0xFE	; 254
    1d66:	51 05       	cpc	r21, r1
    1d68:	80 f0       	brcs	.+32     	; 0x1d8a <__mulsf3_pse+0xa0>
    1d6a:	0c 94 cb 0d 	jmp	0x1b96	; 0x1b96 <__fp_inf>
    1d6e:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <__fp_szero>
    1d72:	5f 3f       	cpi	r21, 0xFF	; 255
    1d74:	e4 f3       	brlt	.-8      	; 0x1d6e <__mulsf3_pse+0x84>
    1d76:	98 3e       	cpi	r25, 0xE8	; 232
    1d78:	d4 f3       	brlt	.-12     	; 0x1d6e <__mulsf3_pse+0x84>
    1d7a:	86 95       	lsr	r24
    1d7c:	77 95       	ror	r23
    1d7e:	67 95       	ror	r22
    1d80:	b7 95       	ror	r27
    1d82:	f7 95       	ror	r31
    1d84:	e7 95       	ror	r30
    1d86:	9f 5f       	subi	r25, 0xFF	; 255
    1d88:	c1 f7       	brne	.-16     	; 0x1d7a <__mulsf3_pse+0x90>
    1d8a:	fe 2b       	or	r31, r30
    1d8c:	88 0f       	add	r24, r24
    1d8e:	91 1d       	adc	r25, r1
    1d90:	96 95       	lsr	r25
    1d92:	87 95       	ror	r24
    1d94:	97 f9       	bld	r25, 7
    1d96:	08 95       	ret
    1d98:	19 f4       	brne	.+6      	; 0x1da0 <__mulsf3_pse+0xb6>
    1d9a:	16 f4       	brtc	.+4      	; 0x1da0 <__mulsf3_pse+0xb6>
    1d9c:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <__fp_nan>
    1da0:	0c 94 16 0f 	jmp	0x1e2c	; 0x1e2c <__fp_mpack>

00001da4 <sqrt>:
    1da4:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <__fp_splitA>
    1da8:	b8 f3       	brcs	.-18     	; 0x1d98 <__mulsf3_pse+0xae>
    1daa:	99 23       	and	r25, r25
    1dac:	c9 f3       	breq	.-14     	; 0x1da0 <__mulsf3_pse+0xb6>
    1dae:	b6 f3       	brts	.-20     	; 0x1d9c <__mulsf3_pse+0xb2>
    1db0:	9f 57       	subi	r25, 0x7F	; 127
    1db2:	55 0b       	sbc	r21, r21
    1db4:	87 ff       	sbrs	r24, 7
    1db6:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <__fp_norm2>
    1dba:	00 24       	eor	r0, r0
    1dbc:	a0 e6       	ldi	r26, 0x60	; 96
    1dbe:	40 ea       	ldi	r20, 0xA0	; 160
    1dc0:	90 01       	movw	r18, r0
    1dc2:	80 58       	subi	r24, 0x80	; 128
    1dc4:	56 95       	lsr	r21
    1dc6:	97 95       	ror	r25
    1dc8:	28 f4       	brcc	.+10     	; 0x1dd4 <sqrt+0x30>
    1dca:	80 5c       	subi	r24, 0xC0	; 192
    1dcc:	66 0f       	add	r22, r22
    1dce:	77 1f       	adc	r23, r23
    1dd0:	88 1f       	adc	r24, r24
    1dd2:	20 f0       	brcs	.+8      	; 0x1ddc <sqrt+0x38>
    1dd4:	26 17       	cp	r18, r22
    1dd6:	37 07       	cpc	r19, r23
    1dd8:	48 07       	cpc	r20, r24
    1dda:	30 f4       	brcc	.+12     	; 0x1de8 <sqrt+0x44>
    1ddc:	62 1b       	sub	r22, r18
    1dde:	73 0b       	sbc	r23, r19
    1de0:	84 0b       	sbc	r24, r20
    1de2:	20 29       	or	r18, r0
    1de4:	31 29       	or	r19, r1
    1de6:	4a 2b       	or	r20, r26
    1de8:	a6 95       	lsr	r26
    1dea:	17 94       	ror	r1
    1dec:	07 94       	ror	r0
    1dee:	20 25       	eor	r18, r0
    1df0:	31 25       	eor	r19, r1
    1df2:	4a 27       	eor	r20, r26
    1df4:	58 f7       	brcc	.-42     	; 0x1dcc <sqrt+0x28>
    1df6:	66 0f       	add	r22, r22
    1df8:	77 1f       	adc	r23, r23
    1dfa:	88 1f       	adc	r24, r24
    1dfc:	20 f0       	brcs	.+8      	; 0x1e06 <sqrt+0x62>
    1dfe:	26 17       	cp	r18, r22
    1e00:	37 07       	cpc	r19, r23
    1e02:	48 07       	cpc	r20, r24
    1e04:	30 f4       	brcc	.+12     	; 0x1e12 <sqrt+0x6e>
    1e06:	62 0b       	sbc	r22, r18
    1e08:	73 0b       	sbc	r23, r19
    1e0a:	84 0b       	sbc	r24, r20
    1e0c:	20 0d       	add	r18, r0
    1e0e:	31 1d       	adc	r19, r1
    1e10:	41 1d       	adc	r20, r1
    1e12:	a0 95       	com	r26
    1e14:	81 f7       	brne	.-32     	; 0x1df6 <sqrt+0x52>
    1e16:	b9 01       	movw	r22, r18
    1e18:	84 2f       	mov	r24, r20
    1e1a:	91 58       	subi	r25, 0x81	; 129
    1e1c:	88 0f       	add	r24, r24
    1e1e:	96 95       	lsr	r25
    1e20:	87 95       	ror	r24
    1e22:	08 95       	ret

00001e24 <square>:
    1e24:	9b 01       	movw	r18, r22
    1e26:	ac 01       	movw	r20, r24
    1e28:	0c 94 5f 0e 	jmp	0x1cbe	; 0x1cbe <__mulsf3>

00001e2c <__fp_mpack>:
    1e2c:	9f 3f       	cpi	r25, 0xFF	; 255
    1e2e:	31 f0       	breq	.+12     	; 0x1e3c <__fp_mpack_finite+0xc>

00001e30 <__fp_mpack_finite>:
    1e30:	91 50       	subi	r25, 0x01	; 1
    1e32:	20 f4       	brcc	.+8      	; 0x1e3c <__fp_mpack_finite+0xc>
    1e34:	87 95       	ror	r24
    1e36:	77 95       	ror	r23
    1e38:	67 95       	ror	r22
    1e3a:	b7 95       	ror	r27
    1e3c:	88 0f       	add	r24, r24
    1e3e:	91 1d       	adc	r25, r1
    1e40:	96 95       	lsr	r25
    1e42:	87 95       	ror	r24
    1e44:	97 f9       	bld	r25, 7
    1e46:	08 95       	ret

00001e48 <__fp_norm2>:
    1e48:	91 50       	subi	r25, 0x01	; 1
    1e4a:	50 40       	sbci	r21, 0x00	; 0
    1e4c:	66 0f       	add	r22, r22
    1e4e:	77 1f       	adc	r23, r23
    1e50:	88 1f       	adc	r24, r24
    1e52:	d2 f7       	brpl	.-12     	; 0x1e48 <__fp_norm2>
    1e54:	08 95       	ret

00001e56 <_exit>:
    1e56:	f8 94       	cli

00001e58 <__stop_program>:
    1e58:	ff cf       	rjmp	.-2      	; 0x1e58 <__stop_program>
