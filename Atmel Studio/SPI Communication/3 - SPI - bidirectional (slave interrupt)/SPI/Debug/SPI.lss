
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000005a6  0000063a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080011c  0080011c  00000656  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000656  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000688  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000120d  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009de  00000000  00000000  000019ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008df  00000000  00000000  0000238b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  00002c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058c  00000000  00000000  00002e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096a  00000000  00000000  000033a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003d0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 b1 02 	jmp	0x562	; 0x562 <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ea       	ldi	r30, 0xA6	; 166
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e1       	ldi	r26, 0x1C	; 28
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 32       	cpi	r26, 0x20	; 32
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4b 02 	call	0x496	; 0x496 <main>
  9e:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Bit_Reverse>:
	while(*str != '\0')
	{
		lcd_wr_char(*str);
		str++;
	}
}
  a6:	98 2f       	mov	r25, r24
  a8:	99 1f       	adc	r25, r25
  aa:	99 27       	eor	r25, r25
  ac:	99 1f       	adc	r25, r25
  ae:	86 fd       	sbrc	r24, 6
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <Bit_Reverse+0x10>
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <Bit_Reverse+0x12>
  b6:	22 e0       	ldi	r18, 0x02	; 2
  b8:	92 2b       	or	r25, r18
  ba:	85 fd       	sbrc	r24, 5
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <Bit_Reverse+0x1c>
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <Bit_Reverse+0x1e>
  c2:	24 e0       	ldi	r18, 0x04	; 4
  c4:	92 2b       	or	r25, r18
  c6:	84 fd       	sbrc	r24, 4
  c8:	02 c0       	rjmp	.+4      	; 0xce <Bit_Reverse+0x28>
  ca:	20 e0       	ldi	r18, 0x00	; 0
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <Bit_Reverse+0x2a>
  ce:	28 e0       	ldi	r18, 0x08	; 8
  d0:	92 2b       	or	r25, r18
  d2:	83 fd       	sbrc	r24, 3
  d4:	02 c0       	rjmp	.+4      	; 0xda <Bit_Reverse+0x34>
  d6:	20 e0       	ldi	r18, 0x00	; 0
  d8:	01 c0       	rjmp	.+2      	; 0xdc <Bit_Reverse+0x36>
  da:	20 e1       	ldi	r18, 0x10	; 16
  dc:	92 2b       	or	r25, r18
  de:	82 fd       	sbrc	r24, 2
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <Bit_Reverse+0x40>
  e2:	20 e0       	ldi	r18, 0x00	; 0
  e4:	01 c0       	rjmp	.+2      	; 0xe8 <Bit_Reverse+0x42>
  e6:	20 e2       	ldi	r18, 0x20	; 32
  e8:	92 2b       	or	r25, r18
  ea:	81 fd       	sbrc	r24, 1
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <Bit_Reverse+0x4c>
  ee:	20 e0       	ldi	r18, 0x00	; 0
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <Bit_Reverse+0x4e>
  f2:	20 e4       	ldi	r18, 0x40	; 64
  f4:	92 2b       	or	r25, r18
  f6:	80 fd       	sbrc	r24, 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <Bit_Reverse+0x58>
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	01 c0       	rjmp	.+2      	; 0x100 <Bit_Reverse+0x5a>
  fe:	80 e8       	ldi	r24, 0x80	; 128
 100:	89 2b       	or	r24, r25
 102:	08 95       	ret

00000104 <lcd_wr_command>:
 104:	cf 93       	push	r28
 106:	c8 2f       	mov	r28, r24
 108:	80 7f       	andi	r24, 0xF0	; 240
 10a:	0e 94 53 00 	call	0xa6	; 0xa6 <Bit_Reverse>
 10e:	88 0f       	add	r24, r24
 110:	88 0f       	add	r24, r24
 112:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
 116:	8b b1       	in	r24, 0x0b	; 11
 118:	83 7c       	andi	r24, 0xC3	; 195
 11a:	8b b9       	out	0x0b, r24	; 11
 11c:	9b b1       	in	r25, 0x0b	; 11
 11e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 122:	89 2b       	or	r24, r25
 124:	8b b9       	out	0x0b, r24	; 11
 126:	5f 98       	cbi	0x0b, 7	; 11
 128:	5e 9a       	sbi	0x0b, 6	; 11
 12a:	8f e1       	ldi	r24, 0x1F	; 31
 12c:	9e e4       	ldi	r25, 0x4E	; 78
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <lcd_wr_command+0x2a>
 132:	00 c0       	rjmp	.+0      	; 0x134 <lcd_wr_command+0x30>
 134:	00 00       	nop
 136:	5e 98       	cbi	0x0b, 6	; 11
 138:	8c 2f       	mov	r24, r28
 13a:	82 95       	swap	r24
 13c:	80 7f       	andi	r24, 0xF0	; 240
 13e:	0e 94 53 00 	call	0xa6	; 0xa6 <Bit_Reverse>
 142:	9b b1       	in	r25, 0x0b	; 11
 144:	93 7c       	andi	r25, 0xC3	; 195
 146:	9b b9       	out	0x0b, r25	; 11
 148:	9b b1       	in	r25, 0x0b	; 11
 14a:	88 0f       	add	r24, r24
 14c:	88 0f       	add	r24, r24
 14e:	98 2b       	or	r25, r24
 150:	9b b9       	out	0x0b, r25	; 11
 152:	5f 98       	cbi	0x0b, 7	; 11
 154:	5e 9a       	sbi	0x0b, 6	; 11
 156:	8f e1       	ldi	r24, 0x1F	; 31
 158:	9e e4       	ldi	r25, 0x4E	; 78
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <lcd_wr_command+0x56>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <lcd_wr_command+0x5c>
 160:	00 00       	nop
 162:	5e 98       	cbi	0x0b, 6	; 11
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <lcd_port_config>:
 168:	8a b1       	in	r24, 0x0a	; 10
 16a:	8c 6f       	ori	r24, 0xFC	; 252
 16c:	8a b9       	out	0x0a, r24	; 10
 16e:	8b b1       	in	r24, 0x0b	; 11
 170:	84 70       	andi	r24, 0x04	; 4
 172:	8b b9       	out	0x0b, r24	; 11
 174:	08 95       	ret

00000176 <lcd_wr_char>:
 176:	cf 93       	push	r28
 178:	c8 2f       	mov	r28, r24
 17a:	80 7f       	andi	r24, 0xF0	; 240
 17c:	0e 94 53 00 	call	0xa6	; 0xa6 <Bit_Reverse>
 180:	9b b1       	in	r25, 0x0b	; 11
 182:	93 7c       	andi	r25, 0xC3	; 195
 184:	9b b9       	out	0x0b, r25	; 11
 186:	9b b1       	in	r25, 0x0b	; 11
 188:	88 0f       	add	r24, r24
 18a:	88 0f       	add	r24, r24
 18c:	98 2b       	or	r25, r24
 18e:	9b b9       	out	0x0b, r25	; 11
 190:	5f 9a       	sbi	0x0b, 7	; 11
 192:	5e 9a       	sbi	0x0b, 6	; 11
 194:	8f e1       	ldi	r24, 0x1F	; 31
 196:	9e e4       	ldi	r25, 0x4E	; 78
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <lcd_wr_char+0x22>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <lcd_wr_char+0x28>
 19e:	00 00       	nop
 1a0:	5e 98       	cbi	0x0b, 6	; 11
 1a2:	8c 2f       	mov	r24, r28
 1a4:	82 95       	swap	r24
 1a6:	80 7f       	andi	r24, 0xF0	; 240
 1a8:	0e 94 53 00 	call	0xa6	; 0xa6 <Bit_Reverse>
 1ac:	9b b1       	in	r25, 0x0b	; 11
 1ae:	93 7c       	andi	r25, 0xC3	; 195
 1b0:	9b b9       	out	0x0b, r25	; 11
 1b2:	9b b1       	in	r25, 0x0b	; 11
 1b4:	88 0f       	add	r24, r24
 1b6:	88 0f       	add	r24, r24
 1b8:	98 2b       	or	r25, r24
 1ba:	9b b9       	out	0x0b, r25	; 11
 1bc:	5f 9a       	sbi	0x0b, 7	; 11
 1be:	5e 9a       	sbi	0x0b, 6	; 11
 1c0:	8f e1       	ldi	r24, 0x1F	; 31
 1c2:	9e e4       	ldi	r25, 0x4E	; 78
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_wr_char+0x4e>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_wr_char+0x54>
 1ca:	00 00       	nop
 1cc:	5e 98       	cbi	0x0b, 6	; 11
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <lcd_home>:
 1d2:	80 e8       	ldi	r24, 0x80	; 128
 1d4:	0e 94 82 00 	call	0x104	; 0x104 <lcd_wr_command>
 1d8:	08 95       	ret

000001da <lcd_cursor>:
	row
* Example Call: lcd_string(2,3)
*/
void lcd_cursor (char row, char column)
{
	switch (row) {
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	19 f0       	breq	.+6      	; 0x1e4 <lcd_cursor+0xa>
 1de:	82 30       	cpi	r24, 0x02	; 2
 1e0:	31 f0       	breq	.+12     	; 0x1ee <lcd_cursor+0x14>
 1e2:	08 95       	ret
		case 1: lcd_wr_command (0x80 + column - 1); break;
 1e4:	8f e7       	ldi	r24, 0x7F	; 127
 1e6:	86 0f       	add	r24, r22
 1e8:	0e 94 82 00 	call	0x104	; 0x104 <lcd_wr_command>
 1ec:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 1ee:	8f eb       	ldi	r24, 0xBF	; 191
 1f0:	86 0f       	add	r24, r22
 1f2:	0e 94 82 00 	call	0x104	; 0x104 <lcd_wr_command>
 1f6:	08 95       	ret

000001f8 <lcd_string2>:
* Output: Prints string on the LCD
* Logic:  Prints each character to the LCD in a while loop until EOF is reached
* Example Call: lcd_string("hello")
*/
void lcd_string2(char row, char column, char *str)
{
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	ea 01       	movw	r28, r20
	lcd_cursor(row,column);	
 1fe:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_cursor>
	while(*str != '\0')
 202:	88 81       	ld	r24, Y
 204:	88 23       	and	r24, r24
 206:	31 f0       	breq	.+12     	; 0x214 <lcd_string2+0x1c>
 208:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_wr_char(*str);
 20a:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_wr_char>
* Example Call: lcd_string("hello")
*/
void lcd_string2(char row, char column, char *str)
{
	lcd_cursor(row,column);	
	while(*str != '\0')
 20e:	89 91       	ld	r24, Y+
 210:	81 11       	cpse	r24, r1
 212:	fb cf       	rjmp	.-10     	; 0x20a <lcd_string2+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <lcd_print>:
* Logic: 
* Example Call: lcd_print(1,1,val,3)
*/
//0020
void lcd_print(char row, char coloumn, unsigned int value, int digits)
{
 21a:	0f 93       	push	r16
 21c:	1f 93       	push	r17
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
 222:	8a 01       	movw	r16, r20
 224:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 226:	88 23       	and	r24, r24
 228:	11 f0       	breq	.+4      	; 0x22e <lcd_print+0x14>
 22a:	61 11       	cpse	r22, r1
 22c:	03 c0       	rjmp	.+6      	; 0x234 <lcd_print+0x1a>
	{
		lcd_home();
 22e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_home>
 232:	02 c0       	rjmp	.+4      	; 0x238 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 234:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_cursor>
	}
	
	if(digits==5 || flag==1)
 238:	c5 30       	cpi	r28, 0x05	; 5
 23a:	d1 05       	cpc	r29, r1
 23c:	09 f0       	breq	.+2      	; 0x240 <lcd_print+0x26>
 23e:	bf c0       	rjmp	.+382    	; 0x3be <lcd_print+0x1a4>
	{
		million=value/10000+48;
		lcd_wr_char(million);
 240:	98 01       	movw	r18, r16
 242:	32 95       	swap	r19
 244:	22 95       	swap	r18
 246:	2f 70       	andi	r18, 0x0F	; 15
 248:	23 27       	eor	r18, r19
 24a:	3f 70       	andi	r19, 0x0F	; 15
 24c:	23 27       	eor	r18, r19
 24e:	a7 e4       	ldi	r26, 0x47	; 71
 250:	b3 e0       	ldi	r27, 0x03	; 3
 252:	0e 94 c2 02 	call	0x584	; 0x584 <__umulhisi3>
 256:	96 95       	lsr	r25
 258:	87 95       	ror	r24
 25a:	96 95       	lsr	r25
 25c:	87 95       	ror	r24
 25e:	96 95       	lsr	r25
 260:	87 95       	ror	r24
 262:	80 5d       	subi	r24, 0xD0	; 208
 264:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_wr_char>
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
 268:	98 01       	movw	r18, r16
 26a:	36 95       	lsr	r19
 26c:	27 95       	ror	r18
 26e:	36 95       	lsr	r19
 270:	27 95       	ror	r18
 272:	36 95       	lsr	r19
 274:	27 95       	ror	r18
 276:	a5 ec       	ldi	r26, 0xC5	; 197
 278:	b0 e2       	ldi	r27, 0x20	; 32
 27a:	0e 94 c2 02 	call	0x584	; 0x584 <__umulhisi3>
 27e:	ac 01       	movw	r20, r24
 280:	52 95       	swap	r21
 282:	42 95       	swap	r20
 284:	4f 70       	andi	r20, 0x0F	; 15
 286:	45 27       	eor	r20, r21
 288:	5f 70       	andi	r21, 0x0F	; 15
 28a:	45 27       	eor	r20, r21
 28c:	9a 01       	movw	r18, r20
 28e:	ad ec       	ldi	r26, 0xCD	; 205
 290:	bc ec       	ldi	r27, 0xCC	; 204
 292:	0e 94 c2 02 	call	0x584	; 0x584 <__umulhisi3>
 296:	96 95       	lsr	r25
 298:	87 95       	ror	r24
 29a:	96 95       	lsr	r25
 29c:	87 95       	ror	r24
 29e:	96 95       	lsr	r25
 2a0:	87 95       	ror	r24
 2a2:	9c 01       	movw	r18, r24
 2a4:	22 0f       	add	r18, r18
 2a6:	33 1f       	adc	r19, r19
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	82 0f       	add	r24, r18
 2b6:	93 1f       	adc	r25, r19
 2b8:	9a 01       	movw	r18, r20
 2ba:	28 1b       	sub	r18, r24
 2bc:	39 0b       	sbc	r19, r25
 2be:	c9 01       	movw	r24, r18
 2c0:	80 5d       	subi	r24, 0xD0	; 208
 2c2:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_wr_char>
 2c6:	03 c0       	rjmp	.+6      	; 0x2ce <lcd_print+0xb4>
		flag=1;
	}
	if(digits==3 || flag==1)
 2c8:	c3 30       	cpi	r28, 0x03	; 3
 2ca:	d1 05       	cpc	r29, r1
 2cc:	51 f5       	brne	.+84     	; 0x322 <lcd_print+0x108>
	{
		temp = value/100;
		hundred = temp%10 + 48;
		lcd_wr_char(hundred);
 2ce:	98 01       	movw	r18, r16
 2d0:	36 95       	lsr	r19
 2d2:	27 95       	ror	r18
 2d4:	36 95       	lsr	r19
 2d6:	27 95       	ror	r18
 2d8:	ab e7       	ldi	r26, 0x7B	; 123
 2da:	b4 e1       	ldi	r27, 0x14	; 20
 2dc:	0e 94 c2 02 	call	0x584	; 0x584 <__umulhisi3>
 2e0:	ac 01       	movw	r20, r24
 2e2:	56 95       	lsr	r21
 2e4:	47 95       	ror	r20
 2e6:	9a 01       	movw	r18, r20
 2e8:	ad ec       	ldi	r26, 0xCD	; 205
 2ea:	bc ec       	ldi	r27, 0xCC	; 204
 2ec:	0e 94 c2 02 	call	0x584	; 0x584 <__umulhisi3>
 2f0:	96 95       	lsr	r25
 2f2:	87 95       	ror	r24
 2f4:	96 95       	lsr	r25
 2f6:	87 95       	ror	r24
 2f8:	96 95       	lsr	r25
 2fa:	87 95       	ror	r24
 2fc:	9c 01       	movw	r18, r24
 2fe:	22 0f       	add	r18, r18
 300:	33 1f       	adc	r19, r19
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	82 0f       	add	r24, r18
 310:	93 1f       	adc	r25, r19
 312:	9a 01       	movw	r18, r20
 314:	28 1b       	sub	r18, r24
 316:	39 0b       	sbc	r19, r25
 318:	c9 01       	movw	r24, r18
 31a:	80 5d       	subi	r24, 0xD0	; 208
 31c:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_wr_char>
 320:	04 c0       	rjmp	.+8      	; 0x32a <lcd_print+0x110>
		flag=1;
	}
	if(digits==2 || flag==1)
 322:	c2 30       	cpi	r28, 0x02	; 2
 324:	d1 05       	cpc	r29, r1
 326:	09 f0       	breq	.+2      	; 0x32a <lcd_print+0x110>
 328:	4f c0       	rjmp	.+158    	; 0x3c8 <lcd_print+0x1ae>
	{
		temp = value/10;
		tens = temp%10 + 48;
		lcd_wr_char(tens);
 32a:	98 01       	movw	r18, r16
 32c:	ad ec       	ldi	r26, 0xCD	; 205
 32e:	bc ec       	ldi	r27, 0xCC	; 204
 330:	0e 94 c2 02 	call	0x584	; 0x584 <__umulhisi3>
 334:	ac 01       	movw	r20, r24
 336:	56 95       	lsr	r21
 338:	47 95       	ror	r20
 33a:	56 95       	lsr	r21
 33c:	47 95       	ror	r20
 33e:	56 95       	lsr	r21
 340:	47 95       	ror	r20
 342:	9a 01       	movw	r18, r20
 344:	0e 94 c2 02 	call	0x584	; 0x584 <__umulhisi3>
 348:	96 95       	lsr	r25
 34a:	87 95       	ror	r24
 34c:	96 95       	lsr	r25
 34e:	87 95       	ror	r24
 350:	96 95       	lsr	r25
 352:	87 95       	ror	r24
 354:	9c 01       	movw	r18, r24
 356:	22 0f       	add	r18, r18
 358:	33 1f       	adc	r19, r19
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	82 0f       	add	r24, r18
 368:	93 1f       	adc	r25, r19
 36a:	9a 01       	movw	r18, r20
 36c:	28 1b       	sub	r18, r24
 36e:	39 0b       	sbc	r19, r25
 370:	c9 01       	movw	r24, r18
 372:	80 5d       	subi	r24, 0xD0	; 208
 374:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_wr_char>
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
		lcd_wr_char(unit);
 378:	98 01       	movw	r18, r16
 37a:	ad ec       	ldi	r26, 0xCD	; 205
 37c:	bc ec       	ldi	r27, 0xCC	; 204
 37e:	0e 94 c2 02 	call	0x584	; 0x584 <__umulhisi3>
 382:	96 95       	lsr	r25
 384:	87 95       	ror	r24
 386:	96 95       	lsr	r25
 388:	87 95       	ror	r24
 38a:	96 95       	lsr	r25
 38c:	87 95       	ror	r24
 38e:	9c 01       	movw	r18, r24
 390:	22 0f       	add	r18, r18
 392:	33 1f       	adc	r19, r19
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	82 0f       	add	r24, r18
 3a2:	93 1f       	adc	r25, r19
 3a4:	98 01       	movw	r18, r16
 3a6:	28 1b       	sub	r18, r24
 3a8:	39 0b       	sbc	r19, r25
 3aa:	c9 01       	movw	r24, r18
 3ac:	80 5d       	subi	r24, 0xD0	; 208
 3ae:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_wr_char>
	}
	if(digits>5)
 3b2:	26 97       	sbiw	r28, 0x06	; 6
 3b4:	6c f0       	brlt	.+26     	; 0x3d0 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
 3b6:	85 e4       	ldi	r24, 0x45	; 69
 3b8:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_wr_char>
	}
}
 3bc:	09 c0       	rjmp	.+18     	; 0x3d0 <lcd_print+0x1b6>
	{
		million=value/10000+48;
		lcd_wr_char(million);
		flag=1;
	}
	if(digits==4 || flag==1)
 3be:	c4 30       	cpi	r28, 0x04	; 4
 3c0:	d1 05       	cpc	r29, r1
 3c2:	09 f0       	breq	.+2      	; 0x3c6 <lcd_print+0x1ac>
 3c4:	81 cf       	rjmp	.-254    	; 0x2c8 <lcd_print+0xae>
 3c6:	50 cf       	rjmp	.-352    	; 0x268 <lcd_print+0x4e>
		temp = value/10;
		tens = temp%10 + 48;
		lcd_wr_char(tens);
		flag=1;
	}
	if(digits==1 || flag==1)
 3c8:	c1 30       	cpi	r28, 0x01	; 1
 3ca:	d1 05       	cpc	r29, r1
 3cc:	91 f7       	brne	.-28     	; 0x3b2 <lcd_print+0x198>
 3ce:	d4 cf       	rjmp	.-88     	; 0x378 <lcd_print+0x15e>
	}
	if(digits>5)
	{
		lcd_wr_char('E');
	}
}
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	1f 91       	pop	r17
 3d6:	0f 91       	pop	r16
 3d8:	08 95       	ret

000003da <lcd_start>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3da:	8f e9       	ldi	r24, 0x9F	; 159
 3dc:	9f e0       	ldi	r25, 0x0F	; 15
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	f1 f7       	brne	.-4      	; 0x3de <lcd_start+0x4>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <lcd_start+0xa>
 3e4:	00 00       	nop
*/
static void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 3e6:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3 (0011 0000)
 3e8:	80 e3       	ldi	r24, 0x30	; 48
 3ea:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 3ec:	5e 9a       	sbi	0x0b, 6	; 11
 3ee:	ef e1       	ldi	r30, 0x1F	; 31
 3f0:	fe e4       	ldi	r31, 0x4E	; 78
 3f2:	31 97       	sbiw	r30, 0x01	; 1
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <lcd_start+0x18>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <lcd_start+0x1e>
 3f8:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 3fa:	5e 98       	cbi	0x0b, 6	; 11
 3fc:	ef e9       	ldi	r30, 0x9F	; 159
 3fe:	ff e0       	ldi	r31, 0x0F	; 15
 400:	31 97       	sbiw	r30, 0x01	; 1
 402:	f1 f7       	brne	.-4      	; 0x400 <__LOCK_REGION_LENGTH__>
 404:	00 c0       	rjmp	.+0      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 406:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 408:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
 40a:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 40c:	5e 9a       	sbi	0x0b, 6	; 11
 40e:	ef e1       	ldi	r30, 0x1F	; 31
 410:	fe e4       	ldi	r31, 0x4E	; 78
 412:	31 97       	sbiw	r30, 0x01	; 1
 414:	f1 f7       	brne	.-4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 416:	00 c0       	rjmp	.+0      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 418:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 41a:	5e 98       	cbi	0x0b, 6	; 11
 41c:	ef e9       	ldi	r30, 0x9F	; 159
 41e:	ff e0       	ldi	r31, 0x0F	; 15
 420:	31 97       	sbiw	r30, 0x01	; 1
 422:	f1 f7       	brne	.-4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 424:	00 c0       	rjmp	.+0      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 426:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 428:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
 42a:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 42c:	5e 9a       	sbi	0x0b, 6	; 11
 42e:	8f e1       	ldi	r24, 0x1F	; 31
 430:	9e e4       	ldi	r25, 0x4E	; 78
 432:	01 97       	sbiw	r24, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 436:	00 c0       	rjmp	.+0      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 438:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 43a:	5e 98       	cbi	0x0b, 6	; 11
 43c:	ef e9       	ldi	r30, 0x9F	; 159
 43e:	ff e0       	ldi	r31, 0x0F	; 15
 440:	31 97       	sbiw	r30, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 444:	00 c0       	rjmp	.+0      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 446:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 448:	5f 98       	cbi	0x0b, 7	; 11
	//lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
	lcd_port = 0x10;				
 44a:	80 e1       	ldi	r24, 0x10	; 16
 44c:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 44e:	5e 9a       	sbi	0x0b, 6	; 11
 450:	8f e9       	ldi	r24, 0x9F	; 159
 452:	9f e0       	ldi	r25, 0x0F	; 15
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	f1 f7       	brne	.-4      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 458:	00 c0       	rjmp	.+0      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 45a:	00 00       	nop
	_delay_ms(1);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 45c:	5e 98       	cbi	0x0b, 6	; 11
 45e:	ef e9       	ldi	r30, 0x9F	; 159
 460:	ff e0       	ldi	r31, 0x0F	; 15
 462:	31 97       	sbiw	r30, 0x01	; 1
 464:	f1 f7       	brne	.-4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 466:	00 c0       	rjmp	.+0      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 468:	00 00       	nop
*/
static void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
 46a:	88 e2       	ldi	r24, 0x28	; 40
 46c:	0e 94 82 00 	call	0x104	; 0x104 <lcd_wr_command>
	lcd_wr_command(0x01);			//Clear Display
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	0e 94 82 00 	call	0x104	; 0x104 <lcd_wr_command>
	//lcd_wr_command(0x06);			//Increment cursor (Shift to right)
	lcd_wr_command(0x0C);			//Display on, cursor off
 476:	8c e0       	ldi	r24, 0x0C	; 12
 478:	0e 94 82 00 	call	0x104	; 0x104 <lcd_wr_command>
	lcd_wr_command(0x80);			//Force cursor to begigning of first line
 47c:	80 e8       	ldi	r24, 0x80	; 128
 47e:	0e 94 82 00 	call	0x104	; 0x104 <lcd_wr_command>
 482:	08 95       	ret

00000484 <lcd_clear>:
* Logic: Writes spaces to both the rows of the LCD
* Example Call: lcd_clear()
*/
void lcd_clear(void)
{
	lcd_wr_command(0x01);
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	0e 94 82 00 	call	0x104	; 0x104 <lcd_wr_command>
 48a:	08 95       	ret

0000048c <init_devices>:
	lcd_port_config();
}

void init_devices (void)
{
	cli(); //Clears the global interrupts
 48c:	f8 94       	cli
	lcd_start();
 48e:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_start>
	sei();   //Enables the global interrupts
 492:	78 94       	sei
 494:	08 95       	ret

00000496 <main>:
int send_data = 66;		//initial data to send
#define cs1 2

void port_config (void)
{
	lcd_port_config();
 496:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_port_config>
} 

int main(void)
{
	port_config();
	init_devices();
 49a:	0e 94 46 02 	call	0x48c	; 0x48c <init_devices>
	
	if (master)
	{
		lcd_string2(1, 1, "SPI Master");
 49e:	40 e0       	ldi	r20, 0x00	; 0
 4a0:	51 e0       	ldi	r21, 0x01	; 1
 4a2:	61 e0       	ldi	r22, 0x01	; 1
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_string2>
		spiInitMaster();
 4aa:	0e 94 98 02 	call	0x530	; 0x530 <spiInitMaster>
 4ae:	2f ef       	ldi	r18, 0xFF	; 255
 4b0:	83 ed       	ldi	r24, 0xD3	; 211
 4b2:	90 e3       	ldi	r25, 0x30	; 48
 4b4:	21 50       	subi	r18, 0x01	; 1
 4b6:	80 40       	sbci	r24, 0x00	; 0
 4b8:	90 40       	sbci	r25, 0x00	; 0
 4ba:	e1 f7       	brne	.-8      	; 0x4b4 <main+0x1e>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <main+0x28>
 4be:	00 00       	nop
		_delay_ms(1000);	
		lcd_clear();
 4c0:	0e 94 42 02 	call	0x484	; 0x484 <lcd_clear>
	lcd_start();
	sei();   //Enables the global interrupts
} 

int main(void)
{
 4c4:	c0 e0       	ldi	r28, 0x00	; 0
 4c6:	d0 e0       	ldi	r29, 0x00	; 0
    {
		if (master)
		{
			for(uint8_t i = 0; i<10;i++)
			{				
				received_data = spiTransmit(i, cs1);
 4c8:	62 e0       	ldi	r22, 0x02	; 2
 4ca:	70 e0       	ldi	r23, 0x00	; 0
 4cc:	8c 2f       	mov	r24, r28
 4ce:	0e 94 a6 02 	call	0x54c	; 0x54c <spiTransmit>
 4d2:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <received_data+0x1>
 4d6:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <received_data>
				lcd_string2(1, 1, "Sent ");
 4da:	4b e0       	ldi	r20, 0x0B	; 11
 4dc:	51 e0       	ldi	r21, 0x01	; 1
 4de:	61 e0       	ldi	r22, 0x01	; 1
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_string2>
				lcd_print(1, 6, i, 2);				
 4e6:	22 e0       	ldi	r18, 0x02	; 2
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	ae 01       	movw	r20, r28
 4ec:	66 e0       	ldi	r22, 0x06	; 6
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_print>
				
				lcd_string2(2, 1, "Received ");
 4f4:	41 e1       	ldi	r20, 0x11	; 17
 4f6:	51 e0       	ldi	r21, 0x01	; 1
 4f8:	61 e0       	ldi	r22, 0x01	; 1
 4fa:	82 e0       	ldi	r24, 0x02	; 2
 4fc:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_string2>
				lcd_print(2, 10, received_data, 2);
 500:	40 91 1d 01 	lds	r20, 0x011D	; 0x80011d <received_data>
 504:	50 91 1e 01 	lds	r21, 0x011E	; 0x80011e <received_data+0x1>
 508:	22 e0       	ldi	r18, 0x02	; 2
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	6a e0       	ldi	r22, 0x0A	; 10
 50e:	82 e0       	ldi	r24, 0x02	; 2
 510:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_print>
 514:	2f ef       	ldi	r18, 0xFF	; 255
 516:	83 ed       	ldi	r24, 0xD3	; 211
 518:	90 e3       	ldi	r25, 0x30	; 48
 51a:	21 50       	subi	r18, 0x01	; 1
 51c:	80 40       	sbci	r24, 0x00	; 0
 51e:	90 40       	sbci	r25, 0x00	; 0
 520:	e1 f7       	brne	.-8      	; 0x51a <main+0x84>
 522:	00 c0       	rjmp	.+0      	; 0x524 <main+0x8e>
 524:	00 00       	nop
 526:	21 96       	adiw	r28, 0x01	; 1
    /* Replace with your application code */
    while (1) 
    {
		if (master)
		{
			for(uint8_t i = 0; i<10;i++)
 528:	ca 30       	cpi	r28, 0x0A	; 10
 52a:	d1 05       	cpc	r29, r1
 52c:	69 f6       	brne	.-102    	; 0x4c8 <main+0x32>
 52e:	ca cf       	rjmp	.-108    	; 0x4c4 <main+0x2e>

00000530 <spiInitMaster>:

	SPCR &= ~(1<<MSTR);					// Set as slave
	SPCR |= (1<<SPR0)|(1<<SPR1);	    // divide clock by 128 (slowest speed)
	SPCR |= (1<<SPE);					// Enable SPI
	
	sbit(SPCR, SPIE);				//enable spi interrupts for slave
 530:	84 b1       	in	r24, 0x04	; 4
 532:	8c 62       	ori	r24, 0x2C	; 44
 534:	84 b9       	out	0x04, r24	; 4
 536:	24 98       	cbi	0x04, 4	; 4
 538:	8c b5       	in	r24, 0x2c	; 44
 53a:	80 61       	ori	r24, 0x10	; 16
 53c:	8c bd       	out	0x2c, r24	; 44
 53e:	8c b5       	in	r24, 0x2c	; 44
 540:	83 60       	ori	r24, 0x03	; 3
 542:	8c bd       	out	0x2c, r24	; 44
 544:	8c b5       	in	r24, 0x2c	; 44
 546:	80 64       	ori	r24, 0x40	; 64
 548:	8c bd       	out	0x2c, r24	; 44
 54a:	08 95       	ret

0000054c <spiTransmit>:
*/

int spiTransmit(char dataOut, int slavePin)	//Call in while(1)
{
	//csPort &= ~ 1<<slavePin;
	cbit(csPort, cs1);
 54c:	2a 98       	cbi	0x05, 2	; 5
	
	SPDR = dataOut;                 //send the data
 54e:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 550:	0d b4       	in	r0, 0x2d	; 45
 552:	07 fe       	sbrs	r0, 7
 554:	fd cf       	rjmp	.-6      	; 0x550 <spiTransmit+0x4>
	
	sbit(csPort, cs1);
 556:	2a 9a       	sbi	0x05, 2	; 5
	
	dataIn = SPDR;
 558:	8e b5       	in	r24, 0x2e	; 46
 55a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <dataIn>
	return dataIn;					//receive the data from the slave
}
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	08 95       	ret

00000562 <__vector_17>:

ISR(SPI_STC_vect)
{
 562:	1f 92       	push	r1
 564:	0f 92       	push	r0
 566:	0f b6       	in	r0, 0x3f	; 63
 568:	0f 92       	push	r0
 56a:	11 24       	eor	r1, r1
 56c:	8f 93       	push	r24
	dataIn = SPDR;		//get the received data
 56e:	8e b5       	in	r24, 0x2e	; 46
 570:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <dataIn>
	SPDR = dataIn+20;		//echo the received data +20
 574:	8c 5e       	subi	r24, 0xEC	; 236
 576:	8e bd       	out	0x2e, r24	; 46
 578:	8f 91       	pop	r24
 57a:	0f 90       	pop	r0
 57c:	0f be       	out	0x3f, r0	; 63
 57e:	0f 90       	pop	r0
 580:	1f 90       	pop	r1
 582:	18 95       	reti

00000584 <__umulhisi3>:
 584:	a2 9f       	mul	r26, r18
 586:	b0 01       	movw	r22, r0
 588:	b3 9f       	mul	r27, r19
 58a:	c0 01       	movw	r24, r0
 58c:	a3 9f       	mul	r26, r19
 58e:	70 0d       	add	r23, r0
 590:	81 1d       	adc	r24, r1
 592:	11 24       	eor	r1, r1
 594:	91 1d       	adc	r25, r1
 596:	b2 9f       	mul	r27, r18
 598:	70 0d       	add	r23, r0
 59a:	81 1d       	adc	r24, r1
 59c:	11 24       	eor	r1, r1
 59e:	91 1d       	adc	r25, r1
 5a0:	08 95       	ret

000005a2 <_exit>:
 5a2:	f8 94       	cli

000005a4 <__stop_program>:
 5a4:	ff cf       	rjmp	.-2      	; 0x5a4 <__stop_program>
